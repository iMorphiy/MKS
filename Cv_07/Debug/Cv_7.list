
Cv_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006640  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006914  08006914  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08006914  08006914  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006914  08006914  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800691c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001154  20000084  080069a0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011d8  080069a0  000211d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b787  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363d  00000000  00000000  0003b833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  0003ee70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  00040710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000139b2  00000000  00000000  00041e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019df3  00000000  00000000  000557ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072741  00000000  00000000  0006f5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1d1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006188  00000000  00000000  000e1d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080066e8 	.word	0x080066e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	080066e8 	.word	0x080066e8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4a06      	ldr	r2, [pc, #24]	; (800025c <vApplicationGetIdleTaskMemory+0x28>)
 8000244:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	4a05      	ldr	r2, [pc, #20]	; (8000260 <vApplicationGetIdleTaskMemory+0x2c>)
 800024a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2280      	movs	r2, #128	; 0x80
 8000250:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	200000a0 	.word	0x200000a0
 8000260:	20000154 	.word	0x20000154

08000264 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8000264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000266:	b087      	sub	sp, #28
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	0008      	movs	r0, r1
 800026e:	607a      	str	r2, [r7, #4]
 8000270:	0019      	movs	r1, r3
 8000272:	260b      	movs	r6, #11
 8000274:	19bb      	adds	r3, r7, r6
 8000276:	1c02      	adds	r2, r0, #0
 8000278:	701a      	strb	r2, [r3, #0]
 800027a:	2508      	movs	r5, #8
 800027c:	197b      	adds	r3, r7, r5
 800027e:	1c0a      	adds	r2, r1, #0
 8000280:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	685c      	ldr	r4, [r3, #4]
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	68d8      	ldr	r0, [r3, #12]
 800028a:	197b      	adds	r3, r7, r5
 800028c:	881d      	ldrh	r5, [r3, #0]
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	19bb      	adds	r3, r7, r6
 8000292:	7819      	ldrb	r1, [r3, #0]
 8000294:	002b      	movs	r3, r5
 8000296:	47a0      	blx	r4
 8000298:	0003      	movs	r3, r0
 800029a:	617b      	str	r3, [r7, #20]

  return ret;
 800029c:	697b      	ldr	r3, [r7, #20]
}
 800029e:	0018      	movs	r0, r3
 80002a0:	46bd      	mov	sp, r7
 80002a2:	b007      	add	sp, #28
 80002a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002a6 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80002a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a8:	b087      	sub	sp, #28
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	60f8      	str	r0, [r7, #12]
 80002ae:	0008      	movs	r0, r1
 80002b0:	607a      	str	r2, [r7, #4]
 80002b2:	0019      	movs	r1, r3
 80002b4:	260b      	movs	r6, #11
 80002b6:	19bb      	adds	r3, r7, r6
 80002b8:	1c02      	adds	r2, r0, #0
 80002ba:	701a      	strb	r2, [r3, #0]
 80002bc:	2508      	movs	r5, #8
 80002be:	197b      	adds	r3, r7, r5
 80002c0:	1c0a      	adds	r2, r1, #0
 80002c2:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	681c      	ldr	r4, [r3, #0]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	68d8      	ldr	r0, [r3, #12]
 80002cc:	197b      	adds	r3, r7, r5
 80002ce:	881d      	ldrh	r5, [r3, #0]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	19bb      	adds	r3, r7, r6
 80002d4:	7819      	ldrb	r1, [r3, #0]
 80002d6:	002b      	movs	r3, r5
 80002d8:	47a0      	blx	r4
 80002da:	0003      	movs	r3, r0
 80002dc:	617b      	str	r3, [r7, #20]

  return ret;
 80002de:	697b      	ldr	r3, [r7, #20]
}
 80002e0:	0018      	movs	r0, r3
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b007      	add	sp, #28
 80002e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002e8 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b087      	sub	sp, #28
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	000a      	movs	r2, r1
 80002f2:	1cfb      	adds	r3, r7, #3
 80002f4:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80002f6:	2410      	movs	r4, #16
 80002f8:	193a      	adds	r2, r7, r4
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	2301      	movs	r3, #1
 80002fe:	2120      	movs	r1, #32
 8000300:	f7ff ffb0 	bl	8000264 <lis2dw12_read_reg>
 8000304:	0003      	movs	r3, r0
 8000306:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d129      	bne.n	8000362 <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800030e:	1cfb      	adds	r3, r7, #3
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	089b      	lsrs	r3, r3, #2
 8000314:	1c1a      	adds	r2, r3, #0
 8000316:	2303      	movs	r3, #3
 8000318:	4013      	ands	r3, r2
 800031a:	b2da      	uxtb	r2, r3
 800031c:	193b      	adds	r3, r7, r4
 800031e:	2103      	movs	r1, #3
 8000320:	400a      	ands	r2, r1
 8000322:	0090      	lsls	r0, r2, #2
 8000324:	781a      	ldrb	r2, [r3, #0]
 8000326:	210c      	movs	r1, #12
 8000328:	438a      	bics	r2, r1
 800032a:	1c11      	adds	r1, r2, #0
 800032c:	1c02      	adds	r2, r0, #0
 800032e:	430a      	orrs	r2, r1
 8000330:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8000332:	1cfb      	adds	r3, r7, #3
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2203      	movs	r2, #3
 8000338:	4013      	ands	r3, r2
 800033a:	b2da      	uxtb	r2, r3
 800033c:	193b      	adds	r3, r7, r4
 800033e:	2103      	movs	r1, #3
 8000340:	400a      	ands	r2, r1
 8000342:	0010      	movs	r0, r2
 8000344:	781a      	ldrb	r2, [r3, #0]
 8000346:	2103      	movs	r1, #3
 8000348:	438a      	bics	r2, r1
 800034a:	1c11      	adds	r1, r2, #0
 800034c:	1c02      	adds	r2, r0, #0
 800034e:	430a      	orrs	r2, r1
 8000350:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8000352:	193a      	adds	r2, r7, r4
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	2301      	movs	r3, #1
 8000358:	2120      	movs	r1, #32
 800035a:	f7ff ffa4 	bl	80002a6 <lis2dw12_write_reg>
 800035e:	0003      	movs	r3, r0
 8000360:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d108      	bne.n	800037a <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8000368:	230c      	movs	r3, #12
 800036a:	18fa      	adds	r2, r7, r3
 800036c:	6878      	ldr	r0, [r7, #4]
 800036e:	2301      	movs	r3, #1
 8000370:	2125      	movs	r1, #37	; 0x25
 8000372:	f7ff ff77 	bl	8000264 <lis2dw12_read_reg>
 8000376:	0003      	movs	r3, r0
 8000378:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d11a      	bne.n	80003b6 <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8000380:	1cfb      	adds	r3, r7, #3
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	091b      	lsrs	r3, r3, #4
 8000386:	1c1a      	adds	r2, r3, #0
 8000388:	2301      	movs	r3, #1
 800038a:	4013      	ands	r3, r2
 800038c:	b2da      	uxtb	r2, r3
 800038e:	240c      	movs	r4, #12
 8000390:	193b      	adds	r3, r7, r4
 8000392:	2101      	movs	r1, #1
 8000394:	400a      	ands	r2, r1
 8000396:	0090      	lsls	r0, r2, #2
 8000398:	781a      	ldrb	r2, [r3, #0]
 800039a:	2104      	movs	r1, #4
 800039c:	438a      	bics	r2, r1
 800039e:	1c11      	adds	r1, r2, #0
 80003a0:	1c02      	adds	r2, r0, #0
 80003a2:	430a      	orrs	r2, r1
 80003a4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80003a6:	193a      	adds	r2, r7, r4
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	2301      	movs	r3, #1
 80003ac:	2125      	movs	r1, #37	; 0x25
 80003ae:	f7ff ff7a 	bl	80002a6 <lis2dw12_write_reg>
 80003b2:	0003      	movs	r3, r0
 80003b4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80003b6:	697b      	ldr	r3, [r7, #20]
}
 80003b8:	0018      	movs	r0, r3
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b007      	add	sp, #28
 80003be:	bd90      	pop	{r4, r7, pc}

080003c0 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b087      	sub	sp, #28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	000a      	movs	r2, r1
 80003ca:	1cfb      	adds	r3, r7, #3
 80003cc:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80003ce:	2410      	movs	r4, #16
 80003d0:	193a      	adds	r2, r7, r4
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	2301      	movs	r3, #1
 80003d6:	2120      	movs	r1, #32
 80003d8:	f7ff ff44 	bl	8000264 <lis2dw12_read_reg>
 80003dc:	0003      	movs	r3, r0
 80003de:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d115      	bne.n	8000412 <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 80003e6:	1cfb      	adds	r3, r7, #3
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	220f      	movs	r2, #15
 80003ec:	4013      	ands	r3, r2
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	0110      	lsls	r0, r2, #4
 80003f4:	781a      	ldrb	r2, [r3, #0]
 80003f6:	210f      	movs	r1, #15
 80003f8:	400a      	ands	r2, r1
 80003fa:	1c11      	adds	r1, r2, #0
 80003fc:	1c02      	adds	r2, r0, #0
 80003fe:	430a      	orrs	r2, r1
 8000400:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8000402:	193a      	adds	r2, r7, r4
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	2301      	movs	r3, #1
 8000408:	2120      	movs	r1, #32
 800040a:	f7ff ff4c 	bl	80002a6 <lis2dw12_write_reg>
 800040e:	0003      	movs	r3, r0
 8000410:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d108      	bne.n	800042a <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8000418:	230c      	movs	r3, #12
 800041a:	18fa      	adds	r2, r7, r3
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	2301      	movs	r3, #1
 8000420:	2122      	movs	r1, #34	; 0x22
 8000422:	f7ff ff1f 	bl	8000264 <lis2dw12_read_reg>
 8000426:	0003      	movs	r3, r0
 8000428:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d11a      	bne.n	8000466 <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8000430:	1cfb      	adds	r3, r7, #3
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	091b      	lsrs	r3, r3, #4
 8000436:	1c1a      	adds	r2, r3, #0
 8000438:	2303      	movs	r3, #3
 800043a:	4013      	ands	r3, r2
 800043c:	b2da      	uxtb	r2, r3
 800043e:	240c      	movs	r4, #12
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2103      	movs	r1, #3
 8000444:	400a      	ands	r2, r1
 8000446:	0010      	movs	r0, r2
 8000448:	781a      	ldrb	r2, [r3, #0]
 800044a:	2103      	movs	r1, #3
 800044c:	438a      	bics	r2, r1
 800044e:	1c11      	adds	r1, r2, #0
 8000450:	1c02      	adds	r2, r0, #0
 8000452:	430a      	orrs	r2, r1
 8000454:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8000456:	193a      	adds	r2, r7, r4
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	2301      	movs	r3, #1
 800045c:	2122      	movs	r1, #34	; 0x22
 800045e:	f7ff ff22 	bl	80002a6 <lis2dw12_write_reg>
 8000462:	0003      	movs	r3, r0
 8000464:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8000466:	697b      	ldr	r3, [r7, #20]
}
 8000468:	0018      	movs	r0, r3
 800046a:	46bd      	mov	sp, r7
 800046c:	b007      	add	sp, #28
 800046e:	bd90      	pop	{r4, r7, pc}

08000470 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	000a      	movs	r2, r1
 800047a:	1cfb      	adds	r3, r7, #3
 800047c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800047e:	2408      	movs	r4, #8
 8000480:	193a      	adds	r2, r7, r4
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	2301      	movs	r3, #1
 8000486:	2121      	movs	r1, #33	; 0x21
 8000488:	f7ff feec 	bl	8000264 <lis2dw12_read_reg>
 800048c:	0003      	movs	r3, r0
 800048e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d117      	bne.n	80004c6 <lis2dw12_block_data_update_set+0x56>
  {
    reg.bdu = val;
 8000496:	1cfb      	adds	r3, r7, #3
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2201      	movs	r2, #1
 800049c:	4013      	ands	r3, r2
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2101      	movs	r1, #1
 80004a4:	400a      	ands	r2, r1
 80004a6:	00d0      	lsls	r0, r2, #3
 80004a8:	781a      	ldrb	r2, [r3, #0]
 80004aa:	2108      	movs	r1, #8
 80004ac:	438a      	bics	r2, r1
 80004ae:	1c11      	adds	r1, r2, #0
 80004b0:	1c02      	adds	r2, r0, #0
 80004b2:	430a      	orrs	r2, r1
 80004b4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80004b6:	193a      	adds	r2, r7, r4
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	2121      	movs	r1, #33	; 0x21
 80004be:	f7ff fef2 	bl	80002a6 <lis2dw12_write_reg>
 80004c2:	0003      	movs	r3, r0
 80004c4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	0018      	movs	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b005      	add	sp, #20
 80004ce:	bd90      	pop	{r4, r7, pc}

080004d0 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	000a      	movs	r2, r1
 80004da:	1cfb      	adds	r3, r7, #3
 80004dc:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80004de:	2408      	movs	r4, #8
 80004e0:	193a      	adds	r2, r7, r4
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	2301      	movs	r3, #1
 80004e6:	2125      	movs	r1, #37	; 0x25
 80004e8:	f7ff febc 	bl	8000264 <lis2dw12_read_reg>
 80004ec:	0003      	movs	r3, r0
 80004ee:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d117      	bne.n	8000526 <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 80004f6:	1cfb      	adds	r3, r7, #3
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2203      	movs	r2, #3
 80004fc:	4013      	ands	r3, r2
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2103      	movs	r1, #3
 8000504:	400a      	ands	r2, r1
 8000506:	0110      	lsls	r0, r2, #4
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	2130      	movs	r1, #48	; 0x30
 800050c:	438a      	bics	r2, r1
 800050e:	1c11      	adds	r1, r2, #0
 8000510:	1c02      	adds	r2, r0, #0
 8000512:	430a      	orrs	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8000516:	193a      	adds	r2, r7, r4
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	2125      	movs	r1, #37	; 0x25
 800051e:	f7ff fec2 	bl	80002a6 <lis2dw12_write_reg>
 8000522:	0003      	movs	r3, r0
 8000524:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000526:	68fb      	ldr	r3, [r7, #12]
}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b005      	add	sp, #20
 800052e:	bd90      	pop	{r4, r7, pc}

08000530 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b087      	sub	sp, #28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800053a:	240c      	movs	r4, #12
 800053c:	193a      	adds	r2, r7, r4
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	2306      	movs	r3, #6
 8000542:	2128      	movs	r1, #40	; 0x28
 8000544:	f7ff fe8e 	bl	8000264 <lis2dw12_read_reg>
 8000548:	0003      	movs	r3, r0
 800054a:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 800054c:	0021      	movs	r1, r4
 800054e:	187b      	adds	r3, r7, r1
 8000550:	785b      	ldrb	r3, [r3, #1]
 8000552:	b21a      	sxth	r2, r3
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	2200      	movs	r2, #0
 800055c:	5e9b      	ldrsh	r3, [r3, r2]
 800055e:	b29b      	uxth	r3, r3
 8000560:	021b      	lsls	r3, r3, #8
 8000562:	b29a      	uxth	r2, r3
 8000564:	187b      	adds	r3, r7, r1
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b29b      	uxth	r3, r3
 800056a:	18d3      	adds	r3, r2, r3
 800056c:	b29b      	uxth	r3, r3
 800056e:	b21a      	sxth	r2, r3
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000574:	187b      	adds	r3, r7, r1
 8000576:	78da      	ldrb	r2, [r3, #3]
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	3302      	adds	r3, #2
 800057c:	b212      	sxth	r2, r2
 800057e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	3302      	adds	r3, #2
 8000584:	2200      	movs	r2, #0
 8000586:	5e9b      	ldrsh	r3, [r3, r2]
 8000588:	b29b      	uxth	r3, r3
 800058a:	021b      	lsls	r3, r3, #8
 800058c:	b29a      	uxth	r2, r3
 800058e:	187b      	adds	r3, r7, r1
 8000590:	789b      	ldrb	r3, [r3, #2]
 8000592:	b29b      	uxth	r3, r3
 8000594:	18d3      	adds	r3, r2, r3
 8000596:	b29a      	uxth	r2, r3
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	3302      	adds	r3, #2
 800059c:	b212      	sxth	r2, r2
 800059e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	795a      	ldrb	r2, [r3, #5]
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	3304      	adds	r3, #4
 80005a8:	b212      	sxth	r2, r2
 80005aa:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	3304      	adds	r3, #4
 80005b0:	2200      	movs	r2, #0
 80005b2:	5e9b      	ldrsh	r3, [r3, r2]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	18d3      	adds	r3, r2, r3
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	3304      	adds	r3, #4
 80005c8:	b212      	sxth	r2, r2
 80005ca:	801a      	strh	r2, [r3, #0]

  return ret;
 80005cc:	697b      	ldr	r3, [r7, #20]
}
 80005ce:	0018      	movs	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b007      	add	sp, #28
 80005d4:	bd90      	pop	{r4, r7, pc}

080005d6 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80005d6:	b590      	push	{r4, r7, lr}
 80005d8:	b085      	sub	sp, #20
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	000a      	movs	r2, r1
 80005e0:	1cfb      	adds	r3, r7, #3
 80005e2:	701a      	strb	r2, [r3, #0]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80005e4:	2408      	movs	r4, #8
 80005e6:	193a      	adds	r2, r7, r4
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	2301      	movs	r3, #1
 80005ec:	212e      	movs	r1, #46	; 0x2e
 80005ee:	f7ff fe39 	bl	8000264 <lis2dw12_read_reg>
 80005f2:	0003      	movs	r3, r0
 80005f4:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d115      	bne.n	8000628 <lis2dw12_fifo_mode_set+0x52>
  {
    reg.fmode = (uint8_t) val;
 80005fc:	1cfb      	adds	r3, r7, #3
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2207      	movs	r2, #7
 8000602:	4013      	ands	r3, r2
 8000604:	b2da      	uxtb	r2, r3
 8000606:	193b      	adds	r3, r7, r4
 8000608:	0150      	lsls	r0, r2, #5
 800060a:	781a      	ldrb	r2, [r3, #0]
 800060c:	211f      	movs	r1, #31
 800060e:	400a      	ands	r2, r1
 8000610:	1c11      	adds	r1, r2, #0
 8000612:	1c02      	adds	r2, r0, #0
 8000614:	430a      	orrs	r2, r1
 8000616:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8000618:	193a      	adds	r2, r7, r4
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	2301      	movs	r3, #1
 800061e:	212e      	movs	r1, #46	; 0x2e
 8000620:	f7ff fe41 	bl	80002a6 <lis2dw12_write_reg>
 8000624:	0003      	movs	r3, r0
 8000626:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000628:	68fb      	ldr	r3, [r7, #12]
}
 800062a:	0018      	movs	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	b005      	add	sp, #20
 8000630:	bd90      	pop	{r4, r7, pc}

08000632 <lis2dw12_fifo_data_level_get>:
  * @param  val      change the values of diff in reg FIFO_SAMPLES
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_data_level_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8000632:	b590      	push	{r4, r7, lr}
 8000634:	b085      	sub	sp, #20
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
  lis2dw12_fifo_samples_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_SAMPLES, (uint8_t *) &reg, 1);
 800063c:	2408      	movs	r4, #8
 800063e:	193a      	adds	r2, r7, r4
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	2301      	movs	r3, #1
 8000644:	212f      	movs	r1, #47	; 0x2f
 8000646:	f7ff fe0d 	bl	8000264 <lis2dw12_read_reg>
 800064a:	0003      	movs	r3, r0
 800064c:	60fb      	str	r3, [r7, #12]
  *val = reg.diff;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	069b      	lsls	r3, r3, #26
 8000654:	0e9b      	lsrs	r3, r3, #26
 8000656:	b2db      	uxtb	r3, r3
 8000658:	001a      	movs	r2, r3
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	701a      	strb	r2, [r3, #0]

  return ret;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b005      	add	sp, #20
 8000666:	bd90      	pop	{r4, r7, pc}

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b5b0      	push	{r4, r5, r7, lr}
 800066a:	b09a      	sub	sp, #104	; 0x68
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f000 fdbd 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f85b 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000676:	f000 f92b 	bl	80008d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800067a:	f000 f8f9 	bl	8000870 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800067e:	f000 f8b7 	bl	80007f0 <MX_I2C1_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xVisualQueue */
  osMessageQDef(xVisualQueue, 16, uint16_t);
 8000682:	2158      	movs	r1, #88	; 0x58
 8000684:	187b      	adds	r3, r7, r1
 8000686:	4a21      	ldr	r2, [pc, #132]	; (800070c <main+0xa4>)
 8000688:	ca31      	ldmia	r2!, {r0, r4, r5}
 800068a:	c331      	stmia	r3!, {r0, r4, r5}
 800068c:	6812      	ldr	r2, [r2, #0]
 800068e:	601a      	str	r2, [r3, #0]
  xVisualQueueHandle = osMessageCreate(osMessageQ(xVisualQueue), NULL);
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2100      	movs	r1, #0
 8000694:	0018      	movs	r0, r3
 8000696:	f003 fa3b 	bl	8003b10 <osMessageCreate>
 800069a:	0002      	movs	r2, r0
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <main+0xa8>)
 800069e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006a0:	213c      	movs	r1, #60	; 0x3c
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <main+0xac>)
 80006a6:	ca31      	ldmia	r2!, {r0, r4, r5}
 80006a8:	c331      	stmia	r3!, {r0, r4, r5}
 80006aa:	ca31      	ldmia	r2!, {r0, r4, r5}
 80006ac:	c331      	stmia	r3!, {r0, r4, r5}
 80006ae:	6812      	ldr	r2, [r2, #0]
 80006b0:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2100      	movs	r1, #0
 80006b6:	0018      	movs	r0, r3
 80006b8:	f003 f9c9 	bl	8003a4e <osThreadCreate>
 80006bc:	0002      	movs	r2, r0
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <main+0xb0>)
 80006c0:	601a      	str	r2, [r3, #0]

  /* definition and creation of VisualTask */
  osThreadDef(VisualTask, StartVisualTask, osPriorityNormal, 0, 128);
 80006c2:	2120      	movs	r1, #32
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <main+0xb4>)
 80006c8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80006ca:	c331      	stmia	r3!, {r0, r4, r5}
 80006cc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80006ce:	c331      	stmia	r3!, {r0, r4, r5}
 80006d0:	6812      	ldr	r2, [r2, #0]
 80006d2:	601a      	str	r2, [r3, #0]
  VisualTaskHandle = osThreadCreate(osThread(VisualTask), NULL);
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2100      	movs	r1, #0
 80006d8:	0018      	movs	r0, r3
 80006da:	f003 f9b8 	bl	8003a4e <osThreadCreate>
 80006de:	0002      	movs	r2, r0
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <main+0xb8>)
 80006e2:	601a      	str	r2, [r3, #0]

  /* definition and creation of AcceleroTask */
  osThreadDef(AcceleroTask, StartAcceleroTask, osPriorityNormal, 0, 128);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <main+0xbc>)
 80006e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006ea:	c313      	stmia	r3!, {r0, r1, r4}
 80006ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006ee:	c313      	stmia	r3!, {r0, r1, r4}
 80006f0:	6812      	ldr	r2, [r2, #0]
 80006f2:	601a      	str	r2, [r3, #0]
  AcceleroTaskHandle = osThreadCreate(osThread(AcceleroTask), NULL);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2100      	movs	r1, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f003 f9a8 	bl	8003a4e <osThreadCreate>
 80006fe:	0002      	movs	r2, r0
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <main+0xc0>)
 8000702:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000704:	f003 f99b 	bl	8003a3e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000708:	e7fe      	b.n	8000708 <main+0xa0>
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	08006728 	.word	0x08006728
 8000710:	20000430 	.word	0x20000430
 8000714:	08006738 	.word	0x08006738
 8000718:	20000424 	.word	0x20000424
 800071c:	08006754 	.word	0x08006754
 8000720:	20000428 	.word	0x20000428
 8000724:	08006770 	.word	0x08006770
 8000728:	2000042c 	.word	0x2000042c

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b095      	sub	sp, #84	; 0x54
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	2420      	movs	r4, #32
 8000734:	193b      	adds	r3, r7, r4
 8000736:	0018      	movs	r0, r3
 8000738:	2330      	movs	r3, #48	; 0x30
 800073a:	001a      	movs	r2, r3
 800073c:	2100      	movs	r1, #0
 800073e:	f005 f885 	bl	800584c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000742:	2310      	movs	r3, #16
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	0018      	movs	r0, r3
 8000748:	2310      	movs	r3, #16
 800074a:	001a      	movs	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	f005 f87d 	bl	800584c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000752:	003b      	movs	r3, r7
 8000754:	0018      	movs	r0, r3
 8000756:	2310      	movs	r3, #16
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f005 f876 	bl	800584c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	0021      	movs	r1, r4
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2202      	movs	r2, #2
 8000766:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2201      	movs	r2, #1
 800076c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2210      	movs	r2, #16
 8000772:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2202      	movs	r2, #2
 8000778:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	22a0      	movs	r2, #160	; 0xa0
 8000784:	0392      	lsls	r2, r2, #14
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2200      	movs	r2, #0
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	187b      	adds	r3, r7, r1
 8000790:	0018      	movs	r0, r3
 8000792:	f001 fd79 	bl	8002288 <HAL_RCC_OscConfig>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800079a:	f000 fa7f 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	2110      	movs	r1, #16
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2207      	movs	r2, #7
 80007a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2202      	movs	r2, #2
 80007aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2101      	movs	r1, #1
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 f87d 	bl	80028bc <HAL_RCC_ClockConfig>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007c6:	f000 fa69 	bl	8000c9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007ca:	003b      	movs	r3, r7
 80007cc:	2220      	movs	r2, #32
 80007ce:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d6:	003b      	movs	r3, r7
 80007d8:	0018      	movs	r0, r3
 80007da:	f002 f9eb 	bl	8002bb4 <HAL_RCCEx_PeriphCLKConfig>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007e2:	f000 fa5b 	bl	8000c9c <Error_Handler>
  }
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b015      	add	sp, #84	; 0x54
 80007ec:	bd90      	pop	{r4, r7, pc}
	...

080007f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_I2C1_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_I2C1_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_I2C1_Init+0x74>)
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <MX_I2C1_Init+0x7c>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_I2C1_Init+0x74>)
 8000808:	2201      	movs	r2, #1
 800080a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_I2C1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_I2C1_Init+0x74>)
 800082c:	0018      	movs	r0, r3
 800082e:	f000 ff49 	bl	80016c4 <HAL_I2C_Init>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000836:	f000 fa31 	bl	8000c9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_I2C1_Init+0x74>)
 800083c:	2100      	movs	r1, #0
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fc8a 	bl	8002158 <HAL_I2CEx_ConfigAnalogFilter>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000848:	f000 fa28 	bl	8000c9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <MX_I2C1_Init+0x74>)
 800084e:	2100      	movs	r1, #0
 8000850:	0018      	movs	r0, r3
 8000852:	f001 fccd 	bl	80021f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 fa1f 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000354 	.word	0x20000354
 8000868:	40005400 	.word	0x40005400
 800086c:	2000090e 	.word	0x2000090e

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART2_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800087c:	2296      	movs	r2, #150	; 0x96
 800087e:	0212      	lsls	r2, r2, #8
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f002 fcab 	bl	8003210 <HAL_UART_Init>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f9ed 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200003a0 	.word	0x200003a0
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b08b      	sub	sp, #44	; 0x2c
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	2414      	movs	r4, #20
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	0018      	movs	r0, r3
 80008dc:	2314      	movs	r3, #20
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f004 ffb3 	bl	800584c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b40      	ldr	r3, [pc, #256]	; (80009e8 <MX_GPIO_Init+0x118>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b3f      	ldr	r3, [pc, #252]	; (80009e8 <MX_GPIO_Init+0x118>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0309      	lsls	r1, r1, #12
 80008f0:	430a      	orrs	r2, r1
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <MX_GPIO_Init+0x118>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	031b      	lsls	r3, r3, #12
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000902:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	03c9      	lsls	r1, r1, #15
 800090c:	430a      	orrs	r2, r1
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	03db      	lsls	r3, r3, #15
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000920:	695a      	ldr	r2, [r3, #20]
 8000922:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0289      	lsls	r1, r1, #10
 8000928:	430a      	orrs	r2, r1
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <MX_GPIO_Init+0x118>)
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	029b      	lsls	r3, r3, #10
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_GPIO_Init+0x118>)
 800093c:	695a      	ldr	r2, [r3, #20]
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	02c9      	lsls	r1, r1, #11
 8000944:	430a      	orrs	r2, r1
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <MX_GPIO_Init+0x118>)
 800094a:	695a      	ldr	r2, [r3, #20]
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	02db      	lsls	r3, r3, #11
 8000950:	4013      	ands	r3, r2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000956:	2390      	movs	r3, #144	; 0x90
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	2200      	movs	r2, #0
 800095c:	2130      	movs	r1, #48	; 0x30
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fe92 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4
 8000964:	4921      	ldr	r1, [pc, #132]	; (80009ec <MX_GPIO_Init+0x11c>)
 8000966:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_GPIO_Init+0x120>)
 8000968:	2200      	movs	r2, #0
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fe8c 	bl	8001688 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	0192      	lsls	r2, r2, #6
 8000976:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2284      	movs	r2, #132	; 0x84
 800097c:	0392      	lsls	r2, r2, #14
 800097e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	193b      	adds	r3, r7, r4
 8000988:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <MX_GPIO_Init+0x124>)
 800098a:	0019      	movs	r1, r3
 800098c:	0010      	movs	r0, r2
 800098e:	f000 fd0b 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2230      	movs	r2, #48	; 0x30
 8000996:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2201      	movs	r2, #1
 800099c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	193a      	adds	r2, r7, r4
 80009ac:	2390      	movs	r3, #144	; 0x90
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fcf8 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4
 80009b8:	0021      	movs	r1, r4
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <MX_GPIO_Init+0x11c>)
 80009be:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2201      	movs	r2, #1
 80009c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <MX_GPIO_Init+0x120>)
 80009d6:	0019      	movs	r1, r3
 80009d8:	0010      	movs	r0, r2
 80009da:	f000 fce5 	bl	80013a8 <HAL_GPIO_Init>

}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b00b      	add	sp, #44	; 0x2c
 80009e4:	bd90      	pop	{r4, r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40021000 	.word	0x40021000
 80009ec:	00000439 	.word	0x00000439
 80009f0:	48000400 	.word	0x48000400
 80009f4:	48000800 	.word	0x48000800

080009f8 <platform_write>:

/* USER CODE BEGIN 4 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80009f8:	b5b0      	push	{r4, r5, r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af04      	add	r7, sp, #16
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	0008      	movs	r0, r1
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	0019      	movs	r1, r3
 8000a06:	240b      	movs	r4, #11
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	1c02      	adds	r2, r0, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
 8000a0e:	2508      	movs	r5, #8
 8000a10:	197b      	adds	r3, r7, r5
 8000a12:	1c0a      	adds	r2, r1, #0
 8000a14:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000);
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	23fa      	movs	r3, #250	; 0xfa
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	197b      	adds	r3, r7, r5
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	2133      	movs	r1, #51	; 0x33
 8000a32:	f000 fedd 	bl	80017f0 <HAL_I2C_Mem_Write>
	return 0;
 8000a36:	2300      	movs	r3, #0

}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b004      	add	sp, #16
 8000a3e:	bdb0      	pop	{r4, r5, r7, pc}

08000a40 <platform_read>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af04      	add	r7, sp, #16
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	0008      	movs	r0, r1
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	240b      	movs	r4, #11
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	1c02      	adds	r2, r0, #0
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	2508      	movs	r5, #8
 8000a58:	197b      	adds	r3, r7, r5
 8000a5a:	1c0a      	adds	r2, r1, #0
 8000a5c:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	23fa      	movs	r3, #250	; 0xfa
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	9302      	str	r3, [sp, #8]
 8000a6c:	197b      	adds	r3, r7, r5
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2301      	movs	r3, #1
 8000a78:	2133      	movs	r1, #51	; 0x33
 8000a7a:	f000 ffe7 	bl	8001a4c <HAL_I2C_Mem_Read>
	return 0;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b004      	add	sp, #16
 8000a86:	bdb0      	pop	{r4, r5, r7, pc}

08000a88 <_write>:
int _write(int file, char const *buf, int n)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 /* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	2301      	movs	r3, #1
 8000a9a:	425b      	negs	r3, r3
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <_write+0x28>)
 8000aa0:	f002 fc0a 	bl	80032b8 <HAL_UART_Transmit>
	return n;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b004      	add	sp, #16
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	200003a0 	.word	0x200003a0

08000ab4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f003 f813 	bl	8003ae8 <osDelay>
 8000ac2:	e7fb      	b.n	8000abc <StartDefaultTask+0x8>

08000ac4 <StartVisualTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVisualTask */
void StartVisualTask(void const * argument)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartVisualTask */
  /* Infinite loop */
  for(;;)
  {
	  int16_t msg;
	  if (xQueueReceive(xVisualQueueHandle, &msg, portMAX_DELAY)) {
 8000acc:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <StartVisualTask+0x98>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4252      	negs	r2, r2
 8000ad4:	240e      	movs	r4, #14
 8000ad6:	1939      	adds	r1, r7, r4
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f003 faa5 	bl	8004028 <xQueueReceive>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d038      	beq.n	8000b54 <StartVisualTask+0x90>
		  if(msg<-1000){
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	5e9b      	ldrsh	r3, [r3, r2]
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <StartVisualTask+0x9c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	da07      	bge.n	8000afe <StartVisualTask+0x3a>
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0); //light up  LED1
 8000aee:	2390      	movs	r3, #144	; 0x90
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	2200      	movs	r2, #0
 8000af4:	2110      	movs	r1, #16
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 fdc6 	bl	8001688 <HAL_GPIO_WritePin>
 8000afc:	e00d      	b.n	8000b1a <StartVisualTask+0x56>
		  }else
		  if(msg>-1000){
 8000afe:	230e      	movs	r3, #14
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	2200      	movs	r2, #0
 8000b04:	5e9b      	ldrsh	r3, [r3, r2]
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <StartVisualTask+0xa0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	db06      	blt.n	8000b1a <StartVisualTask+0x56>
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1); //light down  LED1
 8000b0c:	2390      	movs	r3, #144	; 0x90
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	2201      	movs	r2, #1
 8000b12:	2110      	movs	r1, #16
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 fdb7 	bl	8001688 <HAL_GPIO_WritePin>
		  }

		  if(msg>1000){
 8000b1a:	230e      	movs	r3, #14
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	2200      	movs	r2, #0
 8000b20:	5e9a      	ldrsh	r2, [r3, r2]
 8000b22:	23fa      	movs	r3, #250	; 0xfa
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dd06      	ble.n	8000b38 <StartVisualTask+0x74>
			  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0); //light up  LED2
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <StartVisualTask+0xa4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2101      	movs	r1, #1
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 fda9 	bl	8001688 <HAL_GPIO_WritePin>
 8000b36:	e00d      	b.n	8000b54 <StartVisualTask+0x90>
		  }else
		  if(msg<1000){
 8000b38:	230e      	movs	r3, #14
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	5e9a      	ldrsh	r2, [r3, r2]
 8000b40:	23fa      	movs	r3, #250	; 0xfa
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	429a      	cmp	r2, r3
 8000b46:	da05      	bge.n	8000b54 <StartVisualTask+0x90>
			  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1); //light down  LED2
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <StartVisualTask+0xa4>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 fd9a 	bl	8001688 <HAL_GPIO_WritePin>
		  }
	  }

    osDelay(100);
 8000b54:	2064      	movs	r0, #100	; 0x64
 8000b56:	f002 ffc7 	bl	8003ae8 <osDelay>
  {
 8000b5a:	e7b7      	b.n	8000acc <StartVisualTask+0x8>
 8000b5c:	20000430 	.word	0x20000430
 8000b60:	fffffc18 	.word	0xfffffc18
 8000b64:	fffffc19 	.word	0xfffffc19
 8000b68:	48000400 	.word	0x48000400

08000b6c <StartAcceleroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcceleroTask */
void StartAcceleroTask(void const * argument)
{
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAcceleroTask */
  /* Infinite loop */
  for(;;)
  {

	  lis2dw12_full_scale_set(&lis2dw12, LIS2DW12_2g);
 8000b74:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <StartAcceleroTask+0x100>)
 8000b76:	2100      	movs	r1, #0
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff fca9 	bl	80004d0 <lis2dw12_full_scale_set>
	  lis2dw12_power_mode_set(&lis2dw12, LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2);
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <StartAcceleroTask+0x100>)
 8000b80:	2111      	movs	r1, #17
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff fbb0 	bl	80002e8 <lis2dw12_power_mode_set>
	  lis2dw12_block_data_update_set(&lis2dw12, PROPERTY_ENABLE);
 8000b88:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <StartAcceleroTask+0x100>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff fc6f 	bl	8000470 <lis2dw12_block_data_update_set>
	  lis2dw12_fifo_mode_set(&lis2dw12, LIS2DW12_STREAM_MODE); // enable continuous FIFO
 8000b92:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <StartAcceleroTask+0x100>)
 8000b94:	2106      	movs	r1, #6
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff fd1d 	bl	80005d6 <lis2dw12_fifo_mode_set>
	  lis2dw12_data_rate_set(&lis2dw12, LIS2DW12_XL_ODR_25Hz); // enable part from power-down
 8000b9c:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <StartAcceleroTask+0x100>)
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff fc0d 	bl	80003c0 <lis2dw12_data_rate_set>

	  uint8_t samples;
	  int16_t raw_acceleration[3];
	  lis2dw12_fifo_data_level_get(&lis2dw12, &samples);
 8000ba6:	2314      	movs	r3, #20
 8000ba8:	18fa      	adds	r2, r7, r3
 8000baa:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <StartAcceleroTask+0x100>)
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fd3f 	bl	8000632 <lis2dw12_fifo_data_level_get>
	  for (uint8_t i = 0; i < samples; i++) {
 8000bb4:	2317      	movs	r3, #23
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	e01b      	b.n	8000bf6 <StartAcceleroTask+0x8a>
	   // Read acceleration data
	   lis2dw12_acceleration_raw_get(&lis2dw12, raw_acceleration);
 8000bbe:	240c      	movs	r4, #12
 8000bc0:	193a      	adds	r2, r7, r4
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <StartAcceleroTask+0x100>)
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fcb2 	bl	8000530 <lis2dw12_acceleration_raw_get>
	   printf("X=%d Y=%d Z=%d\n", raw_acceleration[0], raw_acceleration[1], raw_acceleration[2]);
 8000bcc:	0020      	movs	r0, r4
 8000bce:	183b      	adds	r3, r7, r0
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	5e9b      	ldrsh	r3, [r3, r2]
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	183b      	adds	r3, r7, r0
 8000bd8:	2202      	movs	r2, #2
 8000bda:	5e9b      	ldrsh	r3, [r3, r2]
 8000bdc:	001a      	movs	r2, r3
 8000bde:	183b      	adds	r3, r7, r0
 8000be0:	2004      	movs	r0, #4
 8000be2:	5e1b      	ldrsh	r3, [r3, r0]
 8000be4:	4822      	ldr	r0, [pc, #136]	; (8000c70 <StartAcceleroTask+0x104>)
 8000be6:	f004 fed1 	bl	800598c <iprintf>
	  for (uint8_t i = 0; i < samples; i++) {
 8000bea:	2117      	movs	r1, #23
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	781a      	ldrb	r2, [r3, #0]
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	3201      	adds	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	2314      	movs	r3, #20
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2217      	movs	r2, #23
 8000bfe:	18ba      	adds	r2, r7, r2
 8000c00:	7812      	ldrb	r2, [r2, #0]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d3db      	bcc.n	8000bbe <StartAcceleroTask+0x52>
	  }

	  xQueueSend(xVisualQueueHandle, &raw_acceleration[0], 0);  // Send x-axis acceleration data to visual led function
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <StartAcceleroTask+0x108>)
 8000c08:	6818      	ldr	r0, [r3, #0]
 8000c0a:	240c      	movs	r4, #12
 8000c0c:	1939      	adds	r1, r7, r4
 8000c0e:	2300      	movs	r3, #0
 8000c10:	2200      	movs	r2, #0
 8000c12:	f003 f945 	bl	8003ea0 <xQueueGenericSend>
		osDelay(100);
 8000c16:	2064      	movs	r0, #100	; 0x64
 8000c18:	f002 ff66 	bl	8003ae8 <osDelay>
		uint8_t raw_z = raw_acceleration[1]>>8;
 8000c1c:	0021      	movs	r1, r4
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2202      	movs	r2, #2
 8000c22:	5e9b      	ldrsh	r3, [r3, r2]
 8000c24:	121b      	asrs	r3, r3, #8
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	2016      	movs	r0, #22
 8000c2a:	183b      	adds	r3, r7, r0
 8000c2c:	701a      	strb	r2, [r3, #0]
		uint8_t raw_y = raw_acceleration[2]>>8;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2204      	movs	r2, #4
 8000c32:	5e9b      	ldrsh	r3, [r3, r2]
 8000c34:	121b      	asrs	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	2515      	movs	r5, #21
 8000c3a:	197b      	adds	r3, r7, r5
 8000c3c:	701a      	strb	r2, [r3, #0]
		sct_value(raw_z/10, raw_y/10);
 8000c3e:	183b      	adds	r3, r7, r0
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	210a      	movs	r1, #10
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fa69 	bl	800011c <__udivsi3>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	b29c      	uxth	r4, r3
 8000c50:	197b      	adds	r3, r7, r5
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	210a      	movs	r1, #10
 8000c56:	0018      	movs	r0, r3
 8000c58:	f7ff fa60 	bl	800011c <__udivsi3>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	0019      	movs	r1, r3
 8000c64:	0020      	movs	r0, r4
 8000c66:	f000 f857 	bl	8000d18 <sct_value>
  {
 8000c6a:	e783      	b.n	8000b74 <StartAcceleroTask+0x8>
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	0800678c 	.word	0x0800678c
 8000c74:	20000430 	.word	0x20000430

08000c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c8a:	f000 fac3 	bl	8001214 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	40002000 	.word	0x40002000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <sct_led>:
//	GPIOB->MODER |= GPIO_MODER_MODER4_0; // pin PB4 to output;
//	GPIOB->MODER |= GPIO_MODER_MODER5_0; // pin PB5 to output;
//	GPIOB->MODER |= GPIO_MODER_MODER10_0; // pin PB6 to output;
	sct_led(0);
}
void sct_led(uint32_t value) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<32; i++){
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	e01b      	b.n	8000cee <sct_led+0x46>
		HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, value & 1);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	4814      	ldr	r0, [pc, #80]	; (8000d14 <sct_led+0x6c>)
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	f000 fcdf 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1); //clock pulse;
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <sct_led+0x6c>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2108      	movs	r1, #8
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f000 fcd9 	bl	8001688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <sct_led+0x6c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2108      	movs	r1, #8
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 fcd3 	bl	8001688 <HAL_GPIO_WritePin>
		value>>=1;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	085b      	lsrs	r3, r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
	for (uint32_t i=0; i<32; i++){
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2b1f      	cmp	r3, #31
 8000cf2:	d9e0      	bls.n	8000cb6 <sct_led+0xe>
	}
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1); //latch bit pulse;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <sct_led+0x6c>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fcc4 	bl	8001688 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <sct_led+0x6c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	2120      	movs	r1, #32
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 fcbe 	bl	8001688 <HAL_GPIO_WritePin>
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b004      	add	sp, #16
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	48000400 	.word	0x48000400

08000d18 <sct_value>:
void sct_value(uint16_t value, uint16_t led) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	1dbb      	adds	r3, r7, #6
 8000d22:	801a      	strh	r2, [r3, #0]
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	1c0a      	adds	r2, r1, #0
 8000d28:	801a      	strh	r2, [r3, #0]
	0b0000111111000000 << 16,
	0b0000111111100000 << 16,
	0b0000111111110000 << 16,
	},
	};
	uint32_t reg=0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[0][value / 100 % 10];
 8000d2e:	1dbb      	adds	r3, r7, #6
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	2164      	movs	r1, #100	; 0x64
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff f9f1 	bl	800011c <__udivsi3>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	210a      	movs	r1, #10
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff fa71 	bl	8000228 <__aeabi_uidivmod>
 8000d46:	000b      	movs	r3, r1
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <sct_value+0xb8>)
 8000d4e:	0092      	lsls	r2, r2, #2
 8000d50:	58d3      	ldr	r3, [r2, r3]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[1][value / 10 % 10];
 8000d58:	1dbb      	adds	r3, r7, #6
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	210a      	movs	r1, #10
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff f9dc 	bl	800011c <__udivsi3>
 8000d64:	0003      	movs	r3, r0
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	210a      	movs	r1, #10
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fa5c 	bl	8000228 <__aeabi_uidivmod>
 8000d70:	000b      	movs	r3, r1
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	001a      	movs	r2, r3
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <sct_value+0xb8>)
 8000d78:	320a      	adds	r2, #10
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	58d3      	ldr	r3, [r2, r3]
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[2][value / 1 % 10];
 8000d84:	1dbb      	adds	r3, r7, #6
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	210a      	movs	r1, #10
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fa4c 	bl	8000228 <__aeabi_uidivmod>
 8000d90:	000b      	movs	r3, r1
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	001a      	movs	r2, r3
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <sct_value+0xb8>)
 8000d98:	3214      	adds	r2, #20
 8000d9a:	0092      	lsls	r2, r2, #2
 8000d9c:	58d3      	ldr	r3, [r2, r3]
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[3][led];
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	881a      	ldrh	r2, [r3, #0]
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <sct_value+0xb8>)
 8000daa:	321e      	adds	r2, #30
 8000dac:	0092      	lsls	r2, r2, #2
 8000dae:	58d3      	ldr	r3, [r2, r3]
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
	reg |= 1<<11;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
	sct_led(reg);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff ff70 	bl	8000ca8 <sct_led>

}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b004      	add	sp, #16
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	080067c4 	.word	0x080067c4

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_MspInit+0x50>)
 8000ddc:	699a      	ldr	r2, [r3, #24]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_MspInit+0x50>)
 8000de0:	2101      	movs	r1, #1
 8000de2:	430a      	orrs	r2, r1
 8000de4:	619a      	str	r2, [r3, #24]
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_MspInit+0x50>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	2201      	movs	r2, #1
 8000dec:	4013      	ands	r3, r2
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_MspInit+0x50>)
 8000df4:	69da      	ldr	r2, [r3, #28]
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_MspInit+0x50>)
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	0549      	lsls	r1, r1, #21
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	61da      	str	r2, [r3, #28]
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_MspInit+0x50>)
 8000e02:	69da      	ldr	r2, [r3, #28]
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	055b      	lsls	r3, r3, #21
 8000e08:	4013      	ands	r3, r2
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000e0e:	2302      	movs	r3, #2
 8000e10:	425b      	negs	r3, r3
 8000e12:	2200      	movs	r2, #0
 8000e14:	2103      	movs	r1, #3
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 faa0 	bl	800135c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	2414      	movs	r4, #20
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	0018      	movs	r0, r3
 8000e36:	2314      	movs	r3, #20
 8000e38:	001a      	movs	r2, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f004 fd06 	bl	800584c <memset>
  if(hi2c->Instance==I2C1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <HAL_I2C_MspInit+0x90>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d132      	bne.n	8000eb0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <HAL_I2C_MspInit+0x94>)
 8000e4c:	695a      	ldr	r2, [r3, #20]
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <HAL_I2C_MspInit+0x94>)
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	02c9      	lsls	r1, r1, #11
 8000e54:	430a      	orrs	r2, r1
 8000e56:	615a      	str	r2, [r3, #20]
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_I2C_MspInit+0x94>)
 8000e5a:	695a      	ldr	r2, [r3, #20]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	02db      	lsls	r3, r3, #11
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	22c0      	movs	r2, #192	; 0xc0
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6e:	0021      	movs	r1, r4
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2212      	movs	r2, #18
 8000e74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2201      	movs	r2, #1
 8000e86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_I2C_MspInit+0x98>)
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	0010      	movs	r0, r2
 8000e90:	f000 fa8a 	bl	80013a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_I2C_MspInit+0x94>)
 8000e96:	69da      	ldr	r2, [r3, #28]
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_I2C_MspInit+0x94>)
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	0389      	lsls	r1, r1, #14
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	61da      	str	r2, [r3, #28]
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_I2C_MspInit+0x94>)
 8000ea4:	69da      	ldr	r2, [r3, #28]
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	039b      	lsls	r3, r3, #14
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b00b      	add	sp, #44	; 0x2c
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b08b      	sub	sp, #44	; 0x2c
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	2414      	movs	r4, #20
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	2314      	movs	r3, #20
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f004 fcb8 	bl	800584c <memset>
  if(huart->Instance==USART2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <HAL_UART_MspInit+0x90>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d132      	bne.n	8000f4c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_UART_MspInit+0x94>)
 8000ee8:	69da      	ldr	r2, [r3, #28]
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_UART_MspInit+0x94>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0289      	lsls	r1, r1, #10
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	61da      	str	r2, [r3, #28]
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_UART_MspInit+0x94>)
 8000ef6:	69da      	ldr	r2, [r3, #28]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	029b      	lsls	r3, r3, #10
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_UART_MspInit+0x94>)
 8000f04:	695a      	ldr	r2, [r3, #20]
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_UART_MspInit+0x94>)
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	0289      	lsls	r1, r1, #10
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	615a      	str	r2, [r3, #20]
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_UART_MspInit+0x94>)
 8000f12:	695a      	ldr	r2, [r3, #20]
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	029b      	lsls	r3, r3, #10
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f1e:	0021      	movs	r1, r4
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2202      	movs	r2, #2
 8000f2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	187a      	adds	r2, r7, r1
 8000f40:	2390      	movs	r3, #144	; 0x90
 8000f42:	05db      	lsls	r3, r3, #23
 8000f44:	0011      	movs	r1, r2
 8000f46:	0018      	movs	r0, r3
 8000f48:	f000 fa2e 	bl	80013a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b00b      	add	sp, #44	; 0x2c
 8000f52:	bd90      	pop	{r4, r7, pc}
 8000f54:	40004400 	.word	0x40004400
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b08c      	sub	sp, #48	; 0x30
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000f6c:	4b38      	ldr	r3, [pc, #224]	; (8001050 <HAL_InitTick+0xf4>)
 8000f6e:	69da      	ldr	r2, [r3, #28]
 8000f70:	4b37      	ldr	r3, [pc, #220]	; (8001050 <HAL_InitTick+0xf4>)
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	0049      	lsls	r1, r1, #1
 8000f76:	430a      	orrs	r2, r1
 8000f78:	61da      	str	r2, [r3, #28]
 8000f7a:	4b35      	ldr	r3, [pc, #212]	; (8001050 <HAL_InitTick+0xf4>)
 8000f7c:	69da      	ldr	r2, [r3, #28]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4013      	ands	r3, r2
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f88:	230c      	movs	r3, #12
 8000f8a:	18fa      	adds	r2, r7, r3
 8000f8c:	2410      	movs	r4, #16
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f001 fde4 	bl	8002b60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d104      	bne.n	8000fae <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fa4:	f001 fdc6 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fac:	e004      	b.n	8000fb8 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fae:	f001 fdc1 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fba:	4926      	ldr	r1, [pc, #152]	; (8001054 <HAL_InitTick+0xf8>)
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff f8ad 	bl	800011c <__udivsi3>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <HAL_InitTick+0xfc>)
 8000fca:	4a24      	ldr	r2, [pc, #144]	; (800105c <HAL_InitTick+0x100>)
 8000fcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <HAL_InitTick+0xfc>)
 8000fd0:	4a23      	ldr	r2, [pc, #140]	; (8001060 <HAL_InitTick+0x104>)
 8000fd2:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000fd4:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_InitTick+0xfc>)
 8000fd6:	6a3a      	ldr	r2, [r7, #32]
 8000fd8:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_InitTick+0xfc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_InitTick+0xfc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_InitTick+0xfc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000fec:	252b      	movs	r5, #43	; 0x2b
 8000fee:	197c      	adds	r4, r7, r5
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_InitTick+0xfc>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f001 feac 	bl	8002d50 <HAL_TIM_Base_Init>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000ffc:	197b      	adds	r3, r7, r5
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d11e      	bne.n	8001042 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001004:	197c      	adds	r4, r7, r5
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_InitTick+0xfc>)
 8001008:	0018      	movs	r0, r3
 800100a:	f001 fef9 	bl	8002e00 <HAL_TIM_Base_Start_IT>
 800100e:	0003      	movs	r3, r0
 8001010:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001012:	197b      	adds	r3, r7, r5
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d113      	bne.n	8001042 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800101a:	2013      	movs	r0, #19
 800101c:	f000 f9b3 	bl	8001386 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b03      	cmp	r3, #3
 8001024:	d809      	bhi.n	800103a <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority, 0U);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	0019      	movs	r1, r3
 800102c:	2013      	movs	r0, #19
 800102e:	f000 f995 	bl	800135c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_InitTick+0x108>)
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e003      	b.n	8001042 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 800103a:	232b      	movs	r3, #43	; 0x2b
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001042:	232b      	movs	r3, #43	; 0x2b
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	781b      	ldrb	r3, [r3, #0]
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b00c      	add	sp, #48	; 0x30
 800104e:	bdb0      	pop	{r4, r5, r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	000f4240 	.word	0x000f4240
 8001058:	20000434 	.word	0x20000434
 800105c:	40002000 	.word	0x40002000
 8001060:	000003e7 	.word	0x000003e7
 8001064:	20000014 	.word	0x20000014

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <TIM14_IRQHandler+0x14>)
 800107a:	0018      	movs	r0, r3
 800107c:	f001 ff0c 	bl	8002e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	20000434 	.word	0x20000434

0800108c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e00a      	b.n	80010b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800109e:	e000      	b.n	80010a2 <_read+0x16>
 80010a0:	bf00      	nop
 80010a2:	0001      	movs	r1, r0
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	60ba      	str	r2, [r7, #8]
 80010aa:	b2ca      	uxtb	r2, r1
 80010ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbf0      	blt.n	800109e <_read+0x12>
	}

return len;
 80010bc:	687b      	ldr	r3, [r7, #4]
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b006      	add	sp, #24
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	return -1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	425b      	negs	r3, r3
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}

080010da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	0192      	lsls	r2, r2, #6
 80010ea:	605a      	str	r2, [r3, #4]
	return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_isatty>:

int _isatty(int file)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
	return 1;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}

08001108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
	return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	0018      	movs	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	b004      	add	sp, #16
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	18d3      	adds	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f004 fa44 	bl	80055dc <__errno>
 8001154:	0003      	movs	r3, r0
 8001156:	220c      	movs	r2, #12
 8001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115a:	2301      	movs	r3, #1
 800115c:	425b      	negs	r3, r3
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	18d2      	adds	r2, r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <_sbrk+0x64>)
 8001170:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b006      	add	sp, #24
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20002000 	.word	0x20002000
 8001180:	00000400 	.word	0x00000400
 8001184:	2000047c 	.word	0x2000047c
 8001188:	200011d8 	.word	0x200011d8

0800118c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800119a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800119e:	490e      	ldr	r1, [pc, #56]	; (80011d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a0:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <LoopForever+0xe>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b4:	4c0b      	ldr	r4, [pc, #44]	; (80011e4 <LoopForever+0x16>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011c2:	f7ff ffe3 	bl	800118c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80011c6:	f004 fb11 	bl	80057ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ca:	f7ff fa4d 	bl	8000668 <main>

080011ce <LoopForever>:

LoopForever:
    b LoopForever
 80011ce:	e7fe      	b.n	80011ce <LoopForever>
  ldr   r0, =_estack
 80011d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80011dc:	0800691c 	.word	0x0800691c
  ldr r2, =_sbss
 80011e0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80011e4:	200011d8 	.word	0x200011d8

080011e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_IRQHandler>
	...

080011ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <HAL_Init+0x24>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_Init+0x24>)
 80011f6:	2110      	movs	r1, #16
 80011f8:	430a      	orrs	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f7ff fead 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001202:	f7ff fde7 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x1c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	001a      	movs	r2, r3
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_IncTick+0x20>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	18d2      	adds	r2, r2, r3
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_IncTick+0x20>)
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	20000018 	.word	0x20000018
 8001234:	20000480 	.word	0x20000480

08001238 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <HAL_GetTick+0x10>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	20000480 	.word	0x20000480

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	0002      	movs	r2, r0
 8001254:	1dfb      	adds	r3, r7, #7
 8001256:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b7f      	cmp	r3, #127	; 0x7f
 800125e:	d809      	bhi.n	8001274 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	001a      	movs	r2, r3
 8001266:	231f      	movs	r3, #31
 8001268:	401a      	ands	r2, r3
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_EnableIRQ+0x30>)
 800126c:	2101      	movs	r1, #1
 800126e:	4091      	lsls	r1, r2
 8001270:	000a      	movs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
  }
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	0002      	movs	r2, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b7f      	cmp	r3, #127	; 0x7f
 8001294:	d828      	bhi.n	80012e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001296:	4a2f      	ldr	r2, [pc, #188]	; (8001354 <__NVIC_SetPriority+0xd4>)
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b25b      	sxtb	r3, r3
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	33c0      	adds	r3, #192	; 0xc0
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	589b      	ldr	r3, [r3, r2]
 80012a6:	1dfa      	adds	r2, r7, #7
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	0011      	movs	r1, r2
 80012ac:	2203      	movs	r2, #3
 80012ae:	400a      	ands	r2, r1
 80012b0:	00d2      	lsls	r2, r2, #3
 80012b2:	21ff      	movs	r1, #255	; 0xff
 80012b4:	4091      	lsls	r1, r2
 80012b6:	000a      	movs	r2, r1
 80012b8:	43d2      	mvns	r2, r2
 80012ba:	401a      	ands	r2, r3
 80012bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	019b      	lsls	r3, r3, #6
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	401a      	ands	r2, r3
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	0018      	movs	r0, r3
 80012cc:	2303      	movs	r3, #3
 80012ce:	4003      	ands	r3, r0
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d4:	481f      	ldr	r0, [pc, #124]	; (8001354 <__NVIC_SetPriority+0xd4>)
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	430a      	orrs	r2, r1
 80012e0:	33c0      	adds	r3, #192	; 0xc0
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012e6:	e031      	b.n	800134c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e8:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <__NVIC_SetPriority+0xd8>)
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	0019      	movs	r1, r3
 80012f0:	230f      	movs	r3, #15
 80012f2:	400b      	ands	r3, r1
 80012f4:	3b08      	subs	r3, #8
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3306      	adds	r3, #6
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	18d3      	adds	r3, r2, r3
 80012fe:	3304      	adds	r3, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	1dfa      	adds	r2, r7, #7
 8001304:	7812      	ldrb	r2, [r2, #0]
 8001306:	0011      	movs	r1, r2
 8001308:	2203      	movs	r2, #3
 800130a:	400a      	ands	r2, r1
 800130c:	00d2      	lsls	r2, r2, #3
 800130e:	21ff      	movs	r1, #255	; 0xff
 8001310:	4091      	lsls	r1, r2
 8001312:	000a      	movs	r2, r1
 8001314:	43d2      	mvns	r2, r2
 8001316:	401a      	ands	r2, r3
 8001318:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	019b      	lsls	r3, r3, #6
 800131e:	22ff      	movs	r2, #255	; 0xff
 8001320:	401a      	ands	r2, r3
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	0018      	movs	r0, r3
 8001328:	2303      	movs	r3, #3
 800132a:	4003      	ands	r3, r0
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <__NVIC_SetPriority+0xd8>)
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	001c      	movs	r4, r3
 8001338:	230f      	movs	r3, #15
 800133a:	4023      	ands	r3, r4
 800133c:	3b08      	subs	r3, #8
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	430a      	orrs	r2, r1
 8001342:	3306      	adds	r3, #6
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	18c3      	adds	r3, r0, r3
 8001348:	3304      	adds	r3, #4
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b003      	add	sp, #12
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	210f      	movs	r1, #15
 8001368:	187b      	adds	r3, r7, r1
 800136a:	1c02      	adds	r2, r0, #0
 800136c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	187b      	adds	r3, r7, r1
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b25b      	sxtb	r3, r3
 8001376:	0011      	movs	r1, r2
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff ff81 	bl	8001280 <__NVIC_SetPriority>
}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b004      	add	sp, #16
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	0002      	movs	r2, r0
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b25b      	sxtb	r3, r3
 8001398:	0018      	movs	r0, r3
 800139a:	f7ff ff57 	bl	800124c <__NVIC_EnableIRQ>
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b6:	e14f      	b.n	8001658 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2101      	movs	r1, #1
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4091      	lsls	r1, r2
 80013c2:	000a      	movs	r2, r1
 80013c4:	4013      	ands	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d100      	bne.n	80013d0 <HAL_GPIO_Init+0x28>
 80013ce:	e140      	b.n	8001652 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2203      	movs	r2, #3
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d005      	beq.n	80013e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2203      	movs	r2, #3
 80013e2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d130      	bne.n	800144a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	409a      	lsls	r2, r3
 80013f6:	0013      	movs	r3, r2
 80013f8:	43da      	mvns	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	409a      	lsls	r2, r3
 800140a:	0013      	movs	r3, r2
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141e:	2201      	movs	r2, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	43da      	mvns	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	2201      	movs	r2, #1
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2203      	movs	r2, #3
 8001450:	4013      	ands	r3, r2
 8001452:	2b03      	cmp	r3, #3
 8001454:	d017      	beq.n	8001486 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	43da      	mvns	r2, r3
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2203      	movs	r2, #3
 800148c:	4013      	ands	r3, r2
 800148e:	2b02      	cmp	r3, #2
 8001490:	d123      	bne.n	80014da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	58d3      	ldr	r3, [r2, r3]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2207      	movs	r2, #7
 80014a4:	4013      	ands	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	43da      	mvns	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	691a      	ldr	r2, [r3, #16]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2107      	movs	r1, #7
 80014be:	400b      	ands	r3, r1
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	08da      	lsrs	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	6939      	ldr	r1, [r7, #16]
 80014d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	401a      	ands	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	23c0      	movs	r3, #192	; 0xc0
 8001514:	029b      	lsls	r3, r3, #10
 8001516:	4013      	ands	r3, r2
 8001518:	d100      	bne.n	800151c <HAL_GPIO_Init+0x174>
 800151a:	e09a      	b.n	8001652 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151c:	4b54      	ldr	r3, [pc, #336]	; (8001670 <HAL_GPIO_Init+0x2c8>)
 800151e:	699a      	ldr	r2, [r3, #24]
 8001520:	4b53      	ldr	r3, [pc, #332]	; (8001670 <HAL_GPIO_Init+0x2c8>)
 8001522:	2101      	movs	r1, #1
 8001524:	430a      	orrs	r2, r1
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <HAL_GPIO_Init+0x2c8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2201      	movs	r2, #1
 800152e:	4013      	ands	r3, r2
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001534:	4a4f      	ldr	r2, [pc, #316]	; (8001674 <HAL_GPIO_Init+0x2cc>)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	589b      	ldr	r3, [r3, r2]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2203      	movs	r2, #3
 8001546:	4013      	ands	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	409a      	lsls	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	43da      	mvns	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	2390      	movs	r3, #144	; 0x90
 800155c:	05db      	lsls	r3, r3, #23
 800155e:	429a      	cmp	r2, r3
 8001560:	d013      	beq.n	800158a <HAL_GPIO_Init+0x1e2>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a44      	ldr	r2, [pc, #272]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00d      	beq.n	8001586 <HAL_GPIO_Init+0x1de>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a43      	ldr	r2, [pc, #268]	; (800167c <HAL_GPIO_Init+0x2d4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x1da>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a42      	ldr	r2, [pc, #264]	; (8001680 <HAL_GPIO_Init+0x2d8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_GPIO_Init+0x1d6>
 800157a:	2303      	movs	r3, #3
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x1e4>
 800157e:	2305      	movs	r3, #5
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x1e4>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x1e4>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x1e4>
 800158a:	2300      	movs	r3, #0
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	2103      	movs	r1, #3
 8001590:	400a      	ands	r2, r1
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800159c:	4935      	ldr	r1, [pc, #212]	; (8001674 <HAL_GPIO_Init+0x2cc>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015aa:	4b36      	ldr	r3, [pc, #216]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43da      	mvns	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	025b      	lsls	r3, r3, #9
 80015c2:	4013      	ands	r3, r2
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015ce:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43da      	mvns	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	029b      	lsls	r3, r3, #10
 80015ec:	4013      	ands	r3, r2
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015f8:	4b22      	ldr	r3, [pc, #136]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43da      	mvns	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	035b      	lsls	r3, r3, #13
 8001616:	4013      	ands	r3, r2
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43da      	mvns	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	039b      	lsls	r3, r3, #14
 8001640:	4013      	ands	r3, r2
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	40da      	lsrs	r2, r3
 8001660:	1e13      	subs	r3, r2, #0
 8001662:	d000      	beq.n	8001666 <HAL_GPIO_Init+0x2be>
 8001664:	e6a8      	b.n	80013b8 <HAL_GPIO_Init+0x10>
  } 
}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b006      	add	sp, #24
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000
 8001674:	40010000 	.word	0x40010000
 8001678:	48000400 	.word	0x48000400
 800167c:	48000800 	.word	0x48000800
 8001680:	48000c00 	.word	0x48000c00
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	0008      	movs	r0, r1
 8001692:	0011      	movs	r1, r2
 8001694:	1cbb      	adds	r3, r7, #2
 8001696:	1c02      	adds	r2, r0, #0
 8001698:	801a      	strh	r2, [r3, #0]
 800169a:	1c7b      	adds	r3, r7, #1
 800169c:	1c0a      	adds	r2, r1, #0
 800169e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a0:	1c7b      	adds	r3, r7, #1
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016a8:	1cbb      	adds	r3, r7, #2
 80016aa:	881a      	ldrh	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b0:	e003      	b.n	80016ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016b2:	1cbb      	adds	r3, r7, #2
 80016b4:	881a      	ldrh	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e082      	b.n	80017dc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2241      	movs	r2, #65	; 0x41
 80016da:	5c9b      	ldrb	r3, [r3, r2]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d107      	bne.n	80016f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2240      	movs	r2, #64	; 0x40
 80016e6:	2100      	movs	r1, #0
 80016e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff fb9b 	bl	8000e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2241      	movs	r2, #65	; 0x41
 80016f6:	2124      	movs	r1, #36	; 0x24
 80016f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	438a      	bics	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4934      	ldr	r1, [pc, #208]	; (80017e4 <HAL_I2C_Init+0x120>)
 8001714:	400a      	ands	r2, r1
 8001716:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4931      	ldr	r1, [pc, #196]	; (80017e8 <HAL_I2C_Init+0x124>)
 8001724:	400a      	ands	r2, r1
 8001726:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	0209      	lsls	r1, r1, #8
 800173c:	430a      	orrs	r2, r1
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	e007      	b.n	8001752 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2184      	movs	r1, #132	; 0x84
 800174c:	0209      	lsls	r1, r1, #8
 800174e:	430a      	orrs	r2, r1
 8001750:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d104      	bne.n	8001764 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	491f      	ldr	r1, [pc, #124]	; (80017ec <HAL_I2C_Init+0x128>)
 8001770:	430a      	orrs	r2, r1
 8001772:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	491a      	ldr	r1, [pc, #104]	; (80017e8 <HAL_I2C_Init+0x124>)
 8001780:	400a      	ands	r2, r1
 8001782:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	431a      	orrs	r2, r3
 800178e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69d9      	ldr	r1, [r3, #28]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1a      	ldr	r2, [r3, #32]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2241      	movs	r2, #65	; 0x41
 80017c8:	2120      	movs	r1, #32
 80017ca:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2242      	movs	r2, #66	; 0x42
 80017d6:	2100      	movs	r1, #0
 80017d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	f0ffffff 	.word	0xf0ffffff
 80017e8:	ffff7fff 	.word	0xffff7fff
 80017ec:	02008000 	.word	0x02008000

080017f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	000c      	movs	r4, r1
 80017fa:	0010      	movs	r0, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	230a      	movs	r3, #10
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	1c22      	adds	r2, r4, #0
 8001804:	801a      	strh	r2, [r3, #0]
 8001806:	2308      	movs	r3, #8
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	1c02      	adds	r2, r0, #0
 800180c:	801a      	strh	r2, [r3, #0]
 800180e:	1dbb      	adds	r3, r7, #6
 8001810:	1c0a      	adds	r2, r1, #0
 8001812:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2241      	movs	r2, #65	; 0x41
 8001818:	5c9b      	ldrb	r3, [r3, r2]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b20      	cmp	r3, #32
 800181e:	d000      	beq.n	8001822 <HAL_I2C_Mem_Write+0x32>
 8001820:	e10c      	b.n	8001a3c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_I2C_Mem_Write+0x42>
 8001828:	232c      	movs	r3, #44	; 0x2c
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d105      	bne.n	800183e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0ff      	b.n	8001a3e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2240      	movs	r2, #64	; 0x40
 8001842:	5c9b      	ldrb	r3, [r3, r2]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_I2C_Mem_Write+0x5c>
 8001848:	2302      	movs	r3, #2
 800184a:	e0f8      	b.n	8001a3e <HAL_I2C_Mem_Write+0x24e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2240      	movs	r2, #64	; 0x40
 8001850:	2101      	movs	r1, #1
 8001852:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001854:	f7ff fcf0 	bl	8001238 <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	0219      	lsls	r1, r3, #8
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2319      	movs	r3, #25
 8001868:	2201      	movs	r2, #1
 800186a:	f000 fb0b 	bl	8001e84 <I2C_WaitOnFlagUntilTimeout>
 800186e:	1e03      	subs	r3, r0, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e0e3      	b.n	8001a3e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2241      	movs	r2, #65	; 0x41
 800187a:	2121      	movs	r1, #33	; 0x21
 800187c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2242      	movs	r2, #66	; 0x42
 8001882:	2140      	movs	r1, #64	; 0x40
 8001884:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	222c      	movs	r2, #44	; 0x2c
 8001896:	18ba      	adds	r2, r7, r2
 8001898:	8812      	ldrh	r2, [r2, #0]
 800189a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018a2:	1dbb      	adds	r3, r7, #6
 80018a4:	881c      	ldrh	r4, [r3, #0]
 80018a6:	2308      	movs	r3, #8
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	881a      	ldrh	r2, [r3, #0]
 80018ac:	230a      	movs	r3, #10
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	8819      	ldrh	r1, [r3, #0]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	0023      	movs	r3, r4
 80018be:	f000 f9f9 	bl	8001cb4 <I2C_RequestMemoryWrite>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d005      	beq.n	80018d2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2240      	movs	r2, #64	; 0x40
 80018ca:	2100      	movs	r1, #0
 80018cc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0b5      	b.n	8001a3e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	2bff      	cmp	r3, #255	; 0xff
 80018da:	d911      	bls.n	8001900 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	22ff      	movs	r2, #255	; 0xff
 80018e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	045c      	lsls	r4, r3, #17
 80018ec:	230a      	movs	r3, #10
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	8819      	ldrh	r1, [r3, #0]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	2300      	movs	r3, #0
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	0023      	movs	r3, r4
 80018fa:	f000 fbf7 	bl	80020ec <I2C_TransferConfig>
 80018fe:	e012      	b.n	8001926 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190e:	b2da      	uxtb	r2, r3
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	049c      	lsls	r4, r3, #18
 8001914:	230a      	movs	r3, #10
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	8819      	ldrh	r1, [r3, #0]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	2300      	movs	r3, #0
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	0023      	movs	r3, r4
 8001922:	f000 fbe3 	bl	80020ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	0018      	movs	r0, r3
 800192e:	f000 fae8 	bl	8001f02 <I2C_WaitOnTXISFlagUntilTimeout>
 8001932:	1e03      	subs	r3, r0, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e081      	b.n	8001a3e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	781a      	ldrb	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001962:	3b01      	subs	r3, #1
 8001964:	b29a      	uxth	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196e:	b29b      	uxth	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d03a      	beq.n	80019ea <HAL_I2C_Mem_Write+0x1fa>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001978:	2b00      	cmp	r3, #0
 800197a:	d136      	bne.n	80019ea <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800197c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	0013      	movs	r3, r2
 8001986:	2200      	movs	r2, #0
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	f000 fa7b 	bl	8001e84 <I2C_WaitOnFlagUntilTimeout>
 800198e:	1e03      	subs	r3, r0, #0
 8001990:	d001      	beq.n	8001996 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e053      	b.n	8001a3e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199a:	b29b      	uxth	r3, r3
 800199c:	2bff      	cmp	r3, #255	; 0xff
 800199e:	d911      	bls.n	80019c4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	22ff      	movs	r2, #255	; 0xff
 80019a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	045c      	lsls	r4, r3, #17
 80019b0:	230a      	movs	r3, #10
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	8819      	ldrh	r1, [r3, #0]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	0023      	movs	r3, r4
 80019be:	f000 fb95 	bl	80020ec <I2C_TransferConfig>
 80019c2:	e012      	b.n	80019ea <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	049c      	lsls	r4, r3, #18
 80019d8:	230a      	movs	r3, #10
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	8819      	ldrh	r1, [r3, #0]
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	2300      	movs	r3, #0
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	0023      	movs	r3, r4
 80019e6:	f000 fb81 	bl	80020ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d198      	bne.n	8001926 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 fac0 	bl	8001f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a00:	1e03      	subs	r3, r0, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e01a      	b.n	8001a3e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	490b      	ldr	r1, [pc, #44]	; (8001a48 <HAL_I2C_Mem_Write+0x258>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2241      	movs	r2, #65	; 0x41
 8001a24:	2120      	movs	r1, #32
 8001a26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2242      	movs	r2, #66	; 0x42
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2240      	movs	r2, #64	; 0x40
 8001a34:	2100      	movs	r1, #0
 8001a36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e000      	b.n	8001a3e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001a3c:	2302      	movs	r3, #2
  }
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b007      	add	sp, #28
 8001a44:	bd90      	pop	{r4, r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	fe00e800 	.word	0xfe00e800

08001a4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	000c      	movs	r4, r1
 8001a56:	0010      	movs	r0, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	1c22      	adds	r2, r4, #0
 8001a60:	801a      	strh	r2, [r3, #0]
 8001a62:	2308      	movs	r3, #8
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	1c02      	adds	r2, r0, #0
 8001a68:	801a      	strh	r2, [r3, #0]
 8001a6a:	1dbb      	adds	r3, r7, #6
 8001a6c:	1c0a      	adds	r2, r1, #0
 8001a6e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2241      	movs	r2, #65	; 0x41
 8001a74:	5c9b      	ldrb	r3, [r3, r2]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	d000      	beq.n	8001a7e <HAL_I2C_Mem_Read+0x32>
 8001a7c:	e110      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <HAL_I2C_Mem_Read+0x42>
 8001a84:	232c      	movs	r3, #44	; 0x2c
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e103      	b.n	8001ca2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2240      	movs	r2, #64	; 0x40
 8001a9e:	5c9b      	ldrb	r3, [r3, r2]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_I2C_Mem_Read+0x5c>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e0fc      	b.n	8001ca2 <HAL_I2C_Mem_Read+0x256>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2240      	movs	r2, #64	; 0x40
 8001aac:	2101      	movs	r1, #1
 8001aae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ab0:	f7ff fbc2 	bl	8001238 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	0219      	lsls	r1, r3, #8
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2319      	movs	r3, #25
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f000 f9dd 	bl	8001e84 <I2C_WaitOnFlagUntilTimeout>
 8001aca:	1e03      	subs	r3, r0, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0e7      	b.n	8001ca2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2241      	movs	r2, #65	; 0x41
 8001ad6:	2122      	movs	r1, #34	; 0x22
 8001ad8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2242      	movs	r2, #66	; 0x42
 8001ade:	2140      	movs	r1, #64	; 0x40
 8001ae0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	222c      	movs	r2, #44	; 0x2c
 8001af2:	18ba      	adds	r2, r7, r2
 8001af4:	8812      	ldrh	r2, [r2, #0]
 8001af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001afe:	1dbb      	adds	r3, r7, #6
 8001b00:	881c      	ldrh	r4, [r3, #0]
 8001b02:	2308      	movs	r3, #8
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	881a      	ldrh	r2, [r3, #0]
 8001b08:	230a      	movs	r3, #10
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	8819      	ldrh	r1, [r3, #0]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	0023      	movs	r3, r4
 8001b1a:	f000 f92f 	bl	8001d7c <I2C_RequestMemoryRead>
 8001b1e:	1e03      	subs	r3, r0, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2240      	movs	r2, #64	; 0x40
 8001b26:	2100      	movs	r1, #0
 8001b28:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0b9      	b.n	8001ca2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	2bff      	cmp	r3, #255	; 0xff
 8001b36:	d911      	bls.n	8001b5c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	22ff      	movs	r2, #255	; 0xff
 8001b3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	045c      	lsls	r4, r3, #17
 8001b48:	230a      	movs	r3, #10
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	8819      	ldrh	r1, [r3, #0]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	4b56      	ldr	r3, [pc, #344]	; (8001cac <HAL_I2C_Mem_Read+0x260>)
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	0023      	movs	r3, r4
 8001b56:	f000 fac9 	bl	80020ec <I2C_TransferConfig>
 8001b5a:	e012      	b.n	8001b82 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	049c      	lsls	r4, r3, #18
 8001b70:	230a      	movs	r3, #10
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	8819      	ldrh	r1, [r3, #0]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	4b4c      	ldr	r3, [pc, #304]	; (8001cac <HAL_I2C_Mem_Read+0x260>)
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	0023      	movs	r3, r4
 8001b7e:	f000 fab5 	bl	80020ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	0013      	movs	r3, r2
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2104      	movs	r1, #4
 8001b90:	f000 f978 	bl	8001e84 <I2C_WaitOnFlagUntilTimeout>
 8001b94:	1e03      	subs	r3, r0, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e082      	b.n	8001ca2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d03a      	beq.n	8001c4e <HAL_I2C_Mem_Read+0x202>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d136      	bne.n	8001c4e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	0013      	movs	r3, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	f000 f949 	bl	8001e84 <I2C_WaitOnFlagUntilTimeout>
 8001bf2:	1e03      	subs	r3, r0, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e053      	b.n	8001ca2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2bff      	cmp	r3, #255	; 0xff
 8001c02:	d911      	bls.n	8001c28 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	22ff      	movs	r2, #255	; 0xff
 8001c08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	045c      	lsls	r4, r3, #17
 8001c14:	230a      	movs	r3, #10
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	8819      	ldrh	r1, [r3, #0]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	0023      	movs	r3, r4
 8001c22:	f000 fa63 	bl	80020ec <I2C_TransferConfig>
 8001c26:	e012      	b.n	8001c4e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	049c      	lsls	r4, r3, #18
 8001c3c:	230a      	movs	r3, #10
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	8819      	ldrh	r1, [r3, #0]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	2300      	movs	r3, #0
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	0023      	movs	r3, r4
 8001c4a:	f000 fa4f 	bl	80020ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d194      	bne.n	8001b82 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 f98e 	bl	8001f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c64:	1e03      	subs	r3, r0, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e01a      	b.n	8001ca2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2220      	movs	r2, #32
 8001c72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <HAL_I2C_Mem_Read+0x264>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2241      	movs	r2, #65	; 0x41
 8001c88:	2120      	movs	r1, #32
 8001c8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2242      	movs	r2, #66	; 0x42
 8001c90:	2100      	movs	r1, #0
 8001c92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	2100      	movs	r1, #0
 8001c9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e000      	b.n	8001ca2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
  }
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b007      	add	sp, #28
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	80002400 	.word	0x80002400
 8001cb0:	fe00e800 	.word	0xfe00e800

08001cb4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001cb4:	b5b0      	push	{r4, r5, r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	000c      	movs	r4, r1
 8001cbe:	0010      	movs	r0, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	250a      	movs	r5, #10
 8001cc4:	197b      	adds	r3, r7, r5
 8001cc6:	1c22      	adds	r2, r4, #0
 8001cc8:	801a      	strh	r2, [r3, #0]
 8001cca:	2308      	movs	r3, #8
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	1c02      	adds	r2, r0, #0
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	1dbb      	adds	r3, r7, #6
 8001cd4:	1c0a      	adds	r2, r1, #0
 8001cd6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cd8:	1dbb      	adds	r3, r7, #6
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	045c      	lsls	r4, r3, #17
 8001ce2:	197b      	adds	r3, r7, r5
 8001ce4:	8819      	ldrh	r1, [r3, #0]
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <I2C_RequestMemoryWrite+0xc4>)
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	0023      	movs	r3, r4
 8001cee:	f000 f9fd 	bl	80020ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf4:	6a39      	ldr	r1, [r7, #32]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f000 f902 	bl	8001f02 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cfe:	1e03      	subs	r3, r0, #0
 8001d00:	d001      	beq.n	8001d06 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e033      	b.n	8001d6e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d06:	1dbb      	adds	r3, r7, #6
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d107      	bne.n	8001d1e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d0e:	2308      	movs	r3, #8
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8001d1c:	e019      	b.n	8001d52 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d1e:	2308      	movs	r3, #8
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d32:	6a39      	ldr	r1, [r7, #32]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 f8e3 	bl	8001f02 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d3c:	1e03      	subs	r3, r0, #0
 8001d3e:	d001      	beq.n	8001d44 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e014      	b.n	8001d6e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d44:	2308      	movs	r3, #8
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d52:	6a3a      	ldr	r2, [r7, #32]
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	0013      	movs	r3, r2
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	f000 f890 	bl	8001e84 <I2C_WaitOnFlagUntilTimeout>
 8001d64:	1e03      	subs	r3, r0, #0
 8001d66:	d001      	beq.n	8001d6c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b004      	add	sp, #16
 8001d74:	bdb0      	pop	{r4, r5, r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	80002000 	.word	0x80002000

08001d7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001d7c:	b5b0      	push	{r4, r5, r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	000c      	movs	r4, r1
 8001d86:	0010      	movs	r0, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	250a      	movs	r5, #10
 8001d8c:	197b      	adds	r3, r7, r5
 8001d8e:	1c22      	adds	r2, r4, #0
 8001d90:	801a      	strh	r2, [r3, #0]
 8001d92:	2308      	movs	r3, #8
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	1c02      	adds	r2, r0, #0
 8001d98:	801a      	strh	r2, [r3, #0]
 8001d9a:	1dbb      	adds	r3, r7, #6
 8001d9c:	1c0a      	adds	r2, r1, #0
 8001d9e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001da0:	1dbb      	adds	r3, r7, #6
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	197b      	adds	r3, r7, r5
 8001da8:	8819      	ldrh	r1, [r3, #0]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <I2C_RequestMemoryRead+0xc0>)
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2300      	movs	r3, #0
 8001db2:	f000 f99b 	bl	80020ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	6a39      	ldr	r1, [r7, #32]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 f8a0 	bl	8001f02 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dc2:	1e03      	subs	r3, r0, #0
 8001dc4:	d001      	beq.n	8001dca <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e033      	b.n	8001e32 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dca:	1dbb      	adds	r3, r7, #6
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d107      	bne.n	8001de2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
 8001de0:	e019      	b.n	8001e16 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001de2:	2308      	movs	r3, #8
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df6:	6a39      	ldr	r1, [r7, #32]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 f881 	bl	8001f02 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e00:	1e03      	subs	r3, r0, #0
 8001e02:	d001      	beq.n	8001e08 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e014      	b.n	8001e32 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e08:	2308      	movs	r3, #8
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001e16:	6a3a      	ldr	r2, [r7, #32]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	0013      	movs	r3, r2
 8001e20:	2200      	movs	r2, #0
 8001e22:	2140      	movs	r1, #64	; 0x40
 8001e24:	f000 f82e 	bl	8001e84 <I2C_WaitOnFlagUntilTimeout>
 8001e28:	1e03      	subs	r3, r0, #0
 8001e2a:	d001      	beq.n	8001e30 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	0018      	movs	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b004      	add	sp, #16
 8001e38:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	80002000 	.word	0x80002000

08001e40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d103      	bne.n	8001e5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2201      	movs	r2, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d007      	beq.n	8001e7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2101      	movs	r1, #1
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	619a      	str	r2, [r3, #24]
  }
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	1dfb      	adds	r3, r7, #7
 8001e92:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e94:	e021      	b.n	8001eda <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	d01e      	beq.n	8001eda <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9c:	f7ff f9cc 	bl	8001238 <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d302      	bcc.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d113      	bne.n	8001eda <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2241      	movs	r2, #65	; 0x41
 8001ec2:	2120      	movs	r1, #32
 8001ec4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2242      	movs	r2, #66	; 0x42
 8001eca:	2100      	movs	r1, #0
 8001ecc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2240      	movs	r2, #64	; 0x40
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	425a      	negs	r2, r3
 8001eea:	4153      	adcs	r3, r2
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	001a      	movs	r2, r3
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d0ce      	beq.n	8001e96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	0018      	movs	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b004      	add	sp, #16
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f0e:	e02b      	b.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f000 f86e 	bl	8001ff8 <I2C_IsAcknowledgeFailed>
 8001f1c:	1e03      	subs	r3, r0, #0
 8001f1e:	d001      	beq.n	8001f24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e029      	b.n	8001f78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	3301      	adds	r3, #1
 8001f28:	d01e      	beq.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2a:	f7ff f985 	bl	8001238 <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d302      	bcc.n	8001f40 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d113      	bne.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f44:	2220      	movs	r2, #32
 8001f46:	431a      	orrs	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2241      	movs	r2, #65	; 0x41
 8001f50:	2120      	movs	r1, #32
 8001f52:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2242      	movs	r2, #66	; 0x42
 8001f58:	2100      	movs	r1, #0
 8001f5a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	2100      	movs	r1, #0
 8001f62:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e007      	b.n	8001f78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d1cc      	bne.n	8001f10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b004      	add	sp, #16
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f8c:	e028      	b.n	8001fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f000 f82f 	bl	8001ff8 <I2C_IsAcknowledgeFailed>
 8001f9a:	1e03      	subs	r3, r0, #0
 8001f9c:	d001      	beq.n	8001fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e026      	b.n	8001ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa2:	f7ff f949 	bl	8001238 <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d302      	bcc.n	8001fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d113      	bne.n	8001fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2241      	movs	r2, #65	; 0x41
 8001fc8:	2120      	movs	r1, #32
 8001fca:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2242      	movs	r2, #66	; 0x42
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2240      	movs	r2, #64	; 0x40
 8001fd8:	2100      	movs	r1, #0
 8001fda:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e007      	b.n	8001ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d1cf      	bne.n	8001f8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b004      	add	sp, #16
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2210      	movs	r2, #16
 800200c:	4013      	ands	r3, r2
 800200e:	2b10      	cmp	r3, #16
 8002010:	d164      	bne.n	80020dc <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	049b      	lsls	r3, r3, #18
 800201c:	401a      	ands	r2, r3
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	049b      	lsls	r3, r3, #18
 8002022:	429a      	cmp	r2, r3
 8002024:	d02b      	beq.n	800207e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	01c9      	lsls	r1, r1, #7
 8002034:	430a      	orrs	r2, r1
 8002036:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002038:	e021      	b.n	800207e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3301      	adds	r3, #1
 800203e:	d01e      	beq.n	800207e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002040:	f7ff f8fa 	bl	8001238 <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	429a      	cmp	r2, r3
 800204e:	d302      	bcc.n	8002056 <I2C_IsAcknowledgeFailed+0x5e>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d113      	bne.n	800207e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	2220      	movs	r2, #32
 800205c:	431a      	orrs	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2241      	movs	r2, #65	; 0x41
 8002066:	2120      	movs	r1, #32
 8002068:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2242      	movs	r2, #66	; 0x42
 800206e:	2100      	movs	r1, #0
 8002070:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e02f      	b.n	80020de <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2220      	movs	r2, #32
 8002086:	4013      	ands	r3, r2
 8002088:	2b20      	cmp	r3, #32
 800208a:	d1d6      	bne.n	800203a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2210      	movs	r2, #16
 8002092:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2220      	movs	r2, #32
 800209a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	0018      	movs	r0, r3
 80020a0:	f7ff fece 	bl	8001e40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	490e      	ldr	r1, [pc, #56]	; (80020e8 <I2C_IsAcknowledgeFailed+0xf0>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	2204      	movs	r2, #4
 80020ba:	431a      	orrs	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2241      	movs	r2, #65	; 0x41
 80020c4:	2120      	movs	r1, #32
 80020c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2242      	movs	r2, #66	; 0x42
 80020cc:	2100      	movs	r1, #0
 80020ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2240      	movs	r2, #64	; 0x40
 80020d4:	2100      	movs	r1, #0
 80020d6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b004      	add	sp, #16
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	fe00e800 	.word	0xfe00e800

080020ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	0008      	movs	r0, r1
 80020f6:	0011      	movs	r1, r2
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	240a      	movs	r4, #10
 80020fc:	193b      	adds	r3, r7, r4
 80020fe:	1c02      	adds	r2, r0, #0
 8002100:	801a      	strh	r2, [r3, #0]
 8002102:	2009      	movs	r0, #9
 8002104:	183b      	adds	r3, r7, r0
 8002106:	1c0a      	adds	r2, r1, #0
 8002108:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	6a3a      	ldr	r2, [r7, #32]
 8002112:	0d51      	lsrs	r1, r2, #21
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	00d2      	lsls	r2, r2, #3
 8002118:	400a      	ands	r2, r1
 800211a:	490e      	ldr	r1, [pc, #56]	; (8002154 <I2C_TransferConfig+0x68>)
 800211c:	430a      	orrs	r2, r1
 800211e:	43d2      	mvns	r2, r2
 8002120:	401a      	ands	r2, r3
 8002122:	0011      	movs	r1, r2
 8002124:	193b      	adds	r3, r7, r4
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	059b      	lsls	r3, r3, #22
 800212a:	0d9a      	lsrs	r2, r3, #22
 800212c:	183b      	adds	r3, r7, r0
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	0418      	lsls	r0, r3, #16
 8002132:	23ff      	movs	r3, #255	; 0xff
 8002134:	041b      	lsls	r3, r3, #16
 8002136:	4003      	ands	r3, r0
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	431a      	orrs	r2, r3
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	431a      	orrs	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	b005      	add	sp, #20
 8002150:	bd90      	pop	{r4, r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	03ff63ff 	.word	0x03ff63ff

08002158 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2241      	movs	r2, #65	; 0x41
 8002166:	5c9b      	ldrb	r3, [r3, r2]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b20      	cmp	r3, #32
 800216c:	d138      	bne.n	80021e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2240      	movs	r2, #64	; 0x40
 8002172:	5c9b      	ldrb	r3, [r3, r2]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002178:	2302      	movs	r3, #2
 800217a:	e032      	b.n	80021e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2240      	movs	r2, #64	; 0x40
 8002180:	2101      	movs	r1, #1
 8002182:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2241      	movs	r2, #65	; 0x41
 8002188:	2124      	movs	r1, #36	; 0x24
 800218a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2101      	movs	r1, #1
 8002198:	438a      	bics	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4911      	ldr	r1, [pc, #68]	; (80021ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021a8:	400a      	ands	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6819      	ldr	r1, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2101      	movs	r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2241      	movs	r2, #65	; 0x41
 80021d0:	2120      	movs	r1, #32
 80021d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2240      	movs	r2, #64	; 0x40
 80021d8:	2100      	movs	r1, #0
 80021da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	e000      	b.n	80021e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021e0:	2302      	movs	r3, #2
  }
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	ffffefff 	.word	0xffffefff

080021f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2241      	movs	r2, #65	; 0x41
 80021fe:	5c9b      	ldrb	r3, [r3, r2]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b20      	cmp	r3, #32
 8002204:	d139      	bne.n	800227a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2240      	movs	r2, #64	; 0x40
 800220a:	5c9b      	ldrb	r3, [r3, r2]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002210:	2302      	movs	r3, #2
 8002212:	e033      	b.n	800227c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	2101      	movs	r1, #1
 800221a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2241      	movs	r2, #65	; 0x41
 8002220:	2124      	movs	r1, #36	; 0x24
 8002222:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	438a      	bics	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a11      	ldr	r2, [pc, #68]	; (8002284 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002240:	4013      	ands	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2101      	movs	r1, #1
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2241      	movs	r2, #65	; 0x41
 800226a:	2120      	movs	r1, #32
 800226c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2240      	movs	r2, #64	; 0x40
 8002272:	2100      	movs	r1, #0
 8002274:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800227a:	2302      	movs	r3, #2
  }
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b004      	add	sp, #16
 8002282:	bd80      	pop	{r7, pc}
 8002284:	fffff0ff 	.word	0xfffff0ff

08002288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e301      	b.n	800289e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2201      	movs	r2, #1
 80022a0:	4013      	ands	r3, r2
 80022a2:	d100      	bne.n	80022a6 <HAL_RCC_OscConfig+0x1e>
 80022a4:	e08d      	b.n	80023c2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022a6:	4bc3      	ldr	r3, [pc, #780]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	220c      	movs	r2, #12
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d00e      	beq.n	80022d0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b2:	4bc0      	ldr	r3, [pc, #768]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	220c      	movs	r2, #12
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x64>
 80022be:	4bbd      	ldr	r3, [pc, #756]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	401a      	ands	r2, r3
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	025b      	lsls	r3, r3, #9
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d10d      	bne.n	80022ec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	4bb8      	ldr	r3, [pc, #736]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	029b      	lsls	r3, r3, #10
 80022d8:	4013      	ands	r3, r2
 80022da:	d100      	bne.n	80022de <HAL_RCC_OscConfig+0x56>
 80022dc:	e070      	b.n	80023c0 <HAL_RCC_OscConfig+0x138>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d000      	beq.n	80022e8 <HAL_RCC_OscConfig+0x60>
 80022e6:	e06b      	b.n	80023c0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e2d8      	b.n	800289e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_OscConfig+0x7c>
 80022f4:	4baf      	ldr	r3, [pc, #700]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4bae      	ldr	r3, [pc, #696]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80022fa:	2180      	movs	r1, #128	; 0x80
 80022fc:	0249      	lsls	r1, r1, #9
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	e02f      	b.n	8002364 <HAL_RCC_OscConfig+0xdc>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10c      	bne.n	8002326 <HAL_RCC_OscConfig+0x9e>
 800230c:	4ba9      	ldr	r3, [pc, #676]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4ba8      	ldr	r3, [pc, #672]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002312:	49a9      	ldr	r1, [pc, #676]	; (80025b8 <HAL_RCC_OscConfig+0x330>)
 8002314:	400a      	ands	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	4ba6      	ldr	r3, [pc, #664]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4ba5      	ldr	r3, [pc, #660]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800231e:	49a7      	ldr	r1, [pc, #668]	; (80025bc <HAL_RCC_OscConfig+0x334>)
 8002320:	400a      	ands	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e01e      	b.n	8002364 <HAL_RCC_OscConfig+0xdc>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d10e      	bne.n	800234c <HAL_RCC_OscConfig+0xc4>
 800232e:	4ba1      	ldr	r3, [pc, #644]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4ba0      	ldr	r3, [pc, #640]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	02c9      	lsls	r1, r1, #11
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	4b9d      	ldr	r3, [pc, #628]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b9c      	ldr	r3, [pc, #624]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	0249      	lsls	r1, r1, #9
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e00b      	b.n	8002364 <HAL_RCC_OscConfig+0xdc>
 800234c:	4b99      	ldr	r3, [pc, #612]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b98      	ldr	r3, [pc, #608]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002352:	4999      	ldr	r1, [pc, #612]	; (80025b8 <HAL_RCC_OscConfig+0x330>)
 8002354:	400a      	ands	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	4b96      	ldr	r3, [pc, #600]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b95      	ldr	r3, [pc, #596]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800235e:	4997      	ldr	r1, [pc, #604]	; (80025bc <HAL_RCC_OscConfig+0x334>)
 8002360:	400a      	ands	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d014      	beq.n	8002396 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe ff64 	bl	8001238 <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002376:	f7fe ff5f 	bl	8001238 <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b64      	cmp	r3, #100	; 0x64
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e28a      	b.n	800289e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002388:	4b8a      	ldr	r3, [pc, #552]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	029b      	lsls	r3, r3, #10
 8002390:	4013      	ands	r3, r2
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0xee>
 8002394:	e015      	b.n	80023c2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe ff4f 	bl	8001238 <HAL_GetTick>
 800239a:	0003      	movs	r3, r0
 800239c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a0:	f7fe ff4a 	bl	8001238 <HAL_GetTick>
 80023a4:	0002      	movs	r2, r0
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e275      	b.n	800289e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	4b80      	ldr	r3, [pc, #512]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	029b      	lsls	r3, r3, #10
 80023ba:	4013      	ands	r3, r2
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x118>
 80023be:	e000      	b.n	80023c2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	d100      	bne.n	80023ce <HAL_RCC_OscConfig+0x146>
 80023cc:	e069      	b.n	80024a2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023ce:	4b79      	ldr	r3, [pc, #484]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	220c      	movs	r2, #12
 80023d4:	4013      	ands	r3, r2
 80023d6:	d00b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023d8:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	220c      	movs	r2, #12
 80023de:	4013      	ands	r3, r2
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d11c      	bne.n	800241e <HAL_RCC_OscConfig+0x196>
 80023e4:	4b73      	ldr	r3, [pc, #460]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	025b      	lsls	r3, r3, #9
 80023ec:	4013      	ands	r3, r2
 80023ee:	d116      	bne.n	800241e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f0:	4b70      	ldr	r3, [pc, #448]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d005      	beq.n	8002406 <HAL_RCC_OscConfig+0x17e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d001      	beq.n	8002406 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e24b      	b.n	800289e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002406:	4b6b      	ldr	r3, [pc, #428]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	22f8      	movs	r2, #248	; 0xf8
 800240c:	4393      	bics	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	00da      	lsls	r2, r3, #3
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241c:	e041      	b.n	80024a2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d024      	beq.n	8002470 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002426:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b62      	ldr	r3, [pc, #392]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800242c:	2101      	movs	r1, #1
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe ff01 	bl	8001238 <HAL_GetTick>
 8002436:	0003      	movs	r3, r0
 8002438:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243c:	f7fe fefc 	bl	8001238 <HAL_GetTick>
 8002440:	0002      	movs	r2, r0
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e227      	b.n	800289e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244e:	4b59      	ldr	r3, [pc, #356]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2202      	movs	r2, #2
 8002454:	4013      	ands	r3, r2
 8002456:	d0f1      	beq.n	800243c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002458:	4b56      	ldr	r3, [pc, #344]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	22f8      	movs	r2, #248	; 0xf8
 800245e:	4393      	bics	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00da      	lsls	r2, r3, #3
 8002468:	4b52      	ldr	r3, [pc, #328]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e018      	b.n	80024a2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002470:	4b50      	ldr	r3, [pc, #320]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b4f      	ldr	r3, [pc, #316]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002476:	2101      	movs	r1, #1
 8002478:	438a      	bics	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fedc 	bl	8001238 <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002486:	f7fe fed7 	bl	8001238 <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e202      	b.n	800289e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002498:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2202      	movs	r2, #2
 800249e:	4013      	ands	r3, r2
 80024a0:	d1f1      	bne.n	8002486 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2208      	movs	r2, #8
 80024a8:	4013      	ands	r3, r2
 80024aa:	d036      	beq.n	800251a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d019      	beq.n	80024e8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b4:	4b3f      	ldr	r3, [pc, #252]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80024b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b8:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	430a      	orrs	r2, r1
 80024be:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c0:	f7fe feba 	bl	8001238 <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ca:	f7fe feb5 	bl	8001238 <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e1e0      	b.n	800289e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024dc:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	2202      	movs	r2, #2
 80024e2:	4013      	ands	r3, r2
 80024e4:	d0f1      	beq.n	80024ca <HAL_RCC_OscConfig+0x242>
 80024e6:	e018      	b.n	800251a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80024ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ec:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	438a      	bics	r2, r1
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fea0 	bl	8001238 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024fe:	f7fe fe9b 	bl	8001238 <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e1c6      	b.n	800289e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	2202      	movs	r2, #2
 8002516:	4013      	ands	r3, r2
 8002518:	d1f1      	bne.n	80024fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2204      	movs	r2, #4
 8002520:	4013      	ands	r3, r2
 8002522:	d100      	bne.n	8002526 <HAL_RCC_OscConfig+0x29e>
 8002524:	e0b4      	b.n	8002690 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002526:	201f      	movs	r0, #31
 8002528:	183b      	adds	r3, r7, r0
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252e:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	055b      	lsls	r3, r3, #21
 8002536:	4013      	ands	r3, r2
 8002538:	d110      	bne.n	800255c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800253c:	69da      	ldr	r2, [r3, #28]
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 8002540:	2180      	movs	r1, #128	; 0x80
 8002542:	0549      	lsls	r1, r1, #21
 8002544:	430a      	orrs	r2, r1
 8002546:	61da      	str	r2, [r3, #28]
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	055b      	lsls	r3, r3, #21
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002556:	183b      	adds	r3, r7, r0
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <HAL_RCC_OscConfig+0x338>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4013      	ands	r3, r2
 8002566:	d11a      	bne.n	800259e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_RCC_OscConfig+0x338>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_RCC_OscConfig+0x338>)
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	0049      	lsls	r1, r1, #1
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7fe fe5f 	bl	8001238 <HAL_GetTick>
 800257a:	0003      	movs	r3, r0
 800257c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002580:	f7fe fe5a 	bl	8001238 <HAL_GetTick>
 8002584:	0002      	movs	r2, r0
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e185      	b.n	800289e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x338>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4013      	ands	r3, r2
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10e      	bne.n	80025c4 <HAL_RCC_OscConfig+0x33c>
 80025a6:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80025a8:	6a1a      	ldr	r2, [r3, #32]
 80025aa:	4b02      	ldr	r3, [pc, #8]	; (80025b4 <HAL_RCC_OscConfig+0x32c>)
 80025ac:	2101      	movs	r1, #1
 80025ae:	430a      	orrs	r2, r1
 80025b0:	621a      	str	r2, [r3, #32]
 80025b2:	e035      	b.n	8002620 <HAL_RCC_OscConfig+0x398>
 80025b4:	40021000 	.word	0x40021000
 80025b8:	fffeffff 	.word	0xfffeffff
 80025bc:	fffbffff 	.word	0xfffbffff
 80025c0:	40007000 	.word	0x40007000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10c      	bne.n	80025e6 <HAL_RCC_OscConfig+0x35e>
 80025cc:	4bb6      	ldr	r3, [pc, #728]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80025ce:	6a1a      	ldr	r2, [r3, #32]
 80025d0:	4bb5      	ldr	r3, [pc, #724]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	438a      	bics	r2, r1
 80025d6:	621a      	str	r2, [r3, #32]
 80025d8:	4bb3      	ldr	r3, [pc, #716]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80025da:	6a1a      	ldr	r2, [r3, #32]
 80025dc:	4bb2      	ldr	r3, [pc, #712]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80025de:	2104      	movs	r1, #4
 80025e0:	438a      	bics	r2, r1
 80025e2:	621a      	str	r2, [r3, #32]
 80025e4:	e01c      	b.n	8002620 <HAL_RCC_OscConfig+0x398>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x380>
 80025ee:	4bae      	ldr	r3, [pc, #696]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80025f0:	6a1a      	ldr	r2, [r3, #32]
 80025f2:	4bad      	ldr	r3, [pc, #692]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80025f4:	2104      	movs	r1, #4
 80025f6:	430a      	orrs	r2, r1
 80025f8:	621a      	str	r2, [r3, #32]
 80025fa:	4bab      	ldr	r3, [pc, #684]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80025fc:	6a1a      	ldr	r2, [r3, #32]
 80025fe:	4baa      	ldr	r3, [pc, #680]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002600:	2101      	movs	r1, #1
 8002602:	430a      	orrs	r2, r1
 8002604:	621a      	str	r2, [r3, #32]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0x398>
 8002608:	4ba7      	ldr	r3, [pc, #668]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 800260a:	6a1a      	ldr	r2, [r3, #32]
 800260c:	4ba6      	ldr	r3, [pc, #664]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 800260e:	2101      	movs	r1, #1
 8002610:	438a      	bics	r2, r1
 8002612:	621a      	str	r2, [r3, #32]
 8002614:	4ba4      	ldr	r3, [pc, #656]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002616:	6a1a      	ldr	r2, [r3, #32]
 8002618:	4ba3      	ldr	r3, [pc, #652]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 800261a:	2104      	movs	r1, #4
 800261c:	438a      	bics	r2, r1
 800261e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d014      	beq.n	8002652 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002628:	f7fe fe06 	bl	8001238 <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	e009      	b.n	8002646 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7fe fe01 	bl	8001238 <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	4a9b      	ldr	r2, [pc, #620]	; (80028ac <HAL_RCC_OscConfig+0x624>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e12b      	b.n	800289e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002646:	4b98      	ldr	r3, [pc, #608]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	2202      	movs	r2, #2
 800264c:	4013      	ands	r3, r2
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x3aa>
 8002650:	e013      	b.n	800267a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002652:	f7fe fdf1 	bl	8001238 <HAL_GetTick>
 8002656:	0003      	movs	r3, r0
 8002658:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265a:	e009      	b.n	8002670 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7fe fdec 	bl	8001238 <HAL_GetTick>
 8002660:	0002      	movs	r2, r0
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	4a91      	ldr	r2, [pc, #580]	; (80028ac <HAL_RCC_OscConfig+0x624>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e116      	b.n	800289e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002670:	4b8d      	ldr	r3, [pc, #564]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	2202      	movs	r2, #2
 8002676:	4013      	ands	r3, r2
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800267a:	231f      	movs	r3, #31
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d105      	bne.n	8002690 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002684:	4b88      	ldr	r3, [pc, #544]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	4b87      	ldr	r3, [pc, #540]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 800268a:	4989      	ldr	r1, [pc, #548]	; (80028b0 <HAL_RCC_OscConfig+0x628>)
 800268c:	400a      	ands	r2, r1
 800268e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2210      	movs	r2, #16
 8002696:	4013      	ands	r3, r2
 8002698:	d063      	beq.n	8002762 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d12a      	bne.n	80026f8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026a2:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80026a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a6:	4b80      	ldr	r3, [pc, #512]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80026a8:	2104      	movs	r1, #4
 80026aa:	430a      	orrs	r2, r1
 80026ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80026ae:	4b7e      	ldr	r3, [pc, #504]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80026b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b2:	4b7d      	ldr	r3, [pc, #500]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80026b4:	2101      	movs	r1, #1
 80026b6:	430a      	orrs	r2, r1
 80026b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7fe fdbd 	bl	8001238 <HAL_GetTick>
 80026be:	0003      	movs	r3, r0
 80026c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026c4:	f7fe fdb8 	bl	8001238 <HAL_GetTick>
 80026c8:	0002      	movs	r2, r0
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e0e3      	b.n	800289e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026d6:	4b74      	ldr	r3, [pc, #464]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80026d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026da:	2202      	movs	r2, #2
 80026dc:	4013      	ands	r3, r2
 80026de:	d0f1      	beq.n	80026c4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80026e0:	4b71      	ldr	r3, [pc, #452]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80026e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e4:	22f8      	movs	r2, #248	; 0xf8
 80026e6:	4393      	bics	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	00da      	lsls	r2, r3, #3
 80026f0:	4b6d      	ldr	r3, [pc, #436]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80026f2:	430a      	orrs	r2, r1
 80026f4:	635a      	str	r2, [r3, #52]	; 0x34
 80026f6:	e034      	b.n	8002762 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	3305      	adds	r3, #5
 80026fe:	d111      	bne.n	8002724 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002700:	4b69      	ldr	r3, [pc, #420]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002704:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002706:	2104      	movs	r1, #4
 8002708:	438a      	bics	r2, r1
 800270a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800270c:	4b66      	ldr	r3, [pc, #408]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 800270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002710:	22f8      	movs	r2, #248	; 0xf8
 8002712:	4393      	bics	r3, r2
 8002714:	0019      	movs	r1, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	00da      	lsls	r2, r3, #3
 800271c:	4b62      	ldr	r3, [pc, #392]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 800271e:	430a      	orrs	r2, r1
 8002720:	635a      	str	r2, [r3, #52]	; 0x34
 8002722:	e01e      	b.n	8002762 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002724:	4b60      	ldr	r3, [pc, #384]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002728:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 800272a:	2104      	movs	r1, #4
 800272c:	430a      	orrs	r2, r1
 800272e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002730:	4b5d      	ldr	r3, [pc, #372]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002734:	4b5c      	ldr	r3, [pc, #368]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002736:	2101      	movs	r1, #1
 8002738:	438a      	bics	r2, r1
 800273a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7fe fd7c 	bl	8001238 <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002746:	f7fe fd77 	bl	8001238 <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0a2      	b.n	800289e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002758:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	2202      	movs	r2, #2
 800275e:	4013      	ands	r3, r2
 8002760:	d1f1      	bne.n	8002746 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d100      	bne.n	800276c <HAL_RCC_OscConfig+0x4e4>
 800276a:	e097      	b.n	800289c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800276c:	4b4e      	ldr	r3, [pc, #312]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	220c      	movs	r2, #12
 8002772:	4013      	ands	r3, r2
 8002774:	2b08      	cmp	r3, #8
 8002776:	d100      	bne.n	800277a <HAL_RCC_OscConfig+0x4f2>
 8002778:	e06b      	b.n	8002852 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d14c      	bne.n	800281c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b49      	ldr	r3, [pc, #292]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002788:	494a      	ldr	r1, [pc, #296]	; (80028b4 <HAL_RCC_OscConfig+0x62c>)
 800278a:	400a      	ands	r2, r1
 800278c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7fe fd53 	bl	8001238 <HAL_GetTick>
 8002792:	0003      	movs	r3, r0
 8002794:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002798:	f7fe fd4e 	bl	8001238 <HAL_GetTick>
 800279c:	0002      	movs	r2, r0
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e079      	b.n	800289e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027aa:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	049b      	lsls	r3, r3, #18
 80027b2:	4013      	ands	r3, r2
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b6:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	220f      	movs	r2, #15
 80027bc:	4393      	bics	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c4:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80027c6:	430a      	orrs	r2, r1
 80027c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80027ca:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4a3a      	ldr	r2, [pc, #232]	; (80028b8 <HAL_RCC_OscConfig+0x630>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	431a      	orrs	r2, r3
 80027de:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	0449      	lsls	r1, r1, #17
 80027ee:	430a      	orrs	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe fd21 	bl	8001238 <HAL_GetTick>
 80027f6:	0003      	movs	r3, r0
 80027f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe fd1c 	bl	8001238 <HAL_GetTick>
 8002800:	0002      	movs	r2, r0
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e047      	b.n	800289e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	049b      	lsls	r3, r3, #18
 8002816:	4013      	ands	r3, r2
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x574>
 800281a:	e03f      	b.n	800289c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002822:	4924      	ldr	r1, [pc, #144]	; (80028b4 <HAL_RCC_OscConfig+0x62c>)
 8002824:	400a      	ands	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe fd06 	bl	8001238 <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002832:	f7fe fd01 	bl	8001238 <HAL_GetTick>
 8002836:	0002      	movs	r2, r0
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e02c      	b.n	800289e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002844:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	049b      	lsls	r3, r3, #18
 800284c:	4013      	ands	r3, r2
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x5aa>
 8002850:	e024      	b.n	800289c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e01f      	b.n	800289e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002864:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_RCC_OscConfig+0x620>)
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	025b      	lsls	r3, r3, #9
 8002870:	401a      	ands	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	429a      	cmp	r2, r3
 8002878:	d10e      	bne.n	8002898 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	220f      	movs	r2, #15
 800287e:	401a      	ands	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	23f0      	movs	r3, #240	; 0xf0
 800288c:	039b      	lsls	r3, r3, #14
 800288e:	401a      	ands	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b008      	add	sp, #32
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	40021000 	.word	0x40021000
 80028ac:	00001388 	.word	0x00001388
 80028b0:	efffffff 	.word	0xefffffff
 80028b4:	feffffff 	.word	0xfeffffff
 80028b8:	ffc2ffff 	.word	0xffc2ffff

080028bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0b3      	b.n	8002a38 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <HAL_RCC_ClockConfig+0x184>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2201      	movs	r2, #1
 80028d6:	4013      	ands	r3, r2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d911      	bls.n	8002902 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <HAL_RCC_ClockConfig+0x184>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2201      	movs	r2, #1
 80028e4:	4393      	bics	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <HAL_RCC_ClockConfig+0x184>)
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f0:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <HAL_RCC_ClockConfig+0x184>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2201      	movs	r2, #1
 80028f6:	4013      	ands	r3, r2
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d001      	beq.n	8002902 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e09a      	b.n	8002a38 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2202      	movs	r2, #2
 8002908:	4013      	ands	r3, r2
 800290a:	d015      	beq.n	8002938 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2204      	movs	r2, #4
 8002912:	4013      	ands	r3, r2
 8002914:	d006      	beq.n	8002924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002916:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4b4a      	ldr	r3, [pc, #296]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 800291c:	21e0      	movs	r1, #224	; 0xe0
 800291e:	00c9      	lsls	r1, r1, #3
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	22f0      	movs	r2, #240	; 0xf0
 800292a:	4393      	bics	r3, r2
 800292c:	0019      	movs	r1, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2201      	movs	r2, #1
 800293e:	4013      	ands	r3, r2
 8002940:	d040      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	029b      	lsls	r3, r3, #10
 8002952:	4013      	ands	r3, r2
 8002954:	d114      	bne.n	8002980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e06e      	b.n	8002a38 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	049b      	lsls	r3, r3, #18
 800296a:	4013      	ands	r3, r2
 800296c:	d108      	bne.n	8002980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e062      	b.n	8002a38 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2202      	movs	r2, #2
 8002978:	4013      	ands	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e05b      	b.n	8002a38 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002980:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2203      	movs	r2, #3
 8002986:	4393      	bics	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002994:	f7fe fc50 	bl	8001238 <HAL_GetTick>
 8002998:	0003      	movs	r3, r0
 800299a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299c:	e009      	b.n	80029b2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299e:	f7fe fc4b 	bl	8001238 <HAL_GetTick>
 80029a2:	0002      	movs	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <HAL_RCC_ClockConfig+0x18c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e042      	b.n	8002a38 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	220c      	movs	r2, #12
 80029b8:	401a      	ands	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d1ec      	bne.n	800299e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c4:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCC_ClockConfig+0x184>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2201      	movs	r2, #1
 80029ca:	4013      	ands	r3, r2
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d211      	bcs.n	80029f6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCC_ClockConfig+0x184>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4393      	bics	r3, r2
 80029da:	0019      	movs	r1, r3
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <HAL_RCC_ClockConfig+0x184>)
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e4:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <HAL_RCC_ClockConfig+0x184>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	4013      	ands	r3, r2
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d001      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e020      	b.n	8002a38 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2204      	movs	r2, #4
 80029fc:	4013      	ands	r3, r2
 80029fe:	d009      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <HAL_RCC_ClockConfig+0x190>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	0019      	movs	r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 8002a10:	430a      	orrs	r2, r1
 8002a12:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a14:	f000 f820 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a18:	0001      	movs	r1, r0
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_RCC_ClockConfig+0x188>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	220f      	movs	r2, #15
 8002a22:	4013      	ands	r3, r2
 8002a24:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <HAL_RCC_ClockConfig+0x194>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	000a      	movs	r2, r1
 8002a2a:	40da      	lsrs	r2, r3
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_ClockConfig+0x198>)
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a30:	2003      	movs	r0, #3
 8002a32:	f7fe fa93 	bl	8000f5c <HAL_InitTick>
  
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b004      	add	sp, #16
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40022000 	.word	0x40022000
 8002a44:	40021000 	.word	0x40021000
 8002a48:	00001388 	.word	0x00001388
 8002a4c:	fffff8ff 	.word	0xfffff8ff
 8002a50:	08006864 	.word	0x08006864
 8002a54:	20000010 	.word	0x20000010

08002a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b08f      	sub	sp, #60	; 0x3c
 8002a5c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002a5e:	2314      	movs	r3, #20
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a66:	c313      	stmia	r3!, {r0, r1, r4}
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a72:	c313      	stmia	r3!, {r0, r1, r4}
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a80:	2300      	movs	r3, #0
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	220c      	movs	r2, #12
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d002      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x4a>
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d003      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x50>
 8002aa0:	e02d      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002aa6:	e02d      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	0c9b      	lsrs	r3, r3, #18
 8002aac:	220f      	movs	r2, #15
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2214      	movs	r2, #20
 8002ab2:	18ba      	adds	r2, r7, r2
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	220f      	movs	r2, #15
 8002abe:	4013      	ands	r3, r2
 8002ac0:	1d3a      	adds	r2, r7, #4
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	025b      	lsls	r3, r3, #9
 8002acc:	4013      	ands	r3, r2
 8002ace:	d009      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ad2:	4812      	ldr	r0, [pc, #72]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ad4:	f7fd fb22 	bl	800011c <__udivsi3>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	001a      	movs	r2, r3
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	4353      	muls	r3, r2
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae2:	e009      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae6:	000a      	movs	r2, r1
 8002ae8:	0152      	lsls	r2, r2, #5
 8002aea:	1a52      	subs	r2, r2, r1
 8002aec:	0193      	lsls	r3, r2, #6
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	185b      	adds	r3, r3, r1
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002afc:	e002      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b02:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b00f      	add	sp, #60	; 0x3c
 8002b0c:	bd90      	pop	{r4, r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	0800679c 	.word	0x0800679c
 8002b14:	080067ac 	.word	0x080067ac
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	007a1200 	.word	0x007a1200

08002b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b24:	4b02      	ldr	r3, [pc, #8]	; (8002b30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	0018      	movs	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	20000010 	.word	0x20000010

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002b38:	f7ff fff2 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b3c:	0001      	movs	r1, r0
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	2207      	movs	r2, #7
 8002b46:	4013      	ands	r3, r2
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b4a:	5cd3      	ldrb	r3, [r2, r3]
 8002b4c:	40d9      	lsrs	r1, r3
 8002b4e:	000b      	movs	r3, r1
}    
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	08006874 	.word	0x08006874

08002b60 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <HAL_RCC_GetClockConfig+0x4c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2203      	movs	r2, #3
 8002b76:	401a      	ands	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_GetClockConfig+0x4c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	22f0      	movs	r2, #240	; 0xf0
 8002b82:	401a      	ands	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_RCC_GetClockConfig+0x4c>)
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	23e0      	movs	r3, #224	; 0xe0
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	401a      	ands	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_GetClockConfig+0x50>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	601a      	str	r2, [r3, #0]
}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b002      	add	sp, #8
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40022000 	.word	0x40022000

08002bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	025b      	lsls	r3, r3, #9
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d100      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002bd0:	e08e      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002bd2:	2017      	movs	r0, #23
 8002bd4:	183b      	adds	r3, r7, r0
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bda:	4b57      	ldr	r3, [pc, #348]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	055b      	lsls	r3, r3, #21
 8002be2:	4013      	ands	r3, r2
 8002be4:	d110      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	4b54      	ldr	r3, [pc, #336]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	0549      	lsls	r1, r1, #21
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	61da      	str	r2, [r3, #28]
 8002bf4:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	055b      	lsls	r3, r3, #21
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c02:	183b      	adds	r3, r7, r0
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4013      	ands	r3, r2
 8002c12:	d11a      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c14:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b48      	ldr	r3, [pc, #288]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c1a:	2180      	movs	r1, #128	; 0x80
 8002c1c:	0049      	lsls	r1, r1, #1
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c22:	f7fe fb09 	bl	8001238 <HAL_GetTick>
 8002c26:	0003      	movs	r3, r0
 8002c28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2a:	e008      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2c:	f7fe fb04 	bl	8001238 <HAL_GetTick>
 8002c30:	0002      	movs	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e077      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4013      	ands	r3, r2
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c4c:	6a1a      	ldr	r2, [r3, #32]
 8002c4e:	23c0      	movs	r3, #192	; 0xc0
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d034      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	23c0      	movs	r3, #192	; 0xc0
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4013      	ands	r3, r2
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d02c      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c6c:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a33      	ldr	r2, [pc, #204]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c76:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c78:	6a1a      	ldr	r2, [r3, #32]
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	0249      	lsls	r1, r1, #9
 8002c80:	430a      	orrs	r2, r1
 8002c82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c84:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c86:	6a1a      	ldr	r2, [r3, #32]
 8002c88:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c8a:	492e      	ldr	r1, [pc, #184]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c90:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe facb 	bl	8001238 <HAL_GetTick>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	e009      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fac6 	bl	8001238 <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e038      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	0019      	movs	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cda:	2317      	movs	r3, #23
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce4:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cea:	4918      	ldr	r1, [pc, #96]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002cec:	400a      	ands	r2, r1
 8002cee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d009      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	2203      	movs	r2, #3
 8002d00:	4393      	bics	r3, r2
 8002d02:	0019      	movs	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2220      	movs	r2, #32
 8002d14:	4013      	ands	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d18:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	4393      	bics	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	0018      	movs	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b006      	add	sp, #24
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	fffffcff 	.word	0xfffffcff
 8002d44:	fffeffff 	.word	0xfffeffff
 8002d48:	00001388 	.word	0x00001388
 8002d4c:	efffffff 	.word	0xefffffff

08002d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e042      	b.n	8002de8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	223d      	movs	r2, #61	; 0x3d
 8002d66:	5c9b      	ldrb	r3, [r3, r2]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d107      	bne.n	8002d7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	223c      	movs	r2, #60	; 0x3c
 8002d72:	2100      	movs	r1, #0
 8002d74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 f839 	bl	8002df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	223d      	movs	r2, #61	; 0x3d
 8002d82:	2102      	movs	r1, #2
 8002d84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	0019      	movs	r1, r3
 8002d90:	0010      	movs	r0, r2
 8002d92:	f000 f9b7 	bl	8003104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2246      	movs	r2, #70	; 0x46
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	223e      	movs	r2, #62	; 0x3e
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	223f      	movs	r2, #63	; 0x3f
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2240      	movs	r2, #64	; 0x40
 8002db2:	2101      	movs	r1, #1
 8002db4:	5499      	strb	r1, [r3, r2]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2241      	movs	r2, #65	; 0x41
 8002dba:	2101      	movs	r1, #1
 8002dbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2242      	movs	r2, #66	; 0x42
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	5499      	strb	r1, [r3, r2]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2243      	movs	r2, #67	; 0x43
 8002dca:	2101      	movs	r1, #1
 8002dcc:	5499      	strb	r1, [r3, r2]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2244      	movs	r2, #68	; 0x44
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2245      	movs	r2, #69	; 0x45
 8002dda:	2101      	movs	r1, #1
 8002ddc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	223d      	movs	r2, #61	; 0x3d
 8002de2:	2101      	movs	r1, #1
 8002de4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	223d      	movs	r2, #61	; 0x3d
 8002e0c:	5c9b      	ldrb	r3, [r3, r2]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d001      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e035      	b.n	8002e84 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	223d      	movs	r2, #61	; 0x3d
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <HAL_TIM_Base_Start_IT+0x8c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_TIM_Base_Start_IT+0x4e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_TIM_Base_Start_IT+0x90>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_TIM_Base_Start_IT+0x4e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <HAL_TIM_Base_Start_IT+0x94>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d111      	bne.n	8002e72 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2207      	movs	r2, #7
 8002e56:	4013      	ands	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b06      	cmp	r3, #6
 8002e5e:	d010      	beq.n	8002e82 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e70:	e007      	b.n	8002e82 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b004      	add	sp, #16
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40012c00 	.word	0x40012c00
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40014000 	.word	0x40014000

08002e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d124      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d11d      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	4252      	negs	r2, r2
 8002ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 f8fa 	bl	80030d4 <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e007      	b.n	8002ef2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f000 f8ed 	bl	80030c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 f8f9 	bl	80030e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2204      	movs	r2, #4
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d125      	bne.n	8002f52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d11e      	bne.n	8002f52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2205      	movs	r2, #5
 8002f1a:	4252      	negs	r2, r2
 8002f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2202      	movs	r2, #2
 8002f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	23c0      	movs	r3, #192	; 0xc0
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d004      	beq.n	8002f3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 f8cd 	bl	80030d4 <HAL_TIM_IC_CaptureCallback>
 8002f3a:	e007      	b.n	8002f4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 f8c0 	bl	80030c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 f8cc 	bl	80030e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d124      	bne.n	8002faa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2208      	movs	r2, #8
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d11d      	bne.n	8002faa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2209      	movs	r2, #9
 8002f74:	4252      	negs	r2, r2
 8002f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2203      	movs	r2, #3
 8002f86:	4013      	ands	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 f8a1 	bl	80030d4 <HAL_TIM_IC_CaptureCallback>
 8002f92:	e007      	b.n	8002fa4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f000 f894 	bl	80030c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f000 f8a0 	bl	80030e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d125      	bne.n	8003004 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d11e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2211      	movs	r2, #17
 8002fcc:	4252      	negs	r2, r2
 8002fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	23c0      	movs	r3, #192	; 0xc0
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 f874 	bl	80030d4 <HAL_TIM_IC_CaptureCallback>
 8002fec:	e007      	b.n	8002ffe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 f867 	bl	80030c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 f873 	bl	80030e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2201      	movs	r2, #1
 800300c:	4013      	ands	r3, r2
 800300e:	2b01      	cmp	r3, #1
 8003010:	d10f      	bne.n	8003032 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	4013      	ands	r3, r2
 800301c:	2b01      	cmp	r3, #1
 800301e:	d108      	bne.n	8003032 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2202      	movs	r2, #2
 8003026:	4252      	negs	r2, r2
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f7fd fe23 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	4013      	ands	r3, r2
 800303c:	2b80      	cmp	r3, #128	; 0x80
 800303e:	d10f      	bne.n	8003060 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2280      	movs	r2, #128	; 0x80
 8003048:	4013      	ands	r3, r2
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d108      	bne.n	8003060 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2281      	movs	r2, #129	; 0x81
 8003054:	4252      	negs	r2, r2
 8003056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	0018      	movs	r0, r3
 800305c:	f000 f8d0 	bl	8003200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2240      	movs	r2, #64	; 0x40
 8003068:	4013      	ands	r3, r2
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	d10f      	bne.n	800308e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2240      	movs	r2, #64	; 0x40
 8003076:	4013      	ands	r3, r2
 8003078:	2b40      	cmp	r3, #64	; 0x40
 800307a:	d108      	bne.n	800308e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2241      	movs	r2, #65	; 0x41
 8003082:	4252      	negs	r2, r2
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0018      	movs	r0, r3
 800308a:	f000 f833 	bl	80030f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2220      	movs	r2, #32
 8003096:	4013      	ands	r3, r2
 8003098:	2b20      	cmp	r3, #32
 800309a:	d10f      	bne.n	80030bc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d108      	bne.n	80030bc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2221      	movs	r2, #33	; 0x21
 80030b0:	4252      	negs	r2, r2
 80030b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 f89a 	bl	80031f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a2f      	ldr	r2, [pc, #188]	; (80031d4 <TIM_Base_SetConfig+0xd0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_Base_SetConfig+0x20>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a2e      	ldr	r2, [pc, #184]	; (80031d8 <TIM_Base_SetConfig+0xd4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d108      	bne.n	8003136 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2270      	movs	r2, #112	; 0x70
 8003128:	4393      	bics	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <TIM_Base_SetConfig+0xd0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <TIM_Base_SetConfig+0x62>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a25      	ldr	r2, [pc, #148]	; (80031d8 <TIM_Base_SetConfig+0xd4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00f      	beq.n	8003166 <TIM_Base_SetConfig+0x62>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a24      	ldr	r2, [pc, #144]	; (80031dc <TIM_Base_SetConfig+0xd8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00b      	beq.n	8003166 <TIM_Base_SetConfig+0x62>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a23      	ldr	r2, [pc, #140]	; (80031e0 <TIM_Base_SetConfig+0xdc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <TIM_Base_SetConfig+0x62>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <TIM_Base_SetConfig+0xe0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <TIM_Base_SetConfig+0x62>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a21      	ldr	r2, [pc, #132]	; (80031e8 <TIM_Base_SetConfig+0xe4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d108      	bne.n	8003178 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a20      	ldr	r2, [pc, #128]	; (80031ec <TIM_Base_SetConfig+0xe8>)
 800316a:	4013      	ands	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2280      	movs	r2, #128	; 0x80
 800317c:	4393      	bics	r3, r2
 800317e:	001a      	movs	r2, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a0c      	ldr	r2, [pc, #48]	; (80031d4 <TIM_Base_SetConfig+0xd0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00b      	beq.n	80031be <TIM_Base_SetConfig+0xba>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <TIM_Base_SetConfig+0xdc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <TIM_Base_SetConfig+0xba>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <TIM_Base_SetConfig+0xe0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d003      	beq.n	80031be <TIM_Base_SetConfig+0xba>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <TIM_Base_SetConfig+0xe4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d103      	bne.n	80031c6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	615a      	str	r2, [r3, #20]
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b004      	add	sp, #16
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40012c00 	.word	0x40012c00
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40002000 	.word	0x40002000
 80031e0:	40014000 	.word	0x40014000
 80031e4:	40014400 	.word	0x40014400
 80031e8:	40014800 	.word	0x40014800
 80031ec:	fffffcff 	.word	0xfffffcff

080031f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e044      	b.n	80032ac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003226:	2b00      	cmp	r3, #0
 8003228:	d107      	bne.n	800323a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2274      	movs	r2, #116	; 0x74
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0018      	movs	r0, r3
 8003236:	f7fd fe45 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2224      	movs	r2, #36	; 0x24
 800323e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2101      	movs	r1, #1
 800324c:	438a      	bics	r2, r1
 800324e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	0018      	movs	r0, r3
 8003254:	f000 f8da 	bl	800340c <UART_SetConfig>
 8003258:	0003      	movs	r3, r0
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e024      	b.n	80032ac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0018      	movs	r0, r3
 800326e:	f000 fa0d 	bl	800368c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	490d      	ldr	r1, [pc, #52]	; (80032b4 <HAL_UART_Init+0xa4>)
 800327e:	400a      	ands	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2108      	movs	r1, #8
 800328e:	438a      	bics	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2101      	movs	r1, #1
 800329e:	430a      	orrs	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f000 faa5 	bl	80037f4 <UART_CheckIdleState>
 80032aa:	0003      	movs	r3, r0
}
 80032ac:	0018      	movs	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	fffff7ff 	.word	0xfffff7ff

080032b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	1dbb      	adds	r3, r7, #6
 80032c6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d000      	beq.n	80032d2 <HAL_UART_Transmit+0x1a>
 80032d0:	e096      	b.n	8003400 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_UART_Transmit+0x28>
 80032d8:	1dbb      	adds	r3, r7, #6
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e08e      	b.n	8003402 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	015b      	lsls	r3, r3, #5
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d109      	bne.n	8003304 <HAL_UART_Transmit+0x4c>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2201      	movs	r2, #1
 80032fc:	4013      	ands	r3, r2
 80032fe:	d001      	beq.n	8003304 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e07e      	b.n	8003402 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2274      	movs	r2, #116	; 0x74
 8003308:	5c9b      	ldrb	r3, [r3, r2]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_UART_Transmit+0x5a>
 800330e:	2302      	movs	r3, #2
 8003310:	e077      	b.n	8003402 <HAL_UART_Transmit+0x14a>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2274      	movs	r2, #116	; 0x74
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	2100      	movs	r1, #0
 8003320:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2221      	movs	r2, #33	; 0x21
 8003326:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003328:	f7fd ff86 	bl	8001238 <HAL_GetTick>
 800332c:	0003      	movs	r3, r0
 800332e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1dba      	adds	r2, r7, #6
 8003334:	2150      	movs	r1, #80	; 0x50
 8003336:	8812      	ldrh	r2, [r2, #0]
 8003338:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1dba      	adds	r2, r7, #6
 800333e:	2152      	movs	r1, #82	; 0x52
 8003340:	8812      	ldrh	r2, [r2, #0]
 8003342:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	015b      	lsls	r3, r3, #5
 800334c:	429a      	cmp	r2, r3
 800334e:	d108      	bne.n	8003362 <HAL_UART_Transmit+0xaa>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003358:	2300      	movs	r3, #0
 800335a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	e003      	b.n	800336a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2274      	movs	r2, #116	; 0x74
 800336e:	2100      	movs	r1, #0
 8003370:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003372:	e02d      	b.n	80033d0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	0013      	movs	r3, r2
 800337e:	2200      	movs	r2, #0
 8003380:	2180      	movs	r1, #128	; 0x80
 8003382:	f000 fa7f 	bl	8003884 <UART_WaitOnFlagUntilTimeout>
 8003386:	1e03      	subs	r3, r0, #0
 8003388:	d001      	beq.n	800338e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e039      	b.n	8003402 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10b      	bne.n	80033ac <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	881a      	ldrh	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	05d2      	lsls	r2, r2, #23
 800339e:	0dd2      	lsrs	r2, r2, #23
 80033a0:	b292      	uxth	r2, r2
 80033a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	3302      	adds	r3, #2
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	e008      	b.n	80033be <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	781a      	ldrb	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	b292      	uxth	r2, r2
 80033b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	3301      	adds	r3, #1
 80033bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2252      	movs	r2, #82	; 0x52
 80033c2:	5a9b      	ldrh	r3, [r3, r2]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b299      	uxth	r1, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2252      	movs	r2, #82	; 0x52
 80033ce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2252      	movs	r2, #82	; 0x52
 80033d4:	5a9b      	ldrh	r3, [r3, r2]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1cb      	bne.n	8003374 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	0013      	movs	r3, r2
 80033e6:	2200      	movs	r2, #0
 80033e8:	2140      	movs	r1, #64	; 0x40
 80033ea:	f000 fa4b 	bl	8003884 <UART_WaitOnFlagUntilTimeout>
 80033ee:	1e03      	subs	r3, r0, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e005      	b.n	8003402 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
  }
}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b008      	add	sp, #32
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003414:	231e      	movs	r3, #30
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a8d      	ldr	r2, [pc, #564]	; (8003670 <UART_SetConfig+0x264>)
 800343c:	4013      	ands	r3, r2
 800343e:	0019      	movs	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	430a      	orrs	r2, r1
 8003448:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a88      	ldr	r2, [pc, #544]	; (8003674 <UART_SetConfig+0x268>)
 8003452:	4013      	ands	r3, r2
 8003454:	0019      	movs	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a7f      	ldr	r2, [pc, #508]	; (8003678 <UART_SetConfig+0x26c>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	430a      	orrs	r2, r1
 8003486:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a7b      	ldr	r2, [pc, #492]	; (800367c <UART_SetConfig+0x270>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d127      	bne.n	80034e2 <UART_SetConfig+0xd6>
 8003492:	4b7b      	ldr	r3, [pc, #492]	; (8003680 <UART_SetConfig+0x274>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	2203      	movs	r2, #3
 8003498:	4013      	ands	r3, r2
 800349a:	2b03      	cmp	r3, #3
 800349c:	d00d      	beq.n	80034ba <UART_SetConfig+0xae>
 800349e:	d81b      	bhi.n	80034d8 <UART_SetConfig+0xcc>
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d014      	beq.n	80034ce <UART_SetConfig+0xc2>
 80034a4:	d818      	bhi.n	80034d8 <UART_SetConfig+0xcc>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <UART_SetConfig+0xa4>
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d00a      	beq.n	80034c4 <UART_SetConfig+0xb8>
 80034ae:	e013      	b.n	80034d8 <UART_SetConfig+0xcc>
 80034b0:	231f      	movs	r3, #31
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e021      	b.n	80034fe <UART_SetConfig+0xf2>
 80034ba:	231f      	movs	r3, #31
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2202      	movs	r2, #2
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e01c      	b.n	80034fe <UART_SetConfig+0xf2>
 80034c4:	231f      	movs	r3, #31
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	2204      	movs	r2, #4
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e017      	b.n	80034fe <UART_SetConfig+0xf2>
 80034ce:	231f      	movs	r3, #31
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	2208      	movs	r2, #8
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e012      	b.n	80034fe <UART_SetConfig+0xf2>
 80034d8:	231f      	movs	r3, #31
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2210      	movs	r2, #16
 80034de:	701a      	strb	r2, [r3, #0]
 80034e0:	e00d      	b.n	80034fe <UART_SetConfig+0xf2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a67      	ldr	r2, [pc, #412]	; (8003684 <UART_SetConfig+0x278>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d104      	bne.n	80034f6 <UART_SetConfig+0xea>
 80034ec:	231f      	movs	r3, #31
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	e003      	b.n	80034fe <UART_SetConfig+0xf2>
 80034f6:	231f      	movs	r3, #31
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	2210      	movs	r2, #16
 80034fc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	429a      	cmp	r2, r3
 8003508:	d15d      	bne.n	80035c6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800350a:	231f      	movs	r3, #31
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b08      	cmp	r3, #8
 8003512:	d015      	beq.n	8003540 <UART_SetConfig+0x134>
 8003514:	dc18      	bgt.n	8003548 <UART_SetConfig+0x13c>
 8003516:	2b04      	cmp	r3, #4
 8003518:	d00d      	beq.n	8003536 <UART_SetConfig+0x12a>
 800351a:	dc15      	bgt.n	8003548 <UART_SetConfig+0x13c>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <UART_SetConfig+0x11a>
 8003520:	2b02      	cmp	r3, #2
 8003522:	d005      	beq.n	8003530 <UART_SetConfig+0x124>
 8003524:	e010      	b.n	8003548 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003526:	f7ff fb05 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 800352a:	0003      	movs	r3, r0
 800352c:	61bb      	str	r3, [r7, #24]
        break;
 800352e:	e012      	b.n	8003556 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b55      	ldr	r3, [pc, #340]	; (8003688 <UART_SetConfig+0x27c>)
 8003532:	61bb      	str	r3, [r7, #24]
        break;
 8003534:	e00f      	b.n	8003556 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7ff fa8f 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 800353a:	0003      	movs	r3, r0
 800353c:	61bb      	str	r3, [r7, #24]
        break;
 800353e:	e00a      	b.n	8003556 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003540:	2380      	movs	r3, #128	; 0x80
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	61bb      	str	r3, [r7, #24]
        break;
 8003546:	e006      	b.n	8003556 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800354c:	231e      	movs	r3, #30
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
        break;
 8003554:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d100      	bne.n	800355e <UART_SetConfig+0x152>
 800355c:	e07b      	b.n	8003656 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	005a      	lsls	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	18d2      	adds	r2, r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	0019      	movs	r1, r3
 8003570:	0010      	movs	r0, r2
 8003572:	f7fc fdd3 	bl	800011c <__udivsi3>
 8003576:	0003      	movs	r3, r0
 8003578:	b29b      	uxth	r3, r3
 800357a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b0f      	cmp	r3, #15
 8003580:	d91c      	bls.n	80035bc <UART_SetConfig+0x1b0>
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	025b      	lsls	r3, r3, #9
 8003588:	429a      	cmp	r2, r3
 800358a:	d217      	bcs.n	80035bc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	b29a      	uxth	r2, r3
 8003590:	200e      	movs	r0, #14
 8003592:	183b      	adds	r3, r7, r0
 8003594:	210f      	movs	r1, #15
 8003596:	438a      	bics	r2, r1
 8003598:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2207      	movs	r2, #7
 80035a2:	4013      	ands	r3, r2
 80035a4:	b299      	uxth	r1, r3
 80035a6:	183b      	adds	r3, r7, r0
 80035a8:	183a      	adds	r2, r7, r0
 80035aa:	8812      	ldrh	r2, [r2, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	183a      	adds	r2, r7, r0
 80035b6:	8812      	ldrh	r2, [r2, #0]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	e04c      	b.n	8003656 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80035bc:	231e      	movs	r3, #30
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	e047      	b.n	8003656 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035c6:	231f      	movs	r3, #31
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d015      	beq.n	80035fc <UART_SetConfig+0x1f0>
 80035d0:	dc18      	bgt.n	8003604 <UART_SetConfig+0x1f8>
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d00d      	beq.n	80035f2 <UART_SetConfig+0x1e6>
 80035d6:	dc15      	bgt.n	8003604 <UART_SetConfig+0x1f8>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <UART_SetConfig+0x1d6>
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d005      	beq.n	80035ec <UART_SetConfig+0x1e0>
 80035e0:	e010      	b.n	8003604 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e2:	f7ff faa7 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 80035e6:	0003      	movs	r3, r0
 80035e8:	61bb      	str	r3, [r7, #24]
        break;
 80035ea:	e012      	b.n	8003612 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ec:	4b26      	ldr	r3, [pc, #152]	; (8003688 <UART_SetConfig+0x27c>)
 80035ee:	61bb      	str	r3, [r7, #24]
        break;
 80035f0:	e00f      	b.n	8003612 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f2:	f7ff fa31 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80035f6:	0003      	movs	r3, r0
 80035f8:	61bb      	str	r3, [r7, #24]
        break;
 80035fa:	e00a      	b.n	8003612 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	61bb      	str	r3, [r7, #24]
        break;
 8003602:	e006      	b.n	8003612 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003608:	231e      	movs	r3, #30
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
        break;
 8003610:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01e      	beq.n	8003656 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	085a      	lsrs	r2, r3, #1
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	18d2      	adds	r2, r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	0019      	movs	r1, r3
 8003628:	0010      	movs	r0, r2
 800362a:	f7fc fd77 	bl	800011c <__udivsi3>
 800362e:	0003      	movs	r3, r0
 8003630:	b29b      	uxth	r3, r3
 8003632:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b0f      	cmp	r3, #15
 8003638:	d909      	bls.n	800364e <UART_SetConfig+0x242>
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	025b      	lsls	r3, r3, #9
 8003640:	429a      	cmp	r2, r3
 8003642:	d204      	bcs.n	800364e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	60da      	str	r2, [r3, #12]
 800364c:	e003      	b.n	8003656 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800364e:	231e      	movs	r3, #30
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003662:	231e      	movs	r3, #30
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	781b      	ldrb	r3, [r3, #0]
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b008      	add	sp, #32
 800366e:	bd80      	pop	{r7, pc}
 8003670:	ffff69f3 	.word	0xffff69f3
 8003674:	ffffcfff 	.word	0xffffcfff
 8003678:	fffff4ff 	.word	0xfffff4ff
 800367c:	40013800 	.word	0x40013800
 8003680:	40021000 	.word	0x40021000
 8003684:	40004400 	.word	0x40004400
 8003688:	007a1200 	.word	0x007a1200

0800368c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	2201      	movs	r2, #1
 800369a:	4013      	ands	r3, r2
 800369c:	d00b      	beq.n	80036b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4a4a      	ldr	r2, [pc, #296]	; (80037d0 <UART_AdvFeatureConfig+0x144>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	0019      	movs	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	2202      	movs	r2, #2
 80036bc:	4013      	ands	r3, r2
 80036be:	d00b      	beq.n	80036d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	4a43      	ldr	r2, [pc, #268]	; (80037d4 <UART_AdvFeatureConfig+0x148>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	2204      	movs	r2, #4
 80036de:	4013      	ands	r3, r2
 80036e0:	d00b      	beq.n	80036fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a3b      	ldr	r2, [pc, #236]	; (80037d8 <UART_AdvFeatureConfig+0x14c>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	2208      	movs	r2, #8
 8003700:	4013      	ands	r3, r2
 8003702:	d00b      	beq.n	800371c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4a34      	ldr	r2, [pc, #208]	; (80037dc <UART_AdvFeatureConfig+0x150>)
 800370c:	4013      	ands	r3, r2
 800370e:	0019      	movs	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2210      	movs	r2, #16
 8003722:	4013      	ands	r3, r2
 8003724:	d00b      	beq.n	800373e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4a2c      	ldr	r2, [pc, #176]	; (80037e0 <UART_AdvFeatureConfig+0x154>)
 800372e:	4013      	ands	r3, r2
 8003730:	0019      	movs	r1, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2220      	movs	r2, #32
 8003744:	4013      	ands	r3, r2
 8003746:	d00b      	beq.n	8003760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <UART_AdvFeatureConfig+0x158>)
 8003750:	4013      	ands	r3, r2
 8003752:	0019      	movs	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	2240      	movs	r2, #64	; 0x40
 8003766:	4013      	ands	r3, r2
 8003768:	d01d      	beq.n	80037a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <UART_AdvFeatureConfig+0x15c>)
 8003772:	4013      	ands	r3, r2
 8003774:	0019      	movs	r1, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	035b      	lsls	r3, r3, #13
 800378a:	429a      	cmp	r2, r3
 800378c:	d10b      	bne.n	80037a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a15      	ldr	r2, [pc, #84]	; (80037ec <UART_AdvFeatureConfig+0x160>)
 8003796:	4013      	ands	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	2280      	movs	r2, #128	; 0x80
 80037ac:	4013      	ands	r3, r2
 80037ae:	d00b      	beq.n	80037c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <UART_AdvFeatureConfig+0x164>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	0019      	movs	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
  }
}
 80037c8:	46c0      	nop			; (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b002      	add	sp, #8
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	fffdffff 	.word	0xfffdffff
 80037d4:	fffeffff 	.word	0xfffeffff
 80037d8:	fffbffff 	.word	0xfffbffff
 80037dc:	ffff7fff 	.word	0xffff7fff
 80037e0:	ffffefff 	.word	0xffffefff
 80037e4:	ffffdfff 	.word	0xffffdfff
 80037e8:	ffefffff 	.word	0xffefffff
 80037ec:	ff9fffff 	.word	0xff9fffff
 80037f0:	fff7ffff 	.word	0xfff7ffff

080037f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2280      	movs	r2, #128	; 0x80
 8003800:	2100      	movs	r1, #0
 8003802:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003804:	f7fd fd18 	bl	8001238 <HAL_GetTick>
 8003808:	0003      	movs	r3, r0
 800380a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2208      	movs	r2, #8
 8003814:	4013      	ands	r3, r2
 8003816:	2b08      	cmp	r3, #8
 8003818:	d10c      	bne.n	8003834 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2280      	movs	r2, #128	; 0x80
 800381e:	0391      	lsls	r1, r2, #14
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4a17      	ldr	r2, [pc, #92]	; (8003880 <UART_CheckIdleState+0x8c>)
 8003824:	9200      	str	r2, [sp, #0]
 8003826:	2200      	movs	r2, #0
 8003828:	f000 f82c 	bl	8003884 <UART_WaitOnFlagUntilTimeout>
 800382c:	1e03      	subs	r3, r0, #0
 800382e:	d001      	beq.n	8003834 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e021      	b.n	8003878 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2204      	movs	r2, #4
 800383c:	4013      	ands	r3, r2
 800383e:	2b04      	cmp	r3, #4
 8003840:	d10c      	bne.n	800385c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2280      	movs	r2, #128	; 0x80
 8003846:	03d1      	lsls	r1, r2, #15
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4a0d      	ldr	r2, [pc, #52]	; (8003880 <UART_CheckIdleState+0x8c>)
 800384c:	9200      	str	r2, [sp, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	f000 f818 	bl	8003884 <UART_WaitOnFlagUntilTimeout>
 8003854:	1e03      	subs	r3, r0, #0
 8003856:	d001      	beq.n	800385c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e00d      	b.n	8003878 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2274      	movs	r2, #116	; 0x74
 8003872:	2100      	movs	r1, #0
 8003874:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	b004      	add	sp, #16
 800387e:	bd80      	pop	{r7, pc}
 8003880:	01ffffff 	.word	0x01ffffff

08003884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b094      	sub	sp, #80	; 0x50
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003894:	e0a3      	b.n	80039de <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003898:	3301      	adds	r3, #1
 800389a:	d100      	bne.n	800389e <UART_WaitOnFlagUntilTimeout+0x1a>
 800389c:	e09f      	b.n	80039de <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7fd fccb 	bl	8001238 <HAL_GetTick>
 80038a2:	0002      	movs	r2, r0
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80038ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d13d      	bne.n	8003930 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b4:	f3ef 8310 	mrs	r3, PRIMASK
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038bc:	647b      	str	r3, [r7, #68]	; 0x44
 80038be:	2301      	movs	r3, #1
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c4:	f383 8810 	msr	PRIMASK, r3
}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	494c      	ldr	r1, [pc, #304]	; (8003a08 <UART_WaitOnFlagUntilTimeout+0x184>)
 80038d6:	400a      	ands	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038dc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	f383 8810 	msr	PRIMASK, r3
}
 80038e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ee:	643b      	str	r3, [r7, #64]	; 0x40
 80038f0:	2301      	movs	r3, #1
 80038f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	f383 8810 	msr	PRIMASK, r3
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2101      	movs	r1, #1
 8003908:	438a      	bics	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003912:	f383 8810 	msr	PRIMASK, r3
}
 8003916:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2274      	movs	r2, #116	; 0x74
 8003928:	2100      	movs	r1, #0
 800392a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e067      	b.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2204      	movs	r2, #4
 8003938:	4013      	ands	r3, r2
 800393a:	d050      	beq.n	80039de <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	401a      	ands	r2, r3
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	429a      	cmp	r2, r3
 800394e:	d146      	bne.n	80039de <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395a:	f3ef 8310 	mrs	r3, PRIMASK
 800395e:	613b      	str	r3, [r7, #16]
  return(result);
 8003960:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003964:	2301      	movs	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f383 8810 	msr	PRIMASK, r3
}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4923      	ldr	r1, [pc, #140]	; (8003a08 <UART_WaitOnFlagUntilTimeout+0x184>)
 800397c:	400a      	ands	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003982:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f383 8810 	msr	PRIMASK, r3
}
 800398a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398c:	f3ef 8310 	mrs	r3, PRIMASK
 8003990:	61fb      	str	r3, [r7, #28]
  return(result);
 8003992:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003994:	64bb      	str	r3, [r7, #72]	; 0x48
 8003996:	2301      	movs	r3, #1
 8003998:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	f383 8810 	msr	PRIMASK, r3
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2101      	movs	r1, #1
 80039ae:	438a      	bics	r2, r1
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	f383 8810 	msr	PRIMASK, r3
}
 80039bc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	2120      	movs	r1, #32
 80039d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2274      	movs	r2, #116	; 0x74
 80039d6:	2100      	movs	r1, #0
 80039d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e010      	b.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	425a      	negs	r2, r3
 80039ee:	4153      	adcs	r3, r2
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	001a      	movs	r2, r3
 80039f4:	1dfb      	adds	r3, r7, #7
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d100      	bne.n	80039fe <UART_WaitOnFlagUntilTimeout+0x17a>
 80039fc:	e74b      	b.n	8003896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b014      	add	sp, #80	; 0x50
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	fffffe5f 	.word	0xfffffe5f

08003a0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	0002      	movs	r2, r0
 8003a14:	1dbb      	adds	r3, r7, #6
 8003a16:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a1c:	1dbb      	adds	r3, r7, #6
 8003a1e:	2200      	movs	r2, #0
 8003a20:	5e9b      	ldrsh	r3, [r3, r2]
 8003a22:	2b84      	cmp	r3, #132	; 0x84
 8003a24:	d006      	beq.n	8003a34 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8003a26:	1dbb      	adds	r3, r7, #6
 8003a28:	2200      	movs	r2, #0
 8003a2a:	5e9a      	ldrsh	r2, [r3, r2]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	18d3      	adds	r3, r2, r3
 8003a30:	3303      	adds	r3, #3
 8003a32:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a34:	68fb      	ldr	r3, [r7, #12]
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b004      	add	sp, #16
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a42:	f000 fe6d 	bl	8004720 <vTaskStartScheduler>
  
  return osOK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a50:	b089      	sub	sp, #36	; 0x24
 8003a52:	af04      	add	r7, sp, #16
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d020      	beq.n	8003aa2 <osThreadCreate+0x54>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01c      	beq.n	8003aa2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685c      	ldr	r4, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681d      	ldr	r5, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691e      	ldr	r6, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2208      	movs	r2, #8
 8003a78:	5e9b      	ldrsh	r3, [r3, r2]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f7ff ffc6 	bl	8003a0c <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a88:	6839      	ldr	r1, [r7, #0]
 8003a8a:	9302      	str	r3, [sp, #8]
 8003a8c:	9201      	str	r2, [sp, #4]
 8003a8e:	9000      	str	r0, [sp, #0]
 8003a90:	000b      	movs	r3, r1
 8003a92:	0032      	movs	r2, r6
 8003a94:	0029      	movs	r1, r5
 8003a96:	0020      	movs	r0, r4
 8003a98:	f000 fc98 	bl	80043cc <xTaskCreateStatic>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e01d      	b.n	8003ade <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685c      	ldr	r4, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aae:	b29e      	uxth	r6, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	5e9b      	ldrsh	r3, [r3, r2]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f7ff ffa8 	bl	8003a0c <makeFreeRtosPriority>
 8003abc:	0001      	movs	r1, r0
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	230c      	movs	r3, #12
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	9100      	str	r1, [sp, #0]
 8003ac8:	0013      	movs	r3, r2
 8003aca:	0032      	movs	r2, r6
 8003acc:	0029      	movs	r1, r5
 8003ace:	0020      	movs	r0, r4
 8003ad0:	f000 fcbf 	bl	8004452 <xTaskCreate>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e000      	b.n	8003ae0 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ade:	68fb      	ldr	r3, [r7, #12]
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b005      	add	sp, #20
 8003ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ae8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <osDelay+0x16>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	e000      	b.n	8003b00 <osDelay+0x18>
 8003afe:	2301      	movs	r3, #1
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 fde7 	bl	80046d4 <vTaskDelay>
  
  return osOK;
 8003b06:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b004      	add	sp, #16
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d011      	beq.n	8003b46 <osMessageCreate+0x36>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00d      	beq.n	8003b46 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2400      	movs	r4, #0
 8003b3c:	9400      	str	r4, [sp, #0]
 8003b3e:	f000 f90c 	bl	8003d5a <xQueueGenericCreateStatic>
 8003b42:	0003      	movs	r3, r0
 8003b44:	e008      	b.n	8003b58 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	0019      	movs	r1, r3
 8003b52:	f000 f94d 	bl	8003df0 <xQueueGenericCreate>
 8003b56:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b003      	add	sp, #12
 8003b5e:	bd90      	pop	{r4, r7, pc}

08003b60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	4252      	negs	r2, r2
 8003b78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	001a      	movs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3308      	adds	r3, #8
 8003b88:	001a      	movs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b002      	add	sp, #8
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	601a      	str	r2, [r3, #0]
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	d103      	bne.n	8003c14 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e00c      	b.n	8003c2e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3308      	adds	r3, #8
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	e002      	b.n	8003c22 <vListInsert+0x2c>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d2f6      	bcs.n	8003c1c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	601a      	str	r2, [r3, #0]
}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b004      	add	sp, #16
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6892      	ldr	r2, [r2, #8]
 8003c78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6852      	ldr	r2, [r2, #4]
 8003c82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d103      	bne.n	8003c96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	1e5a      	subs	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
}
 8003caa:	0018      	movs	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b004      	add	sp, #16
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <xQueueGenericReset+0x18>
 8003cc6:	b672      	cpsid	i
 8003cc8:	e7fe      	b.n	8003cc8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003cca:	f001 fa49 	bl	8005160 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	434b      	muls	r3, r1
 8003cdc:	18d2      	adds	r2, r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf8:	1e59      	subs	r1, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	434b      	muls	r3, r1
 8003d00:	18d2      	adds	r2, r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2244      	movs	r2, #68	; 0x44
 8003d0a:	21ff      	movs	r1, #255	; 0xff
 8003d0c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2245      	movs	r2, #69	; 0x45
 8003d12:	21ff      	movs	r1, #255	; 0xff
 8003d14:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10d      	bne.n	8003d38 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d013      	beq.n	8003d4c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3310      	adds	r3, #16
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f000 ff15 	bl	8004b58 <xTaskRemoveFromEventList>
 8003d2e:	1e03      	subs	r3, r0, #0
 8003d30:	d00c      	beq.n	8003d4c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d32:	f001 fa05 	bl	8005140 <vPortYield>
 8003d36:	e009      	b.n	8003d4c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3310      	adds	r3, #16
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f7ff ff0f 	bl	8003b60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3324      	adds	r3, #36	; 0x24
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7ff ff0a 	bl	8003b60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d4c:	f001 fa1a 	bl	8005184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d50:	2301      	movs	r3, #1
}
 8003d52:	0018      	movs	r0, r3
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b004      	add	sp, #16
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d5a:	b590      	push	{r4, r7, lr}
 8003d5c:	b089      	sub	sp, #36	; 0x24
 8003d5e:	af02      	add	r7, sp, #8
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <xQueueGenericCreateStatic+0x18>
 8003d6e:	b672      	cpsid	i
 8003d70:	e7fe      	b.n	8003d70 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <xQueueGenericCreateStatic+0x22>
 8003d78:	b672      	cpsid	i
 8003d7a:	e7fe      	b.n	8003d7a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <xQueueGenericCreateStatic+0x2e>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <xQueueGenericCreateStatic+0x32>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <xQueueGenericCreateStatic+0x34>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <xQueueGenericCreateStatic+0x3c>
 8003d92:	b672      	cpsid	i
 8003d94:	e7fe      	b.n	8003d94 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <xQueueGenericCreateStatic+0x48>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <xQueueGenericCreateStatic+0x4c>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <xQueueGenericCreateStatic+0x4e>
 8003da6:	2300      	movs	r3, #0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <xQueueGenericCreateStatic+0x56>
 8003dac:	b672      	cpsid	i
 8003dae:	e7fe      	b.n	8003dae <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003db0:	2348      	movs	r3, #72	; 0x48
 8003db2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b48      	cmp	r3, #72	; 0x48
 8003db8:	d001      	beq.n	8003dbe <xQueueGenericCreateStatic+0x64>
 8003dba:	b672      	cpsid	i
 8003dbc:	e7fe      	b.n	8003dbc <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00e      	beq.n	8003de6 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2246      	movs	r2, #70	; 0x46
 8003dcc:	2101      	movs	r1, #1
 8003dce:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dd0:	2328      	movs	r3, #40	; 0x28
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	781c      	ldrb	r4, [r3, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	0023      	movs	r3, r4
 8003de2:	f000 f83b 	bl	8003e5c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003de6:	697b      	ldr	r3, [r7, #20]
	}
 8003de8:	0018      	movs	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b007      	add	sp, #28
 8003dee:	bd90      	pop	{r4, r7, pc}

08003df0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b08b      	sub	sp, #44	; 0x2c
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	1dfb      	adds	r3, r7, #7
 8003dfc:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <xQueueGenericCreate+0x18>
 8003e04:	b672      	cpsid	i
 8003e06:	e7fe      	b.n	8003e06 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	e003      	b.n	8003e1c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	4353      	muls	r3, r2
 8003e1a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	3348      	adds	r3, #72	; 0x48
 8003e20:	0018      	movs	r0, r3
 8003e22:	f001 fa35 	bl	8005290 <pvPortMalloc>
 8003e26:	0003      	movs	r3, r0
 8003e28:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d010      	beq.n	8003e52 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	3348      	adds	r3, #72	; 0x48
 8003e34:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2246      	movs	r2, #70	; 0x46
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e3e:	1dfb      	adds	r3, r7, #7
 8003e40:	781c      	ldrb	r4, [r3, #0]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	0023      	movs	r3, r4
 8003e4e:	f000 f805 	bl	8003e5c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003e52:	69bb      	ldr	r3, [r7, #24]
	}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b009      	add	sp, #36	; 0x24
 8003e5a:	bd90      	pop	{r4, r7, pc}

08003e5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	001a      	movs	r2, r3
 8003e6a:	1cfb      	adds	r3, r7, #3
 8003e6c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e002      	b.n	8003e82 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2101      	movs	r1, #1
 8003e92:	0018      	movs	r0, r3
 8003e94:	f7ff ff0d 	bl	8003cb2 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b004      	add	sp, #16
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	; 0x28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <xQueueGenericSend+0x20>
 8003ebc:	b672      	cpsid	i
 8003ebe:	e7fe      	b.n	8003ebe <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d103      	bne.n	8003ece <xQueueGenericSend+0x2e>
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <xQueueGenericSend+0x32>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <xQueueGenericSend+0x34>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <xQueueGenericSend+0x3c>
 8003ed8:	b672      	cpsid	i
 8003eda:	e7fe      	b.n	8003eda <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d103      	bne.n	8003eea <xQueueGenericSend+0x4a>
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <xQueueGenericSend+0x4e>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <xQueueGenericSend+0x50>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <xQueueGenericSend+0x58>
 8003ef4:	b672      	cpsid	i
 8003ef6:	e7fe      	b.n	8003ef6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ef8:	f000 ffcc 	bl	8004e94 <xTaskGetSchedulerState>
 8003efc:	1e03      	subs	r3, r0, #0
 8003efe:	d102      	bne.n	8003f06 <xQueueGenericSend+0x66>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <xQueueGenericSend+0x6a>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <xQueueGenericSend+0x6c>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <xQueueGenericSend+0x74>
 8003f10:	b672      	cpsid	i
 8003f12:	e7fe      	b.n	8003f12 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f14:	f001 f924 	bl	8005160 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d302      	bcc.n	8003f2a <xQueueGenericSend+0x8a>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d11e      	bne.n	8003f68 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 f92e 	bl	8004192 <prvCopyDataToQueue>
 8003f36:	0003      	movs	r3, r0
 8003f38:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	3324      	adds	r3, #36	; 0x24
 8003f46:	0018      	movs	r0, r3
 8003f48:	f000 fe06 	bl	8004b58 <xTaskRemoveFromEventList>
 8003f4c:	1e03      	subs	r3, r0, #0
 8003f4e:	d007      	beq.n	8003f60 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f50:	f001 f8f6 	bl	8005140 <vPortYield>
 8003f54:	e004      	b.n	8003f60 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f5c:	f001 f8f0 	bl	8005140 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f60:	f001 f910 	bl	8005184 <vPortExitCritical>
				return pdPASS;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e05b      	b.n	8004020 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f6e:	f001 f909 	bl	8005184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e054      	b.n	8004020 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d106      	bne.n	8003f8a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f7c:	2314      	movs	r3, #20
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	0018      	movs	r0, r3
 8003f82:	f000 fe45 	bl	8004c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f86:	2301      	movs	r3, #1
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f8a:	f001 f8fb 	bl	8005184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f8e:	f000 fc1f 	bl	80047d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f92:	f001 f8e5 	bl	8005160 <vPortEnterCritical>
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	2244      	movs	r2, #68	; 0x44
 8003f9a:	5c9b      	ldrb	r3, [r3, r2]
 8003f9c:	b25b      	sxtb	r3, r3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	d103      	bne.n	8003faa <xQueueGenericSend+0x10a>
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	2244      	movs	r2, #68	; 0x44
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	5499      	strb	r1, [r3, r2]
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	2245      	movs	r2, #69	; 0x45
 8003fae:	5c9b      	ldrb	r3, [r3, r2]
 8003fb0:	b25b      	sxtb	r3, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	d103      	bne.n	8003fbe <xQueueGenericSend+0x11e>
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	2245      	movs	r2, #69	; 0x45
 8003fba:	2100      	movs	r1, #0
 8003fbc:	5499      	strb	r1, [r3, r2]
 8003fbe:	f001 f8e1 	bl	8005184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fc2:	1d3a      	adds	r2, r7, #4
 8003fc4:	2314      	movs	r3, #20
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	0011      	movs	r1, r2
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f000 fe34 	bl	8004c38 <xTaskCheckForTimeOut>
 8003fd0:	1e03      	subs	r3, r0, #0
 8003fd2:	d11e      	bne.n	8004012 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f000 f9e0 	bl	800439c <prvIsQueueFull>
 8003fdc:	1e03      	subs	r3, r0, #0
 8003fde:	d011      	beq.n	8004004 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	3310      	adds	r3, #16
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	0011      	movs	r1, r2
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f000 fd97 	bl	8004b1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f000 f95f 	bl	80042b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ff6:	f000 fbf7 	bl	80047e8 <xTaskResumeAll>
 8003ffa:	1e03      	subs	r3, r0, #0
 8003ffc:	d18a      	bne.n	8003f14 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003ffe:	f001 f89f 	bl	8005140 <vPortYield>
 8004002:	e787      	b.n	8003f14 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	0018      	movs	r0, r3
 8004008:	f000 f954 	bl	80042b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800400c:	f000 fbec 	bl	80047e8 <xTaskResumeAll>
 8004010:	e780      	b.n	8003f14 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	0018      	movs	r0, r3
 8004016:	f000 f94d 	bl	80042b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800401a:	f000 fbe5 	bl	80047e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800401e:	2300      	movs	r3, #0
		}
	}
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b00a      	add	sp, #40	; 0x28
 8004026:	bd80      	pop	{r7, pc}

08004028 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004034:	2300      	movs	r3, #0
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <xQueueReceive+0x1e>
 8004042:	b672      	cpsid	i
 8004044:	e7fe      	b.n	8004044 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d103      	bne.n	8004054 <xQueueReceive+0x2c>
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <xQueueReceive+0x30>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <xQueueReceive+0x32>
 8004058:	2300      	movs	r3, #0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <xQueueReceive+0x3a>
 800405e:	b672      	cpsid	i
 8004060:	e7fe      	b.n	8004060 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004062:	f000 ff17 	bl	8004e94 <xTaskGetSchedulerState>
 8004066:	1e03      	subs	r3, r0, #0
 8004068:	d102      	bne.n	8004070 <xQueueReceive+0x48>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <xQueueReceive+0x4c>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <xQueueReceive+0x4e>
 8004074:	2300      	movs	r3, #0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <xQueueReceive+0x56>
 800407a:	b672      	cpsid	i
 800407c:	e7fe      	b.n	800407c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800407e:	f001 f86f 	bl	8005160 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01a      	beq.n	80040c4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	0011      	movs	r1, r2
 8004094:	0018      	movs	r0, r3
 8004096:	f000 f8e7 	bl	8004268 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	1e5a      	subs	r2, r3, #1
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	3310      	adds	r3, #16
 80040ae:	0018      	movs	r0, r3
 80040b0:	f000 fd52 	bl	8004b58 <xTaskRemoveFromEventList>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d001      	beq.n	80040bc <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040b8:	f001 f842 	bl	8005140 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040bc:	f001 f862 	bl	8005184 <vPortExitCritical>
				return pdPASS;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e062      	b.n	800418a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040ca:	f001 f85b 	bl	8005184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040ce:	2300      	movs	r3, #0
 80040d0:	e05b      	b.n	800418a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d106      	bne.n	80040e6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040d8:	2314      	movs	r3, #20
 80040da:	18fb      	adds	r3, r7, r3
 80040dc:	0018      	movs	r0, r3
 80040de:	f000 fd97 	bl	8004c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040e2:	2301      	movs	r3, #1
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040e6:	f001 f84d 	bl	8005184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040ea:	f000 fb71 	bl	80047d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040ee:	f001 f837 	bl	8005160 <vPortEnterCritical>
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	2244      	movs	r2, #68	; 0x44
 80040f6:	5c9b      	ldrb	r3, [r3, r2]
 80040f8:	b25b      	sxtb	r3, r3
 80040fa:	3301      	adds	r3, #1
 80040fc:	d103      	bne.n	8004106 <xQueueReceive+0xde>
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	2244      	movs	r2, #68	; 0x44
 8004102:	2100      	movs	r1, #0
 8004104:	5499      	strb	r1, [r3, r2]
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	2245      	movs	r2, #69	; 0x45
 800410a:	5c9b      	ldrb	r3, [r3, r2]
 800410c:	b25b      	sxtb	r3, r3
 800410e:	3301      	adds	r3, #1
 8004110:	d103      	bne.n	800411a <xQueueReceive+0xf2>
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	2245      	movs	r2, #69	; 0x45
 8004116:	2100      	movs	r1, #0
 8004118:	5499      	strb	r1, [r3, r2]
 800411a:	f001 f833 	bl	8005184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800411e:	1d3a      	adds	r2, r7, #4
 8004120:	2314      	movs	r3, #20
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	0011      	movs	r1, r2
 8004126:	0018      	movs	r0, r3
 8004128:	f000 fd86 	bl	8004c38 <xTaskCheckForTimeOut>
 800412c:	1e03      	subs	r3, r0, #0
 800412e:	d11e      	bne.n	800416e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	0018      	movs	r0, r3
 8004134:	f000 f91c 	bl	8004370 <prvIsQueueEmpty>
 8004138:	1e03      	subs	r3, r0, #0
 800413a:	d011      	beq.n	8004160 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	3324      	adds	r3, #36	; 0x24
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	0011      	movs	r1, r2
 8004144:	0018      	movs	r0, r3
 8004146:	f000 fce9 	bl	8004b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	0018      	movs	r0, r3
 800414e:	f000 f8b1 	bl	80042b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004152:	f000 fb49 	bl	80047e8 <xTaskResumeAll>
 8004156:	1e03      	subs	r3, r0, #0
 8004158:	d191      	bne.n	800407e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800415a:	f000 fff1 	bl	8005140 <vPortYield>
 800415e:	e78e      	b.n	800407e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	0018      	movs	r0, r3
 8004164:	f000 f8a6 	bl	80042b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004168:	f000 fb3e 	bl	80047e8 <xTaskResumeAll>
 800416c:	e787      	b.n	800407e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	0018      	movs	r0, r3
 8004172:	f000 f89f 	bl	80042b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004176:	f000 fb37 	bl	80047e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	0018      	movs	r0, r3
 800417e:	f000 f8f7 	bl	8004370 <prvIsQueueEmpty>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d100      	bne.n	8004188 <xQueueReceive+0x160>
 8004186:	e77a      	b.n	800407e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800418a:	0018      	movs	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	b00a      	add	sp, #40	; 0x28
 8004190:	bd80      	pop	{r7, pc}

08004192 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10e      	bne.n	80041ce <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d14e      	bne.n	8004256 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	0018      	movs	r0, r3
 80041be:	f000 fe85 	bl	8004ecc <xTaskPriorityDisinherit>
 80041c2:	0003      	movs	r3, r0
 80041c4:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	e043      	b.n	8004256 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d119      	bne.n	8004208 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6898      	ldr	r0, [r3, #8]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	0019      	movs	r1, r3
 80041e0:	f001 fb2b 	bl	800583a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	18d2      	adds	r2, r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d32b      	bcc.n	8004256 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	e026      	b.n	8004256 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68d8      	ldr	r0, [r3, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	0019      	movs	r1, r3
 8004214:	f001 fb11 	bl	800583a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	425b      	negs	r3, r3
 8004222:	18d2      	adds	r2, r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d207      	bcs.n	8004244 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	425b      	negs	r3, r3
 800423e:	18d2      	adds	r2, r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d105      	bne.n	8004256 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	3b01      	subs	r3, #1
 8004254:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800425e:	697b      	ldr	r3, [r7, #20]
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b006      	add	sp, #24
 8004266:	bd80      	pop	{r7, pc}

08004268 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d018      	beq.n	80042ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	18d2      	adds	r2, r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d303      	bcc.n	800429c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68d9      	ldr	r1, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f001 fac7 	bl	800583a <memcpy>
	}
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042bc:	f000 ff50 	bl	8005160 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042c0:	230f      	movs	r3, #15
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	2145      	movs	r1, #69	; 0x45
 80042c8:	5c52      	ldrb	r2, [r2, r1]
 80042ca:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042cc:	e013      	b.n	80042f6 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d016      	beq.n	8004304 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3324      	adds	r3, #36	; 0x24
 80042da:	0018      	movs	r0, r3
 80042dc:	f000 fc3c 	bl	8004b58 <xTaskRemoveFromEventList>
 80042e0:	1e03      	subs	r3, r0, #0
 80042e2:	d001      	beq.n	80042e8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042e4:	f000 fcf8 	bl	8004cd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042e8:	210f      	movs	r1, #15
 80042ea:	187b      	adds	r3, r7, r1
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	187b      	adds	r3, r7, r1
 80042f4:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042f6:	230f      	movs	r3, #15
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b25b      	sxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	dce5      	bgt.n	80042ce <prvUnlockQueue+0x1a>
 8004302:	e000      	b.n	8004306 <prvUnlockQueue+0x52>
					break;
 8004304:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2245      	movs	r2, #69	; 0x45
 800430a:	21ff      	movs	r1, #255	; 0xff
 800430c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800430e:	f000 ff39 	bl	8005184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004312:	f000 ff25 	bl	8005160 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004316:	230e      	movs	r3, #14
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	2144      	movs	r1, #68	; 0x44
 800431e:	5c52      	ldrb	r2, [r2, r1]
 8004320:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004322:	e013      	b.n	800434c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d016      	beq.n	800435a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3310      	adds	r3, #16
 8004330:	0018      	movs	r0, r3
 8004332:	f000 fc11 	bl	8004b58 <xTaskRemoveFromEventList>
 8004336:	1e03      	subs	r3, r0, #0
 8004338:	d001      	beq.n	800433e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800433a:	f000 fccd 	bl	8004cd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800433e:	210e      	movs	r1, #14
 8004340:	187b      	adds	r3, r7, r1
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	3b01      	subs	r3, #1
 8004346:	b2da      	uxtb	r2, r3
 8004348:	187b      	adds	r3, r7, r1
 800434a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800434c:	230e      	movs	r3, #14
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b25b      	sxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	dce5      	bgt.n	8004324 <prvUnlockQueue+0x70>
 8004358:	e000      	b.n	800435c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800435a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2244      	movs	r2, #68	; 0x44
 8004360:	21ff      	movs	r1, #255	; 0xff
 8004362:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004364:	f000 ff0e 	bl	8005184 <vPortExitCritical>
}
 8004368:	46c0      	nop			; (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	b004      	add	sp, #16
 800436e:	bd80      	pop	{r7, pc}

08004370 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004378:	f000 fef2 	bl	8005160 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	2b00      	cmp	r3, #0
 8004382:	d102      	bne.n	800438a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004384:	2301      	movs	r3, #1
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e001      	b.n	800438e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800438e:	f000 fef9 	bl	8005184 <vPortExitCritical>

	return xReturn;
 8004392:	68fb      	ldr	r3, [r7, #12]
}
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	b004      	add	sp, #16
 800439a:	bd80      	pop	{r7, pc}

0800439c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043a4:	f000 fedc 	bl	8005160 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d102      	bne.n	80043ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	e001      	b.n	80043be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043be:	f000 fee1 	bl	8005184 <vPortExitCritical>

	return xReturn;
 80043c2:	68fb      	ldr	r3, [r7, #12]
}
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b004      	add	sp, #16
 80043ca:	bd80      	pop	{r7, pc}

080043cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b08d      	sub	sp, #52	; 0x34
 80043d0:	af04      	add	r7, sp, #16
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <xTaskCreateStatic+0x18>
 80043e0:	b672      	cpsid	i
 80043e2:	e7fe      	b.n	80043e2 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <xTaskCreateStatic+0x22>
 80043ea:	b672      	cpsid	i
 80043ec:	e7fe      	b.n	80043ec <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043ee:	23b4      	movs	r3, #180	; 0xb4
 80043f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2bb4      	cmp	r3, #180	; 0xb4
 80043f6:	d001      	beq.n	80043fc <xTaskCreateStatic+0x30>
 80043f8:	b672      	cpsid	i
 80043fa:	e7fe      	b.n	80043fa <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d020      	beq.n	8004444 <xTaskCreateStatic+0x78>
 8004402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01d      	beq.n	8004444 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004410:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	22b1      	movs	r2, #177	; 0xb1
 8004416:	2102      	movs	r1, #2
 8004418:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800441a:	683c      	ldr	r4, [r7, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	2300      	movs	r3, #0
 8004424:	9303      	str	r3, [sp, #12]
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	9302      	str	r3, [sp, #8]
 800442a:	2318      	movs	r3, #24
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	9301      	str	r3, [sp, #4]
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	0023      	movs	r3, r4
 8004436:	f000 f859 	bl	80044ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	0018      	movs	r0, r3
 800443e:	f000 f8e5 	bl	800460c <prvAddNewTaskToReadyList>
 8004442:	e001      	b.n	8004448 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004448:	69bb      	ldr	r3, [r7, #24]
	}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b009      	add	sp, #36	; 0x24
 8004450:	bd90      	pop	{r4, r7, pc}

08004452 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004452:	b590      	push	{r4, r7, lr}
 8004454:	b08d      	sub	sp, #52	; 0x34
 8004456:	af04      	add	r7, sp, #16
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	1dbb      	adds	r3, r7, #6
 8004460:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004462:	1dbb      	adds	r3, r7, #6
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	0018      	movs	r0, r3
 800446a:	f000 ff11 	bl	8005290 <pvPortMalloc>
 800446e:	0003      	movs	r3, r0
 8004470:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d010      	beq.n	800449a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004478:	20b4      	movs	r0, #180	; 0xb4
 800447a:	f000 ff09 	bl	8005290 <pvPortMalloc>
 800447e:	0003      	movs	r3, r0
 8004480:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
 800448e:	e006      	b.n	800449e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	0018      	movs	r0, r3
 8004494:	f000 ffa2 	bl	80053dc <vPortFree>
 8004498:	e001      	b.n	800449e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01a      	beq.n	80044da <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	22b1      	movs	r2, #177	; 0xb1
 80044a8:	2100      	movs	r1, #0
 80044aa:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044ac:	1dbb      	adds	r3, r7, #6
 80044ae:	881a      	ldrh	r2, [r3, #0]
 80044b0:	683c      	ldr	r4, [r7, #0]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	2300      	movs	r3, #0
 80044b8:	9303      	str	r3, [sp, #12]
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	9302      	str	r3, [sp, #8]
 80044be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	0023      	movs	r3, r4
 80044c8:	f000 f810 	bl	80044ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	0018      	movs	r0, r3
 80044d0:	f000 f89c 	bl	800460c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044d4:	2301      	movs	r3, #1
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	e002      	b.n	80044e0 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044da:	2301      	movs	r3, #1
 80044dc:	425b      	negs	r3, r3
 80044de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044e0:	69bb      	ldr	r3, [r7, #24]
	}
 80044e2:	0018      	movs	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b009      	add	sp, #36	; 0x24
 80044e8:	bd90      	pop	{r4, r7, pc}
	...

080044ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	493e      	ldr	r1, [pc, #248]	; (80045fc <prvInitialiseNewTask+0x110>)
 8004502:	468c      	mov	ip, r1
 8004504:	4463      	add	r3, ip
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	18d3      	adds	r3, r2, r3
 800450a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2207      	movs	r2, #7
 8004510:	4393      	bics	r3, r2
 8004512:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2207      	movs	r2, #7
 8004518:	4013      	ands	r3, r2
 800451a:	d001      	beq.n	8004520 <prvInitialiseNewTask+0x34>
 800451c:	b672      	cpsid	i
 800451e:	e7fe      	b.n	800451e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e013      	b.n	800454e <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	18d3      	adds	r3, r2, r3
 800452c:	7818      	ldrb	r0, [r3, #0]
 800452e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004530:	2134      	movs	r1, #52	; 0x34
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	18d3      	adds	r3, r2, r3
 8004536:	185b      	adds	r3, r3, r1
 8004538:	1c02      	adds	r2, r0, #0
 800453a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	18d3      	adds	r3, r2, r3
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d006      	beq.n	8004556 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3301      	adds	r3, #1
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b0f      	cmp	r3, #15
 8004552:	d9e8      	bls.n	8004526 <prvInitialiseNewTask+0x3a>
 8004554:	e000      	b.n	8004558 <prvInitialiseNewTask+0x6c>
		{
			break;
 8004556:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	2243      	movs	r2, #67	; 0x43
 800455c:	2100      	movs	r1, #0
 800455e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	2b06      	cmp	r3, #6
 8004564:	d901      	bls.n	800456a <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004566:	2306      	movs	r3, #6
 8004568:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	6a3a      	ldr	r2, [r7, #32]
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	6a3a      	ldr	r2, [r7, #32]
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	2200      	movs	r2, #0
 800457a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	3304      	adds	r3, #4
 8004580:	0018      	movs	r0, r3
 8004582:	f7ff fb0b 	bl	8003b9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	3318      	adds	r3, #24
 800458a:	0018      	movs	r0, r3
 800458c:	f7ff fb06 	bl	8003b9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004594:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	2207      	movs	r2, #7
 800459a:	1ad2      	subs	r2, r2, r3
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	22ac      	movs	r2, #172	; 0xac
 80045aa:	2100      	movs	r1, #0
 80045ac:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	22b0      	movs	r2, #176	; 0xb0
 80045b2:	2100      	movs	r1, #0
 80045b4:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	334c      	adds	r3, #76	; 0x4c
 80045ba:	2260      	movs	r2, #96	; 0x60
 80045bc:	2100      	movs	r1, #0
 80045be:	0018      	movs	r0, r3
 80045c0:	f001 f944 	bl	800584c <memset>
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	4a0e      	ldr	r2, [pc, #56]	; (8004600 <prvInitialiseNewTask+0x114>)
 80045c8:	651a      	str	r2, [r3, #80]	; 0x50
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	4a0d      	ldr	r2, [pc, #52]	; (8004604 <prvInitialiseNewTask+0x118>)
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	4a0d      	ldr	r2, [pc, #52]	; (8004608 <prvInitialiseNewTask+0x11c>)
 80045d4:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	68f9      	ldr	r1, [r7, #12]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	0018      	movs	r0, r3
 80045de:	f000 fd25 	bl	800502c <pxPortInitialiseStack>
 80045e2:	0002      	movs	r2, r0
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045f4:	46c0      	nop			; (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b006      	add	sp, #24
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	3fffffff 	.word	0x3fffffff
 8004600:	0800689c 	.word	0x0800689c
 8004604:	080068bc 	.word	0x080068bc
 8004608:	0800687c 	.word	0x0800687c

0800460c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004614:	f000 fda4 	bl	8005160 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004618:	4b28      	ldr	r3, [pc, #160]	; (80046bc <prvAddNewTaskToReadyList+0xb0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	4b27      	ldr	r3, [pc, #156]	; (80046bc <prvAddNewTaskToReadyList+0xb0>)
 8004620:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004622:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <prvAddNewTaskToReadyList+0xb4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800462a:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <prvAddNewTaskToReadyList+0xb4>)
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004630:	4b22      	ldr	r3, [pc, #136]	; (80046bc <prvAddNewTaskToReadyList+0xb0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d110      	bne.n	800465a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004638:	f000 fb68 	bl	8004d0c <prvInitialiseTaskLists>
 800463c:	e00d      	b.n	800465a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800463e:	4b21      	ldr	r3, [pc, #132]	; (80046c4 <prvAddNewTaskToReadyList+0xb8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004646:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <prvAddNewTaskToReadyList+0xb4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	429a      	cmp	r2, r3
 8004652:	d802      	bhi.n	800465a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004654:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <prvAddNewTaskToReadyList+0xb4>)
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800465a:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <prvAddNewTaskToReadyList+0xbc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <prvAddNewTaskToReadyList+0xbc>)
 8004662:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	4b18      	ldr	r3, [pc, #96]	; (80046cc <prvAddNewTaskToReadyList+0xc0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d903      	bls.n	8004678 <prvAddNewTaskToReadyList+0x6c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	4b15      	ldr	r3, [pc, #84]	; (80046cc <prvAddNewTaskToReadyList+0xc0>)
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	0013      	movs	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	189b      	adds	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4a12      	ldr	r2, [pc, #72]	; (80046d0 <prvAddNewTaskToReadyList+0xc4>)
 8004686:	189a      	adds	r2, r3, r2
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	0019      	movs	r1, r3
 800468e:	0010      	movs	r0, r2
 8004690:	f7ff fa8f 	bl	8003bb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004694:	f000 fd76 	bl	8005184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <prvAddNewTaskToReadyList+0xb8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <prvAddNewTaskToReadyList+0xb4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d201      	bcs.n	80046b2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046ae:	f000 fd47 	bl	8005140 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b002      	add	sp, #8
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	20000584 	.word	0x20000584
 80046c0:	20000484 	.word	0x20000484
 80046c4:	20000590 	.word	0x20000590
 80046c8:	200005a0 	.word	0x200005a0
 80046cc:	2000058c 	.word	0x2000058c
 80046d0:	20000488 	.word	0x20000488

080046d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d010      	beq.n	8004708 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <vTaskDelay+0x48>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <vTaskDelay+0x1e>
 80046ee:	b672      	cpsid	i
 80046f0:	e7fe      	b.n	80046f0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80046f2:	f000 f86d 	bl	80047d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2100      	movs	r1, #0
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 fc42 	bl	8004f84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004700:	f000 f872 	bl	80047e8 <xTaskResumeAll>
 8004704:	0003      	movs	r3, r0
 8004706:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800470e:	f000 fd17 	bl	8005140 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	46bd      	mov	sp, r7
 8004716:	b004      	add	sp, #16
 8004718:	bd80      	pop	{r7, pc}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	200005ac 	.word	0x200005ac

08004720 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b089      	sub	sp, #36	; 0x24
 8004724:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800472e:	003a      	movs	r2, r7
 8004730:	1d39      	adds	r1, r7, #4
 8004732:	2308      	movs	r3, #8
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	0018      	movs	r0, r3
 8004738:	f7fb fd7c 	bl	8000234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800473c:	683c      	ldr	r4, [r7, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	491b      	ldr	r1, [pc, #108]	; (80047b0 <vTaskStartScheduler+0x90>)
 8004744:	481b      	ldr	r0, [pc, #108]	; (80047b4 <vTaskStartScheduler+0x94>)
 8004746:	9202      	str	r2, [sp, #8]
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	2300      	movs	r3, #0
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2300      	movs	r3, #0
 8004750:	0022      	movs	r2, r4
 8004752:	f7ff fe3b 	bl	80043cc <xTaskCreateStatic>
 8004756:	0002      	movs	r2, r0
 8004758:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <vTaskStartScheduler+0x98>)
 800475a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800475c:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <vTaskStartScheduler+0x98>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004764:	2301      	movs	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e001      	b.n	800476e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d113      	bne.n	800479c <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004774:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004776:	4b11      	ldr	r3, [pc, #68]	; (80047bc <vTaskStartScheduler+0x9c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	334c      	adds	r3, #76	; 0x4c
 800477c:	001a      	movs	r2, r3
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <vTaskStartScheduler+0xa0>)
 8004780:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <vTaskStartScheduler+0xa4>)
 8004784:	2201      	movs	r2, #1
 8004786:	4252      	negs	r2, r2
 8004788:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800478a:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <vTaskStartScheduler+0xa8>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004790:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <vTaskStartScheduler+0xac>)
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004796:	f000 fcaf 	bl	80050f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800479a:	e004      	b.n	80047a6 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3301      	adds	r3, #1
 80047a0:	d101      	bne.n	80047a6 <vTaskStartScheduler+0x86>
 80047a2:	b672      	cpsid	i
 80047a4:	e7fe      	b.n	80047a4 <vTaskStartScheduler+0x84>
}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b005      	add	sp, #20
 80047ac:	bd90      	pop	{r4, r7, pc}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	080067bc 	.word	0x080067bc
 80047b4:	08004ced 	.word	0x08004ced
 80047b8:	200005a8 	.word	0x200005a8
 80047bc:	20000484 	.word	0x20000484
 80047c0:	20000020 	.word	0x20000020
 80047c4:	200005a4 	.word	0x200005a4
 80047c8:	20000590 	.word	0x20000590
 80047cc:	20000588 	.word	0x20000588

080047d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047d4:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <vTaskSuspendAll+0x14>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	4b02      	ldr	r3, [pc, #8]	; (80047e4 <vTaskSuspendAll+0x14>)
 80047dc:	601a      	str	r2, [r3, #0]
}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	200005ac 	.word	0x200005ac

080047e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047f6:	4b3a      	ldr	r3, [pc, #232]	; (80048e0 <xTaskResumeAll+0xf8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <xTaskResumeAll+0x1a>
 80047fe:	b672      	cpsid	i
 8004800:	e7fe      	b.n	8004800 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004802:	f000 fcad 	bl	8005160 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004806:	4b36      	ldr	r3, [pc, #216]	; (80048e0 <xTaskResumeAll+0xf8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	1e5a      	subs	r2, r3, #1
 800480c:	4b34      	ldr	r3, [pc, #208]	; (80048e0 <xTaskResumeAll+0xf8>)
 800480e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004810:	4b33      	ldr	r3, [pc, #204]	; (80048e0 <xTaskResumeAll+0xf8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d15b      	bne.n	80048d0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004818:	4b32      	ldr	r3, [pc, #200]	; (80048e4 <xTaskResumeAll+0xfc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d057      	beq.n	80048d0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004820:	e02f      	b.n	8004882 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004822:	4b31      	ldr	r3, [pc, #196]	; (80048e8 <xTaskResumeAll+0x100>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3318      	adds	r3, #24
 800482e:	0018      	movs	r0, r3
 8004830:	f7ff fa17 	bl	8003c62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3304      	adds	r3, #4
 8004838:	0018      	movs	r0, r3
 800483a:	f7ff fa12 	bl	8003c62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004842:	4b2a      	ldr	r3, [pc, #168]	; (80048ec <xTaskResumeAll+0x104>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d903      	bls.n	8004852 <xTaskResumeAll+0x6a>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	4b27      	ldr	r3, [pc, #156]	; (80048ec <xTaskResumeAll+0x104>)
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004856:	0013      	movs	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	189b      	adds	r3, r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4a24      	ldr	r2, [pc, #144]	; (80048f0 <xTaskResumeAll+0x108>)
 8004860:	189a      	adds	r2, r3, r2
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3304      	adds	r3, #4
 8004866:	0019      	movs	r1, r3
 8004868:	0010      	movs	r0, r2
 800486a:	f7ff f9a2 	bl	8003bb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004872:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <xTaskResumeAll+0x10c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	429a      	cmp	r2, r3
 800487a:	d302      	bcc.n	8004882 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800487c:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <xTaskResumeAll+0x110>)
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004882:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <xTaskResumeAll+0x100>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1cb      	bne.n	8004822 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004890:	f000 fadc 	bl	8004e4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <xTaskResumeAll+0x114>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00f      	beq.n	80048c0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048a0:	f000 f82e 	bl	8004900 <xTaskIncrementTick>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d002      	beq.n	80048ae <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <xTaskResumeAll+0x110>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f2      	bne.n	80048a0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <xTaskResumeAll+0x114>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <xTaskResumeAll+0x110>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048c8:	2301      	movs	r3, #1
 80048ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048cc:	f000 fc38 	bl	8005140 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048d0:	f000 fc58 	bl	8005184 <vPortExitCritical>

	return xAlreadyYielded;
 80048d4:	68bb      	ldr	r3, [r7, #8]
}
 80048d6:	0018      	movs	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	b004      	add	sp, #16
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	200005ac 	.word	0x200005ac
 80048e4:	20000584 	.word	0x20000584
 80048e8:	20000544 	.word	0x20000544
 80048ec:	2000058c 	.word	0x2000058c
 80048f0:	20000488 	.word	0x20000488
 80048f4:	20000484 	.word	0x20000484
 80048f8:	20000598 	.word	0x20000598
 80048fc:	20000594 	.word	0x20000594

08004900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800490a:	4b4c      	ldr	r3, [pc, #304]	; (8004a3c <xTaskIncrementTick+0x13c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d000      	beq.n	8004914 <xTaskIncrementTick+0x14>
 8004912:	e083      	b.n	8004a1c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004914:	4b4a      	ldr	r3, [pc, #296]	; (8004a40 <xTaskIncrementTick+0x140>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800491c:	4b48      	ldr	r3, [pc, #288]	; (8004a40 <xTaskIncrementTick+0x140>)
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d117      	bne.n	8004958 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004928:	4b46      	ldr	r3, [pc, #280]	; (8004a44 <xTaskIncrementTick+0x144>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <xTaskIncrementTick+0x36>
 8004932:	b672      	cpsid	i
 8004934:	e7fe      	b.n	8004934 <xTaskIncrementTick+0x34>
 8004936:	4b43      	ldr	r3, [pc, #268]	; (8004a44 <xTaskIncrementTick+0x144>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	4b42      	ldr	r3, [pc, #264]	; (8004a48 <xTaskIncrementTick+0x148>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b40      	ldr	r3, [pc, #256]	; (8004a44 <xTaskIncrementTick+0x144>)
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	4b40      	ldr	r3, [pc, #256]	; (8004a48 <xTaskIncrementTick+0x148>)
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	4b40      	ldr	r3, [pc, #256]	; (8004a4c <xTaskIncrementTick+0x14c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	4b3e      	ldr	r3, [pc, #248]	; (8004a4c <xTaskIncrementTick+0x14c>)
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	f000 fa7a 	bl	8004e4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004958:	4b3d      	ldr	r3, [pc, #244]	; (8004a50 <xTaskIncrementTick+0x150>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	429a      	cmp	r2, r3
 8004960:	d34e      	bcc.n	8004a00 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004962:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <xTaskIncrementTick+0x144>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <xTaskIncrementTick+0x70>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <xTaskIncrementTick+0x72>
 8004970:	2300      	movs	r3, #0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d004      	beq.n	8004980 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004976:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <xTaskIncrementTick+0x150>)
 8004978:	2201      	movs	r2, #1
 800497a:	4252      	negs	r2, r2
 800497c:	601a      	str	r2, [r3, #0]
					break;
 800497e:	e03f      	b.n	8004a00 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004980:	4b30      	ldr	r3, [pc, #192]	; (8004a44 <xTaskIncrementTick+0x144>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d203      	bcs.n	80049a0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004998:	4b2d      	ldr	r3, [pc, #180]	; (8004a50 <xTaskIncrementTick+0x150>)
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	601a      	str	r2, [r3, #0]
						break;
 800499e:	e02f      	b.n	8004a00 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	3304      	adds	r3, #4
 80049a4:	0018      	movs	r0, r3
 80049a6:	f7ff f95c 	bl	8003c62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d004      	beq.n	80049bc <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3318      	adds	r3, #24
 80049b6:	0018      	movs	r0, r3
 80049b8:	f7ff f953 	bl	8003c62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c0:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <xTaskIncrementTick+0x154>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d903      	bls.n	80049d0 <xTaskIncrementTick+0xd0>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049cc:	4b21      	ldr	r3, [pc, #132]	; (8004a54 <xTaskIncrementTick+0x154>)
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	0013      	movs	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	189b      	adds	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <xTaskIncrementTick+0x158>)
 80049de:	189a      	adds	r2, r3, r2
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	3304      	adds	r3, #4
 80049e4:	0019      	movs	r1, r3
 80049e6:	0010      	movs	r0, r2
 80049e8:	f7ff f8e3 	bl	8003bb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f0:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <xTaskIncrementTick+0x15c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d3b3      	bcc.n	8004962 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80049fa:	2301      	movs	r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049fe:	e7b0      	b.n	8004962 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a00:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <xTaskIncrementTick+0x15c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a06:	4914      	ldr	r1, [pc, #80]	; (8004a58 <xTaskIncrementTick+0x158>)
 8004a08:	0013      	movs	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	189b      	adds	r3, r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	585b      	ldr	r3, [r3, r1]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d907      	bls.n	8004a26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004a16:	2301      	movs	r3, #1
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	e004      	b.n	8004a26 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a1c:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <xTaskIncrementTick+0x160>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <xTaskIncrementTick+0x160>)
 8004a24:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a26:	4b0f      	ldr	r3, [pc, #60]	; (8004a64 <xTaskIncrementTick+0x164>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a32:	697b      	ldr	r3, [r7, #20]
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b006      	add	sp, #24
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	200005ac 	.word	0x200005ac
 8004a40:	20000588 	.word	0x20000588
 8004a44:	2000053c 	.word	0x2000053c
 8004a48:	20000540 	.word	0x20000540
 8004a4c:	2000059c 	.word	0x2000059c
 8004a50:	200005a4 	.word	0x200005a4
 8004a54:	2000058c 	.word	0x2000058c
 8004a58:	20000488 	.word	0x20000488
 8004a5c:	20000484 	.word	0x20000484
 8004a60:	20000594 	.word	0x20000594
 8004a64:	20000598 	.word	0x20000598

08004a68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a6e:	4b25      	ldr	r3, [pc, #148]	; (8004b04 <vTaskSwitchContext+0x9c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a76:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <vTaskSwitchContext+0xa0>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a7c:	e03d      	b.n	8004afa <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8004a7e:	4b22      	ldr	r3, [pc, #136]	; (8004b08 <vTaskSwitchContext+0xa0>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a84:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <vTaskSwitchContext+0xa4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	607b      	str	r3, [r7, #4]
 8004a8a:	e007      	b.n	8004a9c <vTaskSwitchContext+0x34>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <vTaskSwitchContext+0x2e>
 8004a92:	b672      	cpsid	i
 8004a94:	e7fe      	b.n	8004a94 <vTaskSwitchContext+0x2c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	607b      	str	r3, [r7, #4]
 8004a9c:	491c      	ldr	r1, [pc, #112]	; (8004b10 <vTaskSwitchContext+0xa8>)
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	0013      	movs	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	189b      	adds	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	585b      	ldr	r3, [r3, r1]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0ee      	beq.n	8004a8c <vTaskSwitchContext+0x24>
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	0013      	movs	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	189b      	adds	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <vTaskSwitchContext+0xa8>)
 8004aba:	189b      	adds	r3, r3, r2
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	605a      	str	r2, [r3, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	3308      	adds	r3, #8
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d104      	bne.n	8004ade <vTaskSwitchContext+0x76>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <vTaskSwitchContext+0xac>)
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <vTaskSwitchContext+0xa4>)
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004aee:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <vTaskSwitchContext+0xac>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	334c      	adds	r3, #76	; 0x4c
 8004af4:	001a      	movs	r2, r3
 8004af6:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <vTaskSwitchContext+0xb0>)
 8004af8:	601a      	str	r2, [r3, #0]
}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b002      	add	sp, #8
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	200005ac 	.word	0x200005ac
 8004b08:	20000598 	.word	0x20000598
 8004b0c:	2000058c 	.word	0x2000058c
 8004b10:	20000488 	.word	0x20000488
 8004b14:	20000484 	.word	0x20000484
 8004b18:	20000020 	.word	0x20000020

08004b1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <vTaskPlaceOnEventList+0x14>
 8004b2c:	b672      	cpsid	i
 8004b2e:	e7fe      	b.n	8004b2e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <vTaskPlaceOnEventList+0x38>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3318      	adds	r3, #24
 8004b36:	001a      	movs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	0011      	movs	r1, r2
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f7ff f85a 	bl	8003bf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2101      	movs	r1, #1
 8004b46:	0018      	movs	r0, r3
 8004b48:	f000 fa1c 	bl	8004f84 <prvAddCurrentTaskToDelayedList>
}
 8004b4c:	46c0      	nop			; (mov r8, r8)
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000484 	.word	0x20000484

08004b58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <xTaskRemoveFromEventList+0x1a>
 8004b6e:	b672      	cpsid	i
 8004b70:	e7fe      	b.n	8004b70 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	3318      	adds	r3, #24
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7ff f873 	bl	8003c62 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b7c:	4b1e      	ldr	r3, [pc, #120]	; (8004bf8 <xTaskRemoveFromEventList+0xa0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d11d      	bne.n	8004bc0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	3304      	adds	r3, #4
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7ff f86a 	bl	8003c62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <xTaskRemoveFromEventList+0xa4>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d903      	bls.n	8004ba2 <xTaskRemoveFromEventList+0x4a>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9e:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <xTaskRemoveFromEventList+0xa4>)
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba6:	0013      	movs	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <xTaskRemoveFromEventList+0xa8>)
 8004bb0:	189a      	adds	r2, r3, r2
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	0010      	movs	r0, r2
 8004bba:	f7fe fffa 	bl	8003bb2 <vListInsertEnd>
 8004bbe:	e007      	b.n	8004bd0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	3318      	adds	r3, #24
 8004bc4:	001a      	movs	r2, r3
 8004bc6:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <xTaskRemoveFromEventList+0xac>)
 8004bc8:	0011      	movs	r1, r2
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f7fe fff1 	bl	8003bb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <xTaskRemoveFromEventList+0xb0>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d905      	bls.n	8004bea <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bde:	2301      	movs	r3, #1
 8004be0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <xTaskRemoveFromEventList+0xb4>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	e001      	b.n	8004bee <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004bee:	68fb      	ldr	r3, [r7, #12]
}
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b004      	add	sp, #16
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	200005ac 	.word	0x200005ac
 8004bfc:	2000058c 	.word	0x2000058c
 8004c00:	20000488 	.word	0x20000488
 8004c04:	20000544 	.word	0x20000544
 8004c08:	20000484 	.word	0x20000484
 8004c0c:	20000598 	.word	0x20000598

08004c10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <vTaskInternalSetTimeOutState+0x20>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <vTaskInternalSetTimeOutState+0x24>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	605a      	str	r2, [r3, #4]
}
 8004c28:	46c0      	nop			; (mov r8, r8)
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b002      	add	sp, #8
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	2000059c 	.word	0x2000059c
 8004c34:	20000588 	.word	0x20000588

08004c38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <xTaskCheckForTimeOut+0x14>
 8004c48:	b672      	cpsid	i
 8004c4a:	e7fe      	b.n	8004c4a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <xTaskCheckForTimeOut+0x1e>
 8004c52:	b672      	cpsid	i
 8004c54:	e7fe      	b.n	8004c54 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004c56:	f000 fa83 	bl	8005160 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c5a:	4b1d      	ldr	r3, [pc, #116]	; (8004cd0 <xTaskCheckForTimeOut+0x98>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	d102      	bne.n	8004c78 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	e024      	b.n	8004cc2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <xTaskCheckForTimeOut+0x9c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d007      	beq.n	8004c94 <xTaskCheckForTimeOut+0x5c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d302      	bcc.n	8004c94 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	e016      	b.n	8004cc2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d20c      	bcs.n	8004cb8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad2      	subs	r2, r2, r3
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7ff ffaf 	bl	8004c10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e004      	b.n	8004cc2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004cc2:	f000 fa5f 	bl	8005184 <vPortExitCritical>

	return xReturn;
 8004cc6:	697b      	ldr	r3, [r7, #20]
}
 8004cc8:	0018      	movs	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	b006      	add	sp, #24
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000588 	.word	0x20000588
 8004cd4:	2000059c 	.word	0x2000059c

08004cd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cdc:	4b02      	ldr	r3, [pc, #8]	; (8004ce8 <vTaskMissedYield+0x10>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]
}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000598 	.word	0x20000598

08004cec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cf4:	f000 f84e 	bl	8004d94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <prvIdleTask+0x1c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d9f9      	bls.n	8004cf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d00:	f000 fa1e 	bl	8005140 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004d04:	e7f6      	b.n	8004cf4 <prvIdleTask+0x8>
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	20000488 	.word	0x20000488

08004d0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d12:	2300      	movs	r3, #0
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	e00c      	b.n	8004d32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	0013      	movs	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	189b      	adds	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4a14      	ldr	r2, [pc, #80]	; (8004d74 <prvInitialiseTaskLists+0x68>)
 8004d24:	189b      	adds	r3, r3, r2
 8004d26:	0018      	movs	r0, r3
 8004d28:	f7fe ff1a 	bl	8003b60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b06      	cmp	r3, #6
 8004d36:	d9ef      	bls.n	8004d18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <prvInitialiseTaskLists+0x6c>)
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f7fe ff10 	bl	8003b60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d40:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <prvInitialiseTaskLists+0x70>)
 8004d42:	0018      	movs	r0, r3
 8004d44:	f7fe ff0c 	bl	8003b60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d48:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <prvInitialiseTaskLists+0x74>)
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f7fe ff08 	bl	8003b60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <prvInitialiseTaskLists+0x78>)
 8004d52:	0018      	movs	r0, r3
 8004d54:	f7fe ff04 	bl	8003b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <prvInitialiseTaskLists+0x7c>)
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7fe ff00 	bl	8003b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <prvInitialiseTaskLists+0x80>)
 8004d62:	4a05      	ldr	r2, [pc, #20]	; (8004d78 <prvInitialiseTaskLists+0x6c>)
 8004d64:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d66:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <prvInitialiseTaskLists+0x84>)
 8004d68:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <prvInitialiseTaskLists+0x70>)
 8004d6a:	601a      	str	r2, [r3, #0]
}
 8004d6c:	46c0      	nop			; (mov r8, r8)
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	b002      	add	sp, #8
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000488 	.word	0x20000488
 8004d78:	20000514 	.word	0x20000514
 8004d7c:	20000528 	.word	0x20000528
 8004d80:	20000544 	.word	0x20000544
 8004d84:	20000558 	.word	0x20000558
 8004d88:	20000570 	.word	0x20000570
 8004d8c:	2000053c 	.word	0x2000053c
 8004d90:	20000540 	.word	0x20000540

08004d94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d9a:	e01a      	b.n	8004dd2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004d9c:	f000 f9e0 	bl	8005160 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <prvCheckTasksWaitingTermination+0x50>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	0018      	movs	r0, r3
 8004dae:	f7fe ff58 	bl	8003c62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004db2:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <prvCheckTasksWaitingTermination+0x54>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	1e5a      	subs	r2, r3, #1
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <prvCheckTasksWaitingTermination+0x54>)
 8004dba:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <prvCheckTasksWaitingTermination+0x58>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	1e5a      	subs	r2, r3, #1
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <prvCheckTasksWaitingTermination+0x58>)
 8004dc4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004dc6:	f000 f9dd 	bl	8005184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f000 f80f 	bl	8004df0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dd2:	4b06      	ldr	r3, [pc, #24]	; (8004dec <prvCheckTasksWaitingTermination+0x58>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e0      	bne.n	8004d9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46c0      	nop			; (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b002      	add	sp, #8
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000558 	.word	0x20000558
 8004de8:	20000584 	.word	0x20000584
 8004dec:	2000056c 	.word	0x2000056c

08004df0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	334c      	adds	r3, #76	; 0x4c
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f000 fded 	bl	80059dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	22b1      	movs	r2, #177	; 0xb1
 8004e06:	5c9b      	ldrb	r3, [r3, r2]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d109      	bne.n	8004e20 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	0018      	movs	r0, r3
 8004e12:	f000 fae3 	bl	80053dc <vPortFree>
				vPortFree( pxTCB );
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f000 fadf 	bl	80053dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e1e:	e010      	b.n	8004e42 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	22b1      	movs	r2, #177	; 0xb1
 8004e24:	5c9b      	ldrb	r3, [r3, r2]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d104      	bne.n	8004e34 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f000 fad5 	bl	80053dc <vPortFree>
	}
 8004e32:	e006      	b.n	8004e42 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	22b1      	movs	r2, #177	; 0xb1
 8004e38:	5c9b      	ldrb	r3, [r3, r2]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d001      	beq.n	8004e42 <prvDeleteTCB+0x52>
 8004e3e:	b672      	cpsid	i
 8004e40:	e7fe      	b.n	8004e40 <prvDeleteTCB+0x50>
	}
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b002      	add	sp, #8
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e52:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <prvResetNextTaskUnblockTime+0x40>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <prvResetNextTaskUnblockTime+0x14>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <prvResetNextTaskUnblockTime+0x16>
 8004e60:	2300      	movs	r3, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e66:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <prvResetNextTaskUnblockTime+0x44>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4252      	negs	r2, r2
 8004e6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e6e:	e008      	b.n	8004e82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <prvResetNextTaskUnblockTime+0x40>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <prvResetNextTaskUnblockTime+0x44>)
 8004e80:	601a      	str	r2, [r3, #0]
}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b002      	add	sp, #8
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	2000053c 	.word	0x2000053c
 8004e90:	200005a4 	.word	0x200005a4

08004e94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <xTaskGetSchedulerState+0x30>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	e008      	b.n	8004eba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <xTaskGetSchedulerState+0x34>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	607b      	str	r3, [r7, #4]
 8004eb4:	e001      	b.n	8004eba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004eba:	687b      	ldr	r3, [r7, #4]
	}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b002      	add	sp, #8
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000590 	.word	0x20000590
 8004ec8:	200005ac 	.word	0x200005ac

08004ecc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d044      	beq.n	8004f6c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ee2:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <xTaskPriorityDisinherit+0xac>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d001      	beq.n	8004ef0 <xTaskPriorityDisinherit+0x24>
 8004eec:	b672      	cpsid	i
 8004eee:	e7fe      	b.n	8004eee <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <xTaskPriorityDisinherit+0x30>
 8004ef8:	b672      	cpsid	i
 8004efa:	e7fe      	b.n	8004efa <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f00:	1e5a      	subs	r2, r3, #1
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d02c      	beq.n	8004f6c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d128      	bne.n	8004f6c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f7fe fe9f 	bl	8003c62 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	2207      	movs	r2, #7
 8004f32:	1ad2      	subs	r2, r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <xTaskPriorityDisinherit+0xb0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d903      	bls.n	8004f4c <xTaskPriorityDisinherit+0x80>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <xTaskPriorityDisinherit+0xb0>)
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	0013      	movs	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	189b      	adds	r3, r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <xTaskPriorityDisinherit+0xb4>)
 8004f5a:	189a      	adds	r2, r3, r2
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	0019      	movs	r1, r3
 8004f62:	0010      	movs	r0, r2
 8004f64:	f7fe fe25 	bl	8003bb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
	}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b004      	add	sp, #16
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	20000484 	.word	0x20000484
 8004f7c:	2000058c 	.word	0x2000058c
 8004f80:	20000488 	.word	0x20000488

08004f84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f8e:	4b21      	ldr	r3, [pc, #132]	; (8005014 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f94:	4b20      	ldr	r3, [pc, #128]	; (8005018 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f7fe fe61 	bl	8003c62 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	d10b      	bne.n	8004fbe <prvAddCurrentTaskToDelayedList+0x3a>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	1d1a      	adds	r2, r3, #4
 8004fb2:	4b1a      	ldr	r3, [pc, #104]	; (800501c <prvAddCurrentTaskToDelayedList+0x98>)
 8004fb4:	0011      	movs	r1, r2
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f7fe fdfb 	bl	8003bb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fbc:	e026      	b.n	800500c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	18d3      	adds	r3, r2, r3
 8004fc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d209      	bcs.n	8004fea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fd6:	4b12      	ldr	r3, [pc, #72]	; (8005020 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	0010      	movs	r0, r2
 8004fe4:	f7fe fe07 	bl	8003bf6 <vListInsert>
}
 8004fe8:	e010      	b.n	800500c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fea:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	0019      	movs	r1, r3
 8004ff6:	0010      	movs	r0, r2
 8004ff8:	f7fe fdfd 	bl	8003bf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	429a      	cmp	r2, r3
 8005004:	d202      	bcs.n	800500c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	601a      	str	r2, [r3, #0]
}
 800500c:	46c0      	nop			; (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	b004      	add	sp, #16
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20000588 	.word	0x20000588
 8005018:	20000484 	.word	0x20000484
 800501c:	20000570 	.word	0x20000570
 8005020:	20000540 	.word	0x20000540
 8005024:	2000053c 	.word	0x2000053c
 8005028:	200005a4 	.word	0x200005a4

0800502c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3b04      	subs	r3, #4
 800503c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2280      	movs	r2, #128	; 0x80
 8005042:	0452      	lsls	r2, r2, #17
 8005044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3b04      	subs	r3, #4
 800504a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3b04      	subs	r3, #4
 8005056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005058:	4a08      	ldr	r2, [pc, #32]	; (800507c <pxPortInitialiseStack+0x50>)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3b14      	subs	r3, #20
 8005062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3b20      	subs	r3, #32
 800506e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005070:	68fb      	ldr	r3, [r7, #12]
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b004      	add	sp, #16
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	08005081 	.word	0x08005081

08005080 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005086:	2300      	movs	r3, #0
 8005088:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800508a:	4b08      	ldr	r3, [pc, #32]	; (80050ac <prvTaskExitError+0x2c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3301      	adds	r3, #1
 8005090:	d001      	beq.n	8005096 <prvTaskExitError+0x16>
 8005092:	b672      	cpsid	i
 8005094:	e7fe      	b.n	8005094 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005096:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005098:	46c0      	nop			; (mov r8, r8)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0fc      	beq.n	800509a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050a0:	46c0      	nop			; (mov r8, r8)
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b002      	add	sp, #8
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	2000001c 	.word	0x2000001c

080050b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	0000      	movs	r0, r0
 80050bc:	0000      	movs	r0, r0
	...

080050c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80050c0:	4a0b      	ldr	r2, [pc, #44]	; (80050f0 <pxCurrentTCBConst2>)
 80050c2:	6813      	ldr	r3, [r2, #0]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	3020      	adds	r0, #32
 80050c8:	f380 8809 	msr	PSP, r0
 80050cc:	2002      	movs	r0, #2
 80050ce:	f380 8814 	msr	CONTROL, r0
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80050d8:	46ae      	mov	lr, r5
 80050da:	bc08      	pop	{r3}
 80050dc:	bc04      	pop	{r2}
 80050de:	b662      	cpsie	i
 80050e0:	4718      	bx	r3
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	46c0      	nop			; (mov r8, r8)
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	46c0      	nop			; (mov r8, r8)

080050f0 <pxCurrentTCBConst2>:
 80050f0:	20000484 	.word	0x20000484
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80050f4:	46c0      	nop			; (mov r8, r8)
 80050f6:	46c0      	nop			; (mov r8, r8)

080050f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80050fc:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <xPortStartScheduler+0x40>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <xPortStartScheduler+0x40>)
 8005102:	21ff      	movs	r1, #255	; 0xff
 8005104:	0409      	lsls	r1, r1, #16
 8005106:	430a      	orrs	r2, r1
 8005108:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <xPortStartScheduler+0x40>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <xPortStartScheduler+0x40>)
 8005110:	21ff      	movs	r1, #255	; 0xff
 8005112:	0609      	lsls	r1, r1, #24
 8005114:	430a      	orrs	r2, r1
 8005116:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005118:	f000 f898 	bl	800524c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800511c:	4b07      	ldr	r3, [pc, #28]	; (800513c <xPortStartScheduler+0x44>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005122:	f7ff ffcd 	bl	80050c0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005126:	f7ff fc9f 	bl	8004a68 <vTaskSwitchContext>
	prvTaskExitError();
 800512a:	f7ff ffa9 	bl	8005080 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800512e:	2300      	movs	r3, #0
}
 8005130:	0018      	movs	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	e000ed20 	.word	0xe000ed20
 800513c:	2000001c 	.word	0x2000001c

08005140 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <vPortYield+0x1c>)
 8005146:	2280      	movs	r2, #128	; 0x80
 8005148:	0552      	lsls	r2, r2, #21
 800514a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800514c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005150:	f3bf 8f6f 	isb	sy
}
 8005154:	46c0      	nop			; (mov r8, r8)
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	e000ed04 	.word	0xe000ed04

08005160 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005164:	b672      	cpsid	i
    uxCriticalNesting++;
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <vPortEnterCritical+0x20>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	4b04      	ldr	r3, [pc, #16]	; (8005180 <vPortEnterCritical+0x20>)
 800516e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005170:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005174:	f3bf 8f6f 	isb	sy
}
 8005178:	46c0      	nop			; (mov r8, r8)
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	2000001c 	.word	0x2000001c

08005184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005188:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <vPortExitCritical+0x2c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <vPortExitCritical+0x10>
 8005190:	b672      	cpsid	i
 8005192:	e7fe      	b.n	8005192 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005194:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <vPortExitCritical+0x2c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	1e5a      	subs	r2, r3, #1
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <vPortExitCritical+0x2c>)
 800519c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800519e:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <vPortExitCritical+0x2c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d100      	bne.n	80051a8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80051a6:	b662      	cpsie	i
    }
}
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	2000001c 	.word	0x2000001c

080051b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80051b4:	f3ef 8010 	mrs	r0, PRIMASK
 80051b8:	b672      	cpsid	i
 80051ba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	0018      	movs	r0, r3

080051c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80051c0:	f380 8810 	msr	PRIMASK, r0
 80051c4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80051c6:	46c0      	nop			; (mov r8, r8)
	...

080051d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051d0:	f3ef 8009 	mrs	r0, PSP
 80051d4:	4b0e      	ldr	r3, [pc, #56]	; (8005210 <pxCurrentTCBConst>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	3820      	subs	r0, #32
 80051da:	6010      	str	r0, [r2, #0]
 80051dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80051de:	4644      	mov	r4, r8
 80051e0:	464d      	mov	r5, r9
 80051e2:	4656      	mov	r6, sl
 80051e4:	465f      	mov	r7, fp
 80051e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80051e8:	b508      	push	{r3, lr}
 80051ea:	b672      	cpsid	i
 80051ec:	f7ff fc3c 	bl	8004a68 <vTaskSwitchContext>
 80051f0:	b662      	cpsie	i
 80051f2:	bc0c      	pop	{r2, r3}
 80051f4:	6811      	ldr	r1, [r2, #0]
 80051f6:	6808      	ldr	r0, [r1, #0]
 80051f8:	3010      	adds	r0, #16
 80051fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80051fc:	46a0      	mov	r8, r4
 80051fe:	46a9      	mov	r9, r5
 8005200:	46b2      	mov	sl, r6
 8005202:	46bb      	mov	fp, r7
 8005204:	f380 8809 	msr	PSP, r0
 8005208:	3820      	subs	r0, #32
 800520a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800520c:	4718      	bx	r3
 800520e:	46c0      	nop			; (mov r8, r8)

08005210 <pxCurrentTCBConst>:
 8005210:	20000484 	.word	0x20000484
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005214:	46c0      	nop			; (mov r8, r8)
 8005216:	46c0      	nop			; (mov r8, r8)

08005218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800521e:	f7ff ffc9 	bl	80051b4 <ulSetInterruptMaskFromISR>
 8005222:	0003      	movs	r3, r0
 8005224:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005226:	f7ff fb6b 	bl	8004900 <xTaskIncrementTick>
 800522a:	1e03      	subs	r3, r0, #0
 800522c:	d003      	beq.n	8005236 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <SysTick_Handler+0x30>)
 8005230:	2280      	movs	r2, #128	; 0x80
 8005232:	0552      	lsls	r2, r2, #21
 8005234:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	0018      	movs	r0, r3
 800523a:	f7ff ffc1 	bl	80051c0 <vClearInterruptMaskFromISR>
}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	46bd      	mov	sp, r7
 8005242:	b002      	add	sp, #8
 8005244:	bd80      	pop	{r7, pc}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <prvSetupTimerInterrupt+0x34>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005256:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <prvSetupTimerInterrupt+0x38>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <prvSetupTimerInterrupt+0x3c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	22fa      	movs	r2, #250	; 0xfa
 8005262:	0091      	lsls	r1, r2, #2
 8005264:	0018      	movs	r0, r3
 8005266:	f7fa ff59 	bl	800011c <__udivsi3>
 800526a:	0003      	movs	r3, r0
 800526c:	001a      	movs	r2, r3
 800526e:	4b07      	ldr	r3, [pc, #28]	; (800528c <prvSetupTimerInterrupt+0x40>)
 8005270:	3a01      	subs	r2, #1
 8005272:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005274:	4b02      	ldr	r3, [pc, #8]	; (8005280 <prvSetupTimerInterrupt+0x34>)
 8005276:	2207      	movs	r2, #7
 8005278:	601a      	str	r2, [r3, #0]
}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	e000e010 	.word	0xe000e010
 8005284:	e000e018 	.word	0xe000e018
 8005288:	20000010 	.word	0x20000010
 800528c:	e000e014 	.word	0xe000e014

08005290 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800529c:	f7ff fa98 	bl	80047d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052a0:	4b49      	ldr	r3, [pc, #292]	; (80053c8 <pvPortMalloc+0x138>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052a8:	f000 f8e0 	bl	800546c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052ac:	4b47      	ldr	r3, [pc, #284]	; (80053cc <pvPortMalloc+0x13c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	4013      	ands	r3, r2
 80052b4:	d000      	beq.n	80052b8 <pvPortMalloc+0x28>
 80052b6:	e079      	b.n	80053ac <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d012      	beq.n	80052e4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80052be:	2208      	movs	r2, #8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	189b      	adds	r3, r3, r2
 80052c4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2207      	movs	r2, #7
 80052ca:	4013      	ands	r3, r2
 80052cc:	d00a      	beq.n	80052e4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2207      	movs	r2, #7
 80052d2:	4393      	bics	r3, r2
 80052d4:	3308      	adds	r3, #8
 80052d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2207      	movs	r2, #7
 80052dc:	4013      	ands	r3, r2
 80052de:	d001      	beq.n	80052e4 <pvPortMalloc+0x54>
 80052e0:	b672      	cpsid	i
 80052e2:	e7fe      	b.n	80052e2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d060      	beq.n	80053ac <pvPortMalloc+0x11c>
 80052ea:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <pvPortMalloc+0x140>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d85b      	bhi.n	80053ac <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052f4:	4b37      	ldr	r3, [pc, #220]	; (80053d4 <pvPortMalloc+0x144>)
 80052f6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80052f8:	4b36      	ldr	r3, [pc, #216]	; (80053d4 <pvPortMalloc+0x144>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052fe:	e004      	b.n	800530a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d903      	bls.n	800531c <pvPortMalloc+0x8c>
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1f1      	bne.n	8005300 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800531c:	4b2a      	ldr	r3, [pc, #168]	; (80053c8 <pvPortMalloc+0x138>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	429a      	cmp	r2, r3
 8005324:	d042      	beq.n	80053ac <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2208      	movs	r2, #8
 800532c:	189b      	adds	r3, r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	2308      	movs	r3, #8
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	429a      	cmp	r2, r3
 8005346:	d916      	bls.n	8005376 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	18d3      	adds	r3, r2, r3
 800534e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2207      	movs	r2, #7
 8005354:	4013      	ands	r3, r2
 8005356:	d001      	beq.n	800535c <pvPortMalloc+0xcc>
 8005358:	b672      	cpsid	i
 800535a:	e7fe      	b.n	800535a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	1ad2      	subs	r2, r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	0018      	movs	r0, r3
 8005372:	f000 f8db 	bl	800552c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005376:	4b16      	ldr	r3, [pc, #88]	; (80053d0 <pvPortMalloc+0x140>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <pvPortMalloc+0x140>)
 8005382:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005384:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <pvPortMalloc+0x140>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <pvPortMalloc+0x148>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d203      	bcs.n	8005398 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005390:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <pvPortMalloc+0x140>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b10      	ldr	r3, [pc, #64]	; (80053d8 <pvPortMalloc+0x148>)
 8005396:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <pvPortMalloc+0x13c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	431a      	orrs	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053ac:	f7ff fa1c 	bl	80047e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2207      	movs	r2, #7
 80053b4:	4013      	ands	r3, r2
 80053b6:	d001      	beq.n	80053bc <pvPortMalloc+0x12c>
 80053b8:	b672      	cpsid	i
 80053ba:	e7fe      	b.n	80053ba <pvPortMalloc+0x12a>
	return pvReturn;
 80053bc:	68fb      	ldr	r3, [r7, #12]
}
 80053be:	0018      	movs	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b006      	add	sp, #24
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	200011b8 	.word	0x200011b8
 80053cc:	200011c4 	.word	0x200011c4
 80053d0:	200011bc 	.word	0x200011bc
 80053d4:	200011b0 	.word	0x200011b0
 80053d8:	200011c0 	.word	0x200011c0

080053dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d035      	beq.n	800545a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053ee:	2308      	movs	r3, #8
 80053f0:	425b      	negs	r3, r3
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	18d3      	adds	r3, r2, r3
 80053f6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	4b18      	ldr	r3, [pc, #96]	; (8005464 <vPortFree+0x88>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4013      	ands	r3, r2
 8005406:	d101      	bne.n	800540c <vPortFree+0x30>
 8005408:	b672      	cpsid	i
 800540a:	e7fe      	b.n	800540a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <vPortFree+0x3c>
 8005414:	b672      	cpsid	i
 8005416:	e7fe      	b.n	8005416 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	4b11      	ldr	r3, [pc, #68]	; (8005464 <vPortFree+0x88>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4013      	ands	r3, r2
 8005422:	d01a      	beq.n	800545a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d116      	bne.n	800545a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <vPortFree+0x88>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	43db      	mvns	r3, r3
 8005436:	401a      	ands	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800543c:	f7ff f9c8 	bl	80047d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	4b08      	ldr	r3, [pc, #32]	; (8005468 <vPortFree+0x8c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	18d2      	adds	r2, r2, r3
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <vPortFree+0x8c>)
 800544c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	0018      	movs	r0, r3
 8005452:	f000 f86b 	bl	800552c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005456:	f7ff f9c7 	bl	80047e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	46bd      	mov	sp, r7
 800545e:	b004      	add	sp, #16
 8005460:	bd80      	pop	{r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	200011c4 	.word	0x200011c4
 8005468:	200011bc 	.word	0x200011bc

0800546c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005472:	23c0      	movs	r3, #192	; 0xc0
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005478:	4b26      	ldr	r3, [pc, #152]	; (8005514 <prvHeapInit+0xa8>)
 800547a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2207      	movs	r2, #7
 8005480:	4013      	ands	r3, r2
 8005482:	d00c      	beq.n	800549e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3307      	adds	r3, #7
 8005488:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2207      	movs	r2, #7
 800548e:	4393      	bics	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1ad2      	subs	r2, r2, r3
 8005498:	4b1e      	ldr	r3, [pc, #120]	; (8005514 <prvHeapInit+0xa8>)
 800549a:	18d3      	adds	r3, r2, r3
 800549c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054a2:	4b1d      	ldr	r3, [pc, #116]	; (8005518 <prvHeapInit+0xac>)
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054a8:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <prvHeapInit+0xac>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	18d3      	adds	r3, r2, r3
 80054b4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054b6:	2208      	movs	r2, #8
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2207      	movs	r2, #7
 80054c2:	4393      	bics	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4b14      	ldr	r3, [pc, #80]	; (800551c <prvHeapInit+0xb0>)
 80054ca:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80054cc:	4b13      	ldr	r3, [pc, #76]	; (800551c <prvHeapInit+0xb0>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2200      	movs	r2, #0
 80054d2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054d4:	4b11      	ldr	r3, [pc, #68]	; (800551c <prvHeapInit+0xb0>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	1ad2      	subs	r2, r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054ea:	4b0c      	ldr	r3, [pc, #48]	; (800551c <prvHeapInit+0xb0>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <prvHeapInit+0xb4>)
 80054f8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	4b09      	ldr	r3, [pc, #36]	; (8005524 <prvHeapInit+0xb8>)
 8005500:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005502:	4b09      	ldr	r3, [pc, #36]	; (8005528 <prvHeapInit+0xbc>)
 8005504:	2280      	movs	r2, #128	; 0x80
 8005506:	0612      	lsls	r2, r2, #24
 8005508:	601a      	str	r2, [r3, #0]
}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	46bd      	mov	sp, r7
 800550e:	b004      	add	sp, #16
 8005510:	bd80      	pop	{r7, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	200005b0 	.word	0x200005b0
 8005518:	200011b0 	.word	0x200011b0
 800551c:	200011b8 	.word	0x200011b8
 8005520:	200011c0 	.word	0x200011c0
 8005524:	200011bc 	.word	0x200011bc
 8005528:	200011c4 	.word	0x200011c4

0800552c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005534:	4b27      	ldr	r3, [pc, #156]	; (80055d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	e002      	b.n	8005540 <prvInsertBlockIntoFreeList+0x14>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	429a      	cmp	r2, r3
 8005548:	d8f7      	bhi.n	800553a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	18d3      	adds	r3, r2, r3
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	d108      	bne.n	800556e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	18d2      	adds	r2, r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	18d2      	adds	r2, r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d118      	bne.n	80055b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <prvInsertBlockIntoFreeList+0xac>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d00d      	beq.n	80055aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	18d2      	adds	r2, r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	e008      	b.n	80055bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <prvInsertBlockIntoFreeList+0xac>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e003      	b.n	80055bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d002      	beq.n	80055ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b004      	add	sp, #16
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	200011b0 	.word	0x200011b0
 80055d8:	200011b8 	.word	0x200011b8

080055dc <__errno>:
 80055dc:	4b01      	ldr	r3, [pc, #4]	; (80055e4 <__errno+0x8>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	4770      	bx	lr
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	20000020 	.word	0x20000020

080055e8 <std>:
 80055e8:	2300      	movs	r3, #0
 80055ea:	b510      	push	{r4, lr}
 80055ec:	0004      	movs	r4, r0
 80055ee:	6003      	str	r3, [r0, #0]
 80055f0:	6043      	str	r3, [r0, #4]
 80055f2:	6083      	str	r3, [r0, #8]
 80055f4:	8181      	strh	r1, [r0, #12]
 80055f6:	6643      	str	r3, [r0, #100]	; 0x64
 80055f8:	0019      	movs	r1, r3
 80055fa:	81c2      	strh	r2, [r0, #14]
 80055fc:	6103      	str	r3, [r0, #16]
 80055fe:	6143      	str	r3, [r0, #20]
 8005600:	6183      	str	r3, [r0, #24]
 8005602:	2208      	movs	r2, #8
 8005604:	305c      	adds	r0, #92	; 0x5c
 8005606:	f000 f921 	bl	800584c <memset>
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <std+0x38>)
 800560c:	6224      	str	r4, [r4, #32]
 800560e:	6263      	str	r3, [r4, #36]	; 0x24
 8005610:	4b04      	ldr	r3, [pc, #16]	; (8005624 <std+0x3c>)
 8005612:	62a3      	str	r3, [r4, #40]	; 0x28
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <std+0x40>)
 8005616:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005618:	4b04      	ldr	r3, [pc, #16]	; (800562c <std+0x44>)
 800561a:	6323      	str	r3, [r4, #48]	; 0x30
 800561c:	bd10      	pop	{r4, pc}
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	08005acd 	.word	0x08005acd
 8005624:	08005af5 	.word	0x08005af5
 8005628:	08005b2d 	.word	0x08005b2d
 800562c:	08005b59 	.word	0x08005b59

08005630 <_cleanup_r>:
 8005630:	b510      	push	{r4, lr}
 8005632:	4902      	ldr	r1, [pc, #8]	; (800563c <_cleanup_r+0xc>)
 8005634:	f000 f8ba 	bl	80057ac <_fwalk_reent>
 8005638:	bd10      	pop	{r4, pc}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	08005cc9 	.word	0x08005cc9

08005640 <__sfmoreglue>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	2568      	movs	r5, #104	; 0x68
 8005644:	1e4a      	subs	r2, r1, #1
 8005646:	4355      	muls	r5, r2
 8005648:	000e      	movs	r6, r1
 800564a:	0029      	movs	r1, r5
 800564c:	3174      	adds	r1, #116	; 0x74
 800564e:	f000 f927 	bl	80058a0 <_malloc_r>
 8005652:	1e04      	subs	r4, r0, #0
 8005654:	d008      	beq.n	8005668 <__sfmoreglue+0x28>
 8005656:	2100      	movs	r1, #0
 8005658:	002a      	movs	r2, r5
 800565a:	6001      	str	r1, [r0, #0]
 800565c:	6046      	str	r6, [r0, #4]
 800565e:	300c      	adds	r0, #12
 8005660:	60a0      	str	r0, [r4, #8]
 8005662:	3268      	adds	r2, #104	; 0x68
 8005664:	f000 f8f2 	bl	800584c <memset>
 8005668:	0020      	movs	r0, r4
 800566a:	bd70      	pop	{r4, r5, r6, pc}

0800566c <__sfp_lock_acquire>:
 800566c:	b510      	push	{r4, lr}
 800566e:	4802      	ldr	r0, [pc, #8]	; (8005678 <__sfp_lock_acquire+0xc>)
 8005670:	f000 f8e1 	bl	8005836 <__retarget_lock_acquire_recursive>
 8005674:	bd10      	pop	{r4, pc}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	200011c9 	.word	0x200011c9

0800567c <__sfp_lock_release>:
 800567c:	b510      	push	{r4, lr}
 800567e:	4802      	ldr	r0, [pc, #8]	; (8005688 <__sfp_lock_release+0xc>)
 8005680:	f000 f8da 	bl	8005838 <__retarget_lock_release_recursive>
 8005684:	bd10      	pop	{r4, pc}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	200011c9 	.word	0x200011c9

0800568c <__sinit_lock_acquire>:
 800568c:	b510      	push	{r4, lr}
 800568e:	4802      	ldr	r0, [pc, #8]	; (8005698 <__sinit_lock_acquire+0xc>)
 8005690:	f000 f8d1 	bl	8005836 <__retarget_lock_acquire_recursive>
 8005694:	bd10      	pop	{r4, pc}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	200011ca 	.word	0x200011ca

0800569c <__sinit_lock_release>:
 800569c:	b510      	push	{r4, lr}
 800569e:	4802      	ldr	r0, [pc, #8]	; (80056a8 <__sinit_lock_release+0xc>)
 80056a0:	f000 f8ca 	bl	8005838 <__retarget_lock_release_recursive>
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	200011ca 	.word	0x200011ca

080056ac <__sinit>:
 80056ac:	b513      	push	{r0, r1, r4, lr}
 80056ae:	0004      	movs	r4, r0
 80056b0:	f7ff ffec 	bl	800568c <__sinit_lock_acquire>
 80056b4:	69a3      	ldr	r3, [r4, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <__sinit+0x14>
 80056ba:	f7ff ffef 	bl	800569c <__sinit_lock_release>
 80056be:	bd13      	pop	{r0, r1, r4, pc}
 80056c0:	64a3      	str	r3, [r4, #72]	; 0x48
 80056c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80056c4:	6523      	str	r3, [r4, #80]	; 0x50
 80056c6:	4b13      	ldr	r3, [pc, #76]	; (8005714 <__sinit+0x68>)
 80056c8:	4a13      	ldr	r2, [pc, #76]	; (8005718 <__sinit+0x6c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d101      	bne.n	80056d8 <__sinit+0x2c>
 80056d4:	2301      	movs	r3, #1
 80056d6:	61a3      	str	r3, [r4, #24]
 80056d8:	0020      	movs	r0, r4
 80056da:	f000 f81f 	bl	800571c <__sfp>
 80056de:	6060      	str	r0, [r4, #4]
 80056e0:	0020      	movs	r0, r4
 80056e2:	f000 f81b 	bl	800571c <__sfp>
 80056e6:	60a0      	str	r0, [r4, #8]
 80056e8:	0020      	movs	r0, r4
 80056ea:	f000 f817 	bl	800571c <__sfp>
 80056ee:	2200      	movs	r2, #0
 80056f0:	2104      	movs	r1, #4
 80056f2:	60e0      	str	r0, [r4, #12]
 80056f4:	6860      	ldr	r0, [r4, #4]
 80056f6:	f7ff ff77 	bl	80055e8 <std>
 80056fa:	2201      	movs	r2, #1
 80056fc:	2109      	movs	r1, #9
 80056fe:	68a0      	ldr	r0, [r4, #8]
 8005700:	f7ff ff72 	bl	80055e8 <std>
 8005704:	2202      	movs	r2, #2
 8005706:	2112      	movs	r1, #18
 8005708:	68e0      	ldr	r0, [r4, #12]
 800570a:	f7ff ff6d 	bl	80055e8 <std>
 800570e:	2301      	movs	r3, #1
 8005710:	61a3      	str	r3, [r4, #24]
 8005712:	e7d2      	b.n	80056ba <__sinit+0xe>
 8005714:	080068dc 	.word	0x080068dc
 8005718:	08005631 	.word	0x08005631

0800571c <__sfp>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	0007      	movs	r7, r0
 8005720:	f7ff ffa4 	bl	800566c <__sfp_lock_acquire>
 8005724:	4b1f      	ldr	r3, [pc, #124]	; (80057a4 <__sfp+0x88>)
 8005726:	681e      	ldr	r6, [r3, #0]
 8005728:	69b3      	ldr	r3, [r6, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <__sfp+0x18>
 800572e:	0030      	movs	r0, r6
 8005730:	f7ff ffbc 	bl	80056ac <__sinit>
 8005734:	3648      	adds	r6, #72	; 0x48
 8005736:	68b4      	ldr	r4, [r6, #8]
 8005738:	6873      	ldr	r3, [r6, #4]
 800573a:	3b01      	subs	r3, #1
 800573c:	d504      	bpl.n	8005748 <__sfp+0x2c>
 800573e:	6833      	ldr	r3, [r6, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d022      	beq.n	800578a <__sfp+0x6e>
 8005744:	6836      	ldr	r6, [r6, #0]
 8005746:	e7f6      	b.n	8005736 <__sfp+0x1a>
 8005748:	220c      	movs	r2, #12
 800574a:	5ea5      	ldrsh	r5, [r4, r2]
 800574c:	2d00      	cmp	r5, #0
 800574e:	d11a      	bne.n	8005786 <__sfp+0x6a>
 8005750:	0020      	movs	r0, r4
 8005752:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <__sfp+0x8c>)
 8005754:	3058      	adds	r0, #88	; 0x58
 8005756:	60e3      	str	r3, [r4, #12]
 8005758:	6665      	str	r5, [r4, #100]	; 0x64
 800575a:	f000 f86b 	bl	8005834 <__retarget_lock_init_recursive>
 800575e:	f7ff ff8d 	bl	800567c <__sfp_lock_release>
 8005762:	0020      	movs	r0, r4
 8005764:	2208      	movs	r2, #8
 8005766:	0029      	movs	r1, r5
 8005768:	6025      	str	r5, [r4, #0]
 800576a:	60a5      	str	r5, [r4, #8]
 800576c:	6065      	str	r5, [r4, #4]
 800576e:	6125      	str	r5, [r4, #16]
 8005770:	6165      	str	r5, [r4, #20]
 8005772:	61a5      	str	r5, [r4, #24]
 8005774:	305c      	adds	r0, #92	; 0x5c
 8005776:	f000 f869 	bl	800584c <memset>
 800577a:	6365      	str	r5, [r4, #52]	; 0x34
 800577c:	63a5      	str	r5, [r4, #56]	; 0x38
 800577e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005780:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005782:	0020      	movs	r0, r4
 8005784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005786:	3468      	adds	r4, #104	; 0x68
 8005788:	e7d7      	b.n	800573a <__sfp+0x1e>
 800578a:	2104      	movs	r1, #4
 800578c:	0038      	movs	r0, r7
 800578e:	f7ff ff57 	bl	8005640 <__sfmoreglue>
 8005792:	1e04      	subs	r4, r0, #0
 8005794:	6030      	str	r0, [r6, #0]
 8005796:	d1d5      	bne.n	8005744 <__sfp+0x28>
 8005798:	f7ff ff70 	bl	800567c <__sfp_lock_release>
 800579c:	230c      	movs	r3, #12
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	e7ef      	b.n	8005782 <__sfp+0x66>
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	080068dc 	.word	0x080068dc
 80057a8:	ffff0001 	.word	0xffff0001

080057ac <_fwalk_reent>:
 80057ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ae:	0004      	movs	r4, r0
 80057b0:	0006      	movs	r6, r0
 80057b2:	2700      	movs	r7, #0
 80057b4:	9101      	str	r1, [sp, #4]
 80057b6:	3448      	adds	r4, #72	; 0x48
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	68a5      	ldr	r5, [r4, #8]
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	9b00      	ldr	r3, [sp, #0]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	d504      	bpl.n	80057d0 <_fwalk_reent+0x24>
 80057c6:	6824      	ldr	r4, [r4, #0]
 80057c8:	2c00      	cmp	r4, #0
 80057ca:	d1f5      	bne.n	80057b8 <_fwalk_reent+0xc>
 80057cc:	0038      	movs	r0, r7
 80057ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057d0:	89ab      	ldrh	r3, [r5, #12]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d908      	bls.n	80057e8 <_fwalk_reent+0x3c>
 80057d6:	220e      	movs	r2, #14
 80057d8:	5eab      	ldrsh	r3, [r5, r2]
 80057da:	3301      	adds	r3, #1
 80057dc:	d004      	beq.n	80057e8 <_fwalk_reent+0x3c>
 80057de:	0029      	movs	r1, r5
 80057e0:	0030      	movs	r0, r6
 80057e2:	9b01      	ldr	r3, [sp, #4]
 80057e4:	4798      	blx	r3
 80057e6:	4307      	orrs	r7, r0
 80057e8:	3568      	adds	r5, #104	; 0x68
 80057ea:	e7e8      	b.n	80057be <_fwalk_reent+0x12>

080057ec <__libc_init_array>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	2600      	movs	r6, #0
 80057f0:	4d0c      	ldr	r5, [pc, #48]	; (8005824 <__libc_init_array+0x38>)
 80057f2:	4c0d      	ldr	r4, [pc, #52]	; (8005828 <__libc_init_array+0x3c>)
 80057f4:	1b64      	subs	r4, r4, r5
 80057f6:	10a4      	asrs	r4, r4, #2
 80057f8:	42a6      	cmp	r6, r4
 80057fa:	d109      	bne.n	8005810 <__libc_init_array+0x24>
 80057fc:	2600      	movs	r6, #0
 80057fe:	f000 ff73 	bl	80066e8 <_init>
 8005802:	4d0a      	ldr	r5, [pc, #40]	; (800582c <__libc_init_array+0x40>)
 8005804:	4c0a      	ldr	r4, [pc, #40]	; (8005830 <__libc_init_array+0x44>)
 8005806:	1b64      	subs	r4, r4, r5
 8005808:	10a4      	asrs	r4, r4, #2
 800580a:	42a6      	cmp	r6, r4
 800580c:	d105      	bne.n	800581a <__libc_init_array+0x2e>
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	00b3      	lsls	r3, r6, #2
 8005812:	58eb      	ldr	r3, [r5, r3]
 8005814:	4798      	blx	r3
 8005816:	3601      	adds	r6, #1
 8005818:	e7ee      	b.n	80057f8 <__libc_init_array+0xc>
 800581a:	00b3      	lsls	r3, r6, #2
 800581c:	58eb      	ldr	r3, [r5, r3]
 800581e:	4798      	blx	r3
 8005820:	3601      	adds	r6, #1
 8005822:	e7f2      	b.n	800580a <__libc_init_array+0x1e>
 8005824:	08006914 	.word	0x08006914
 8005828:	08006914 	.word	0x08006914
 800582c:	08006914 	.word	0x08006914
 8005830:	08006918 	.word	0x08006918

08005834 <__retarget_lock_init_recursive>:
 8005834:	4770      	bx	lr

08005836 <__retarget_lock_acquire_recursive>:
 8005836:	4770      	bx	lr

08005838 <__retarget_lock_release_recursive>:
 8005838:	4770      	bx	lr

0800583a <memcpy>:
 800583a:	2300      	movs	r3, #0
 800583c:	b510      	push	{r4, lr}
 800583e:	429a      	cmp	r2, r3
 8005840:	d100      	bne.n	8005844 <memcpy+0xa>
 8005842:	bd10      	pop	{r4, pc}
 8005844:	5ccc      	ldrb	r4, [r1, r3]
 8005846:	54c4      	strb	r4, [r0, r3]
 8005848:	3301      	adds	r3, #1
 800584a:	e7f8      	b.n	800583e <memcpy+0x4>

0800584c <memset>:
 800584c:	0003      	movs	r3, r0
 800584e:	1882      	adds	r2, r0, r2
 8005850:	4293      	cmp	r3, r2
 8005852:	d100      	bne.n	8005856 <memset+0xa>
 8005854:	4770      	bx	lr
 8005856:	7019      	strb	r1, [r3, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	e7f9      	b.n	8005850 <memset+0x4>

0800585c <sbrk_aligned>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	4e0f      	ldr	r6, [pc, #60]	; (800589c <sbrk_aligned+0x40>)
 8005860:	000d      	movs	r5, r1
 8005862:	6831      	ldr	r1, [r6, #0]
 8005864:	0004      	movs	r4, r0
 8005866:	2900      	cmp	r1, #0
 8005868:	d102      	bne.n	8005870 <sbrk_aligned+0x14>
 800586a:	f000 f91d 	bl	8005aa8 <_sbrk_r>
 800586e:	6030      	str	r0, [r6, #0]
 8005870:	0029      	movs	r1, r5
 8005872:	0020      	movs	r0, r4
 8005874:	f000 f918 	bl	8005aa8 <_sbrk_r>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d00a      	beq.n	8005892 <sbrk_aligned+0x36>
 800587c:	2303      	movs	r3, #3
 800587e:	1cc5      	adds	r5, r0, #3
 8005880:	439d      	bics	r5, r3
 8005882:	42a8      	cmp	r0, r5
 8005884:	d007      	beq.n	8005896 <sbrk_aligned+0x3a>
 8005886:	1a29      	subs	r1, r5, r0
 8005888:	0020      	movs	r0, r4
 800588a:	f000 f90d 	bl	8005aa8 <_sbrk_r>
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	d101      	bne.n	8005896 <sbrk_aligned+0x3a>
 8005892:	2501      	movs	r5, #1
 8005894:	426d      	negs	r5, r5
 8005896:	0028      	movs	r0, r5
 8005898:	bd70      	pop	{r4, r5, r6, pc}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	200011d0 	.word	0x200011d0

080058a0 <_malloc_r>:
 80058a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058a2:	2203      	movs	r2, #3
 80058a4:	1ccb      	adds	r3, r1, #3
 80058a6:	4393      	bics	r3, r2
 80058a8:	3308      	adds	r3, #8
 80058aa:	0006      	movs	r6, r0
 80058ac:	001f      	movs	r7, r3
 80058ae:	2b0c      	cmp	r3, #12
 80058b0:	d232      	bcs.n	8005918 <_malloc_r+0x78>
 80058b2:	270c      	movs	r7, #12
 80058b4:	42b9      	cmp	r1, r7
 80058b6:	d831      	bhi.n	800591c <_malloc_r+0x7c>
 80058b8:	0030      	movs	r0, r6
 80058ba:	f000 fa59 	bl	8005d70 <__malloc_lock>
 80058be:	4d32      	ldr	r5, [pc, #200]	; (8005988 <_malloc_r+0xe8>)
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	001c      	movs	r4, r3
 80058c4:	2c00      	cmp	r4, #0
 80058c6:	d12e      	bne.n	8005926 <_malloc_r+0x86>
 80058c8:	0039      	movs	r1, r7
 80058ca:	0030      	movs	r0, r6
 80058cc:	f7ff ffc6 	bl	800585c <sbrk_aligned>
 80058d0:	0004      	movs	r4, r0
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	d11e      	bne.n	8005914 <_malloc_r+0x74>
 80058d6:	682c      	ldr	r4, [r5, #0]
 80058d8:	0025      	movs	r5, r4
 80058da:	2d00      	cmp	r5, #0
 80058dc:	d14a      	bne.n	8005974 <_malloc_r+0xd4>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	0029      	movs	r1, r5
 80058e2:	18e3      	adds	r3, r4, r3
 80058e4:	0030      	movs	r0, r6
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	f000 f8de 	bl	8005aa8 <_sbrk_r>
 80058ec:	9b01      	ldr	r3, [sp, #4]
 80058ee:	4283      	cmp	r3, r0
 80058f0:	d143      	bne.n	800597a <_malloc_r+0xda>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	3703      	adds	r7, #3
 80058f6:	1aff      	subs	r7, r7, r3
 80058f8:	2303      	movs	r3, #3
 80058fa:	439f      	bics	r7, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	2f0c      	cmp	r7, #12
 8005900:	d200      	bcs.n	8005904 <_malloc_r+0x64>
 8005902:	270c      	movs	r7, #12
 8005904:	0039      	movs	r1, r7
 8005906:	0030      	movs	r0, r6
 8005908:	f7ff ffa8 	bl	800585c <sbrk_aligned>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d034      	beq.n	800597a <_malloc_r+0xda>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	19df      	adds	r7, r3, r7
 8005914:	6027      	str	r7, [r4, #0]
 8005916:	e013      	b.n	8005940 <_malloc_r+0xa0>
 8005918:	2b00      	cmp	r3, #0
 800591a:	dacb      	bge.n	80058b4 <_malloc_r+0x14>
 800591c:	230c      	movs	r3, #12
 800591e:	2500      	movs	r5, #0
 8005920:	6033      	str	r3, [r6, #0]
 8005922:	0028      	movs	r0, r5
 8005924:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	1bd1      	subs	r1, r2, r7
 800592a:	d420      	bmi.n	800596e <_malloc_r+0xce>
 800592c:	290b      	cmp	r1, #11
 800592e:	d917      	bls.n	8005960 <_malloc_r+0xc0>
 8005930:	19e2      	adds	r2, r4, r7
 8005932:	6027      	str	r7, [r4, #0]
 8005934:	42a3      	cmp	r3, r4
 8005936:	d111      	bne.n	800595c <_malloc_r+0xbc>
 8005938:	602a      	str	r2, [r5, #0]
 800593a:	6863      	ldr	r3, [r4, #4]
 800593c:	6011      	str	r1, [r2, #0]
 800593e:	6053      	str	r3, [r2, #4]
 8005940:	0030      	movs	r0, r6
 8005942:	0025      	movs	r5, r4
 8005944:	f000 fa1c 	bl	8005d80 <__malloc_unlock>
 8005948:	2207      	movs	r2, #7
 800594a:	350b      	adds	r5, #11
 800594c:	1d23      	adds	r3, r4, #4
 800594e:	4395      	bics	r5, r2
 8005950:	1aea      	subs	r2, r5, r3
 8005952:	429d      	cmp	r5, r3
 8005954:	d0e5      	beq.n	8005922 <_malloc_r+0x82>
 8005956:	1b5b      	subs	r3, r3, r5
 8005958:	50a3      	str	r3, [r4, r2]
 800595a:	e7e2      	b.n	8005922 <_malloc_r+0x82>
 800595c:	605a      	str	r2, [r3, #4]
 800595e:	e7ec      	b.n	800593a <_malloc_r+0x9a>
 8005960:	6862      	ldr	r2, [r4, #4]
 8005962:	42a3      	cmp	r3, r4
 8005964:	d101      	bne.n	800596a <_malloc_r+0xca>
 8005966:	602a      	str	r2, [r5, #0]
 8005968:	e7ea      	b.n	8005940 <_malloc_r+0xa0>
 800596a:	605a      	str	r2, [r3, #4]
 800596c:	e7e8      	b.n	8005940 <_malloc_r+0xa0>
 800596e:	0023      	movs	r3, r4
 8005970:	6864      	ldr	r4, [r4, #4]
 8005972:	e7a7      	b.n	80058c4 <_malloc_r+0x24>
 8005974:	002c      	movs	r4, r5
 8005976:	686d      	ldr	r5, [r5, #4]
 8005978:	e7af      	b.n	80058da <_malloc_r+0x3a>
 800597a:	230c      	movs	r3, #12
 800597c:	0030      	movs	r0, r6
 800597e:	6033      	str	r3, [r6, #0]
 8005980:	f000 f9fe 	bl	8005d80 <__malloc_unlock>
 8005984:	e7cd      	b.n	8005922 <_malloc_r+0x82>
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	200011cc 	.word	0x200011cc

0800598c <iprintf>:
 800598c:	b40f      	push	{r0, r1, r2, r3}
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <iprintf+0x30>)
 8005990:	b513      	push	{r0, r1, r4, lr}
 8005992:	681c      	ldr	r4, [r3, #0]
 8005994:	2c00      	cmp	r4, #0
 8005996:	d005      	beq.n	80059a4 <iprintf+0x18>
 8005998:	69a3      	ldr	r3, [r4, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <iprintf+0x18>
 800599e:	0020      	movs	r0, r4
 80059a0:	f7ff fe84 	bl	80056ac <__sinit>
 80059a4:	ab05      	add	r3, sp, #20
 80059a6:	0020      	movs	r0, r4
 80059a8:	9a04      	ldr	r2, [sp, #16]
 80059aa:	68a1      	ldr	r1, [r4, #8]
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	f000 fa61 	bl	8005e74 <_vfiprintf_r>
 80059b2:	bc16      	pop	{r1, r2, r4}
 80059b4:	bc08      	pop	{r3}
 80059b6:	b004      	add	sp, #16
 80059b8:	4718      	bx	r3
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	20000020 	.word	0x20000020

080059c0 <cleanup_glue>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	000d      	movs	r5, r1
 80059c4:	6809      	ldr	r1, [r1, #0]
 80059c6:	0004      	movs	r4, r0
 80059c8:	2900      	cmp	r1, #0
 80059ca:	d001      	beq.n	80059d0 <cleanup_glue+0x10>
 80059cc:	f7ff fff8 	bl	80059c0 <cleanup_glue>
 80059d0:	0029      	movs	r1, r5
 80059d2:	0020      	movs	r0, r4
 80059d4:	f000 f9dc 	bl	8005d90 <_free_r>
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080059dc <_reclaim_reent>:
 80059dc:	4b31      	ldr	r3, [pc, #196]	; (8005aa4 <_reclaim_reent+0xc8>)
 80059de:	b570      	push	{r4, r5, r6, lr}
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	0004      	movs	r4, r0
 80059e4:	4283      	cmp	r3, r0
 80059e6:	d049      	beq.n	8005a7c <_reclaim_reent+0xa0>
 80059e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <_reclaim_reent+0x28>
 80059ee:	2500      	movs	r5, #0
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	42ab      	cmp	r3, r5
 80059f4:	d147      	bne.n	8005a86 <_reclaim_reent+0xaa>
 80059f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059f8:	6819      	ldr	r1, [r3, #0]
 80059fa:	2900      	cmp	r1, #0
 80059fc:	d002      	beq.n	8005a04 <_reclaim_reent+0x28>
 80059fe:	0020      	movs	r0, r4
 8005a00:	f000 f9c6 	bl	8005d90 <_free_r>
 8005a04:	6961      	ldr	r1, [r4, #20]
 8005a06:	2900      	cmp	r1, #0
 8005a08:	d002      	beq.n	8005a10 <_reclaim_reent+0x34>
 8005a0a:	0020      	movs	r0, r4
 8005a0c:	f000 f9c0 	bl	8005d90 <_free_r>
 8005a10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a12:	2900      	cmp	r1, #0
 8005a14:	d002      	beq.n	8005a1c <_reclaim_reent+0x40>
 8005a16:	0020      	movs	r0, r4
 8005a18:	f000 f9ba 	bl	8005d90 <_free_r>
 8005a1c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005a1e:	2900      	cmp	r1, #0
 8005a20:	d002      	beq.n	8005a28 <_reclaim_reent+0x4c>
 8005a22:	0020      	movs	r0, r4
 8005a24:	f000 f9b4 	bl	8005d90 <_free_r>
 8005a28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005a2a:	2900      	cmp	r1, #0
 8005a2c:	d002      	beq.n	8005a34 <_reclaim_reent+0x58>
 8005a2e:	0020      	movs	r0, r4
 8005a30:	f000 f9ae 	bl	8005d90 <_free_r>
 8005a34:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005a36:	2900      	cmp	r1, #0
 8005a38:	d002      	beq.n	8005a40 <_reclaim_reent+0x64>
 8005a3a:	0020      	movs	r0, r4
 8005a3c:	f000 f9a8 	bl	8005d90 <_free_r>
 8005a40:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005a42:	2900      	cmp	r1, #0
 8005a44:	d002      	beq.n	8005a4c <_reclaim_reent+0x70>
 8005a46:	0020      	movs	r0, r4
 8005a48:	f000 f9a2 	bl	8005d90 <_free_r>
 8005a4c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005a4e:	2900      	cmp	r1, #0
 8005a50:	d002      	beq.n	8005a58 <_reclaim_reent+0x7c>
 8005a52:	0020      	movs	r0, r4
 8005a54:	f000 f99c 	bl	8005d90 <_free_r>
 8005a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a5a:	2900      	cmp	r1, #0
 8005a5c:	d002      	beq.n	8005a64 <_reclaim_reent+0x88>
 8005a5e:	0020      	movs	r0, r4
 8005a60:	f000 f996 	bl	8005d90 <_free_r>
 8005a64:	69a3      	ldr	r3, [r4, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d008      	beq.n	8005a7c <_reclaim_reent+0xa0>
 8005a6a:	0020      	movs	r0, r4
 8005a6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a6e:	4798      	blx	r3
 8005a70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005a72:	2900      	cmp	r1, #0
 8005a74:	d002      	beq.n	8005a7c <_reclaim_reent+0xa0>
 8005a76:	0020      	movs	r0, r4
 8005a78:	f7ff ffa2 	bl	80059c0 <cleanup_glue>
 8005a7c:	bd70      	pop	{r4, r5, r6, pc}
 8005a7e:	5949      	ldr	r1, [r1, r5]
 8005a80:	2900      	cmp	r1, #0
 8005a82:	d108      	bne.n	8005a96 <_reclaim_reent+0xba>
 8005a84:	3504      	adds	r5, #4
 8005a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a88:	68d9      	ldr	r1, [r3, #12]
 8005a8a:	2d80      	cmp	r5, #128	; 0x80
 8005a8c:	d1f7      	bne.n	8005a7e <_reclaim_reent+0xa2>
 8005a8e:	0020      	movs	r0, r4
 8005a90:	f000 f97e 	bl	8005d90 <_free_r>
 8005a94:	e7af      	b.n	80059f6 <_reclaim_reent+0x1a>
 8005a96:	680e      	ldr	r6, [r1, #0]
 8005a98:	0020      	movs	r0, r4
 8005a9a:	f000 f979 	bl	8005d90 <_free_r>
 8005a9e:	0031      	movs	r1, r6
 8005aa0:	e7ee      	b.n	8005a80 <_reclaim_reent+0xa4>
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	20000020 	.word	0x20000020

08005aa8 <_sbrk_r>:
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	b570      	push	{r4, r5, r6, lr}
 8005aac:	4d06      	ldr	r5, [pc, #24]	; (8005ac8 <_sbrk_r+0x20>)
 8005aae:	0004      	movs	r4, r0
 8005ab0:	0008      	movs	r0, r1
 8005ab2:	602b      	str	r3, [r5, #0]
 8005ab4:	f7fb fb34 	bl	8001120 <_sbrk>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d103      	bne.n	8005ac4 <_sbrk_r+0x1c>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d000      	beq.n	8005ac4 <_sbrk_r+0x1c>
 8005ac2:	6023      	str	r3, [r4, #0]
 8005ac4:	bd70      	pop	{r4, r5, r6, pc}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	200011d4 	.word	0x200011d4

08005acc <__sread>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	000c      	movs	r4, r1
 8005ad0:	250e      	movs	r5, #14
 8005ad2:	5f49      	ldrsh	r1, [r1, r5]
 8005ad4:	f000 fc8a 	bl	80063ec <_read_r>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	db03      	blt.n	8005ae4 <__sread+0x18>
 8005adc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ade:	181b      	adds	r3, r3, r0
 8005ae0:	6563      	str	r3, [r4, #84]	; 0x54
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	4a02      	ldr	r2, [pc, #8]	; (8005af0 <__sread+0x24>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	81a3      	strh	r3, [r4, #12]
 8005aec:	e7f9      	b.n	8005ae2 <__sread+0x16>
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	ffffefff 	.word	0xffffefff

08005af4 <__swrite>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	001f      	movs	r7, r3
 8005af8:	898b      	ldrh	r3, [r1, #12]
 8005afa:	0005      	movs	r5, r0
 8005afc:	000c      	movs	r4, r1
 8005afe:	0016      	movs	r6, r2
 8005b00:	05db      	lsls	r3, r3, #23
 8005b02:	d505      	bpl.n	8005b10 <__swrite+0x1c>
 8005b04:	230e      	movs	r3, #14
 8005b06:	5ec9      	ldrsh	r1, [r1, r3]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	f000 f91c 	bl	8005d48 <_lseek_r>
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	4a05      	ldr	r2, [pc, #20]	; (8005b28 <__swrite+0x34>)
 8005b14:	0028      	movs	r0, r5
 8005b16:	4013      	ands	r3, r2
 8005b18:	81a3      	strh	r3, [r4, #12]
 8005b1a:	0032      	movs	r2, r6
 8005b1c:	230e      	movs	r3, #14
 8005b1e:	5ee1      	ldrsh	r1, [r4, r3]
 8005b20:	003b      	movs	r3, r7
 8005b22:	f000 f81f 	bl	8005b64 <_write_r>
 8005b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b28:	ffffefff 	.word	0xffffefff

08005b2c <__sseek>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	000c      	movs	r4, r1
 8005b30:	250e      	movs	r5, #14
 8005b32:	5f49      	ldrsh	r1, [r1, r5]
 8005b34:	f000 f908 	bl	8005d48 <_lseek_r>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	1c42      	adds	r2, r0, #1
 8005b3c:	d103      	bne.n	8005b46 <__sseek+0x1a>
 8005b3e:	4a05      	ldr	r2, [pc, #20]	; (8005b54 <__sseek+0x28>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	81a3      	strh	r3, [r4, #12]
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
 8005b46:	2280      	movs	r2, #128	; 0x80
 8005b48:	0152      	lsls	r2, r2, #5
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	81a3      	strh	r3, [r4, #12]
 8005b4e:	6560      	str	r0, [r4, #84]	; 0x54
 8005b50:	e7f8      	b.n	8005b44 <__sseek+0x18>
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	ffffefff 	.word	0xffffefff

08005b58 <__sclose>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	230e      	movs	r3, #14
 8005b5c:	5ec9      	ldrsh	r1, [r1, r3]
 8005b5e:	f000 f815 	bl	8005b8c <_close_r>
 8005b62:	bd10      	pop	{r4, pc}

08005b64 <_write_r>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	0004      	movs	r4, r0
 8005b68:	0008      	movs	r0, r1
 8005b6a:	0011      	movs	r1, r2
 8005b6c:	001a      	movs	r2, r3
 8005b6e:	2300      	movs	r3, #0
 8005b70:	4d05      	ldr	r5, [pc, #20]	; (8005b88 <_write_r+0x24>)
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	f7fa ff88 	bl	8000a88 <_write>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d103      	bne.n	8005b84 <_write_r+0x20>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d000      	beq.n	8005b84 <_write_r+0x20>
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	bd70      	pop	{r4, r5, r6, pc}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	200011d4 	.word	0x200011d4

08005b8c <_close_r>:
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	b570      	push	{r4, r5, r6, lr}
 8005b90:	4d06      	ldr	r5, [pc, #24]	; (8005bac <_close_r+0x20>)
 8005b92:	0004      	movs	r4, r0
 8005b94:	0008      	movs	r0, r1
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	f7fb fa95 	bl	80010c6 <_close>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d103      	bne.n	8005ba8 <_close_r+0x1c>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d000      	beq.n	8005ba8 <_close_r+0x1c>
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	bd70      	pop	{r4, r5, r6, pc}
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	200011d4 	.word	0x200011d4

08005bb0 <__sflush_r>:
 8005bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bb2:	898b      	ldrh	r3, [r1, #12]
 8005bb4:	0005      	movs	r5, r0
 8005bb6:	000c      	movs	r4, r1
 8005bb8:	071a      	lsls	r2, r3, #28
 8005bba:	d45f      	bmi.n	8005c7c <__sflush_r+0xcc>
 8005bbc:	684a      	ldr	r2, [r1, #4]
 8005bbe:	2a00      	cmp	r2, #0
 8005bc0:	dc04      	bgt.n	8005bcc <__sflush_r+0x1c>
 8005bc2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005bc4:	2a00      	cmp	r2, #0
 8005bc6:	dc01      	bgt.n	8005bcc <__sflush_r+0x1c>
 8005bc8:	2000      	movs	r0, #0
 8005bca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bcc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005bce:	2f00      	cmp	r7, #0
 8005bd0:	d0fa      	beq.n	8005bc8 <__sflush_r+0x18>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2180      	movs	r1, #128	; 0x80
 8005bd6:	682e      	ldr	r6, [r5, #0]
 8005bd8:	602a      	str	r2, [r5, #0]
 8005bda:	001a      	movs	r2, r3
 8005bdc:	0149      	lsls	r1, r1, #5
 8005bde:	400a      	ands	r2, r1
 8005be0:	420b      	tst	r3, r1
 8005be2:	d034      	beq.n	8005c4e <__sflush_r+0x9e>
 8005be4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	075b      	lsls	r3, r3, #29
 8005bea:	d506      	bpl.n	8005bfa <__sflush_r+0x4a>
 8005bec:	6863      	ldr	r3, [r4, #4]
 8005bee:	1ac0      	subs	r0, r0, r3
 8005bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <__sflush_r+0x4a>
 8005bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bf8:	1ac0      	subs	r0, r0, r3
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	6a21      	ldr	r1, [r4, #32]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	0028      	movs	r0, r5
 8005c02:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005c04:	47b8      	blx	r7
 8005c06:	89a1      	ldrh	r1, [r4, #12]
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	d106      	bne.n	8005c1a <__sflush_r+0x6a>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	2b1d      	cmp	r3, #29
 8005c10:	d831      	bhi.n	8005c76 <__sflush_r+0xc6>
 8005c12:	4a2c      	ldr	r2, [pc, #176]	; (8005cc4 <__sflush_r+0x114>)
 8005c14:	40da      	lsrs	r2, r3
 8005c16:	07d3      	lsls	r3, r2, #31
 8005c18:	d52d      	bpl.n	8005c76 <__sflush_r+0xc6>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6063      	str	r3, [r4, #4]
 8005c1e:	6923      	ldr	r3, [r4, #16]
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	04cb      	lsls	r3, r1, #19
 8005c24:	d505      	bpl.n	8005c32 <__sflush_r+0x82>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	d102      	bne.n	8005c30 <__sflush_r+0x80>
 8005c2a:	682b      	ldr	r3, [r5, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d100      	bne.n	8005c32 <__sflush_r+0x82>
 8005c30:	6560      	str	r0, [r4, #84]	; 0x54
 8005c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c34:	602e      	str	r6, [r5, #0]
 8005c36:	2900      	cmp	r1, #0
 8005c38:	d0c6      	beq.n	8005bc8 <__sflush_r+0x18>
 8005c3a:	0023      	movs	r3, r4
 8005c3c:	3344      	adds	r3, #68	; 0x44
 8005c3e:	4299      	cmp	r1, r3
 8005c40:	d002      	beq.n	8005c48 <__sflush_r+0x98>
 8005c42:	0028      	movs	r0, r5
 8005c44:	f000 f8a4 	bl	8005d90 <_free_r>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	6360      	str	r0, [r4, #52]	; 0x34
 8005c4c:	e7bd      	b.n	8005bca <__sflush_r+0x1a>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	0028      	movs	r0, r5
 8005c52:	6a21      	ldr	r1, [r4, #32]
 8005c54:	47b8      	blx	r7
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	d1c5      	bne.n	8005be6 <__sflush_r+0x36>
 8005c5a:	682b      	ldr	r3, [r5, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0c2      	beq.n	8005be6 <__sflush_r+0x36>
 8005c60:	2b1d      	cmp	r3, #29
 8005c62:	d001      	beq.n	8005c68 <__sflush_r+0xb8>
 8005c64:	2b16      	cmp	r3, #22
 8005c66:	d101      	bne.n	8005c6c <__sflush_r+0xbc>
 8005c68:	602e      	str	r6, [r5, #0]
 8005c6a:	e7ad      	b.n	8005bc8 <__sflush_r+0x18>
 8005c6c:	2340      	movs	r3, #64	; 0x40
 8005c6e:	89a2      	ldrh	r2, [r4, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	81a3      	strh	r3, [r4, #12]
 8005c74:	e7a9      	b.n	8005bca <__sflush_r+0x1a>
 8005c76:	2340      	movs	r3, #64	; 0x40
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	e7fa      	b.n	8005c72 <__sflush_r+0xc2>
 8005c7c:	690f      	ldr	r7, [r1, #16]
 8005c7e:	2f00      	cmp	r7, #0
 8005c80:	d0a2      	beq.n	8005bc8 <__sflush_r+0x18>
 8005c82:	680a      	ldr	r2, [r1, #0]
 8005c84:	600f      	str	r7, [r1, #0]
 8005c86:	1bd2      	subs	r2, r2, r7
 8005c88:	9201      	str	r2, [sp, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	079b      	lsls	r3, r3, #30
 8005c8e:	d100      	bne.n	8005c92 <__sflush_r+0xe2>
 8005c90:	694a      	ldr	r2, [r1, #20]
 8005c92:	60a2      	str	r2, [r4, #8]
 8005c94:	9b01      	ldr	r3, [sp, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	dc00      	bgt.n	8005c9c <__sflush_r+0xec>
 8005c9a:	e795      	b.n	8005bc8 <__sflush_r+0x18>
 8005c9c:	003a      	movs	r2, r7
 8005c9e:	0028      	movs	r0, r5
 8005ca0:	9b01      	ldr	r3, [sp, #4]
 8005ca2:	6a21      	ldr	r1, [r4, #32]
 8005ca4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ca6:	47b0      	blx	r6
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	dc06      	bgt.n	8005cba <__sflush_r+0x10a>
 8005cac:	2340      	movs	r3, #64	; 0x40
 8005cae:	2001      	movs	r0, #1
 8005cb0:	89a2      	ldrh	r2, [r4, #12]
 8005cb2:	4240      	negs	r0, r0
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	81a3      	strh	r3, [r4, #12]
 8005cb8:	e787      	b.n	8005bca <__sflush_r+0x1a>
 8005cba:	9b01      	ldr	r3, [sp, #4]
 8005cbc:	183f      	adds	r7, r7, r0
 8005cbe:	1a1b      	subs	r3, r3, r0
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	e7e7      	b.n	8005c94 <__sflush_r+0xe4>
 8005cc4:	20400001 	.word	0x20400001

08005cc8 <_fflush_r>:
 8005cc8:	690b      	ldr	r3, [r1, #16]
 8005cca:	b570      	push	{r4, r5, r6, lr}
 8005ccc:	0005      	movs	r5, r0
 8005cce:	000c      	movs	r4, r1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <_fflush_r+0x12>
 8005cd4:	2500      	movs	r5, #0
 8005cd6:	0028      	movs	r0, r5
 8005cd8:	bd70      	pop	{r4, r5, r6, pc}
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d004      	beq.n	8005ce8 <_fflush_r+0x20>
 8005cde:	6983      	ldr	r3, [r0, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <_fflush_r+0x20>
 8005ce4:	f7ff fce2 	bl	80056ac <__sinit>
 8005ce8:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <_fflush_r+0x74>)
 8005cea:	429c      	cmp	r4, r3
 8005cec:	d11b      	bne.n	8005d26 <_fflush_r+0x5e>
 8005cee:	686c      	ldr	r4, [r5, #4]
 8005cf0:	220c      	movs	r2, #12
 8005cf2:	5ea3      	ldrsh	r3, [r4, r2]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0ed      	beq.n	8005cd4 <_fflush_r+0xc>
 8005cf8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cfa:	07d2      	lsls	r2, r2, #31
 8005cfc:	d404      	bmi.n	8005d08 <_fflush_r+0x40>
 8005cfe:	059b      	lsls	r3, r3, #22
 8005d00:	d402      	bmi.n	8005d08 <_fflush_r+0x40>
 8005d02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d04:	f7ff fd97 	bl	8005836 <__retarget_lock_acquire_recursive>
 8005d08:	0028      	movs	r0, r5
 8005d0a:	0021      	movs	r1, r4
 8005d0c:	f7ff ff50 	bl	8005bb0 <__sflush_r>
 8005d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d12:	0005      	movs	r5, r0
 8005d14:	07db      	lsls	r3, r3, #31
 8005d16:	d4de      	bmi.n	8005cd6 <_fflush_r+0xe>
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	059b      	lsls	r3, r3, #22
 8005d1c:	d4db      	bmi.n	8005cd6 <_fflush_r+0xe>
 8005d1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d20:	f7ff fd8a 	bl	8005838 <__retarget_lock_release_recursive>
 8005d24:	e7d7      	b.n	8005cd6 <_fflush_r+0xe>
 8005d26:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <_fflush_r+0x78>)
 8005d28:	429c      	cmp	r4, r3
 8005d2a:	d101      	bne.n	8005d30 <_fflush_r+0x68>
 8005d2c:	68ac      	ldr	r4, [r5, #8]
 8005d2e:	e7df      	b.n	8005cf0 <_fflush_r+0x28>
 8005d30:	4b04      	ldr	r3, [pc, #16]	; (8005d44 <_fflush_r+0x7c>)
 8005d32:	429c      	cmp	r4, r3
 8005d34:	d1dc      	bne.n	8005cf0 <_fflush_r+0x28>
 8005d36:	68ec      	ldr	r4, [r5, #12]
 8005d38:	e7da      	b.n	8005cf0 <_fflush_r+0x28>
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	0800689c 	.word	0x0800689c
 8005d40:	080068bc 	.word	0x080068bc
 8005d44:	0800687c 	.word	0x0800687c

08005d48 <_lseek_r>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	0004      	movs	r4, r0
 8005d4c:	0008      	movs	r0, r1
 8005d4e:	0011      	movs	r1, r2
 8005d50:	001a      	movs	r2, r3
 8005d52:	2300      	movs	r3, #0
 8005d54:	4d05      	ldr	r5, [pc, #20]	; (8005d6c <_lseek_r+0x24>)
 8005d56:	602b      	str	r3, [r5, #0]
 8005d58:	f7fb f9d6 	bl	8001108 <_lseek>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d103      	bne.n	8005d68 <_lseek_r+0x20>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d000      	beq.n	8005d68 <_lseek_r+0x20>
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	bd70      	pop	{r4, r5, r6, pc}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	200011d4 	.word	0x200011d4

08005d70 <__malloc_lock>:
 8005d70:	b510      	push	{r4, lr}
 8005d72:	4802      	ldr	r0, [pc, #8]	; (8005d7c <__malloc_lock+0xc>)
 8005d74:	f7ff fd5f 	bl	8005836 <__retarget_lock_acquire_recursive>
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	200011c8 	.word	0x200011c8

08005d80 <__malloc_unlock>:
 8005d80:	b510      	push	{r4, lr}
 8005d82:	4802      	ldr	r0, [pc, #8]	; (8005d8c <__malloc_unlock+0xc>)
 8005d84:	f7ff fd58 	bl	8005838 <__retarget_lock_release_recursive>
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	200011c8 	.word	0x200011c8

08005d90 <_free_r>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	0005      	movs	r5, r0
 8005d94:	2900      	cmp	r1, #0
 8005d96:	d010      	beq.n	8005dba <_free_r+0x2a>
 8005d98:	1f0c      	subs	r4, r1, #4
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	da00      	bge.n	8005da2 <_free_r+0x12>
 8005da0:	18e4      	adds	r4, r4, r3
 8005da2:	0028      	movs	r0, r5
 8005da4:	f7ff ffe4 	bl	8005d70 <__malloc_lock>
 8005da8:	4a1d      	ldr	r2, [pc, #116]	; (8005e20 <_free_r+0x90>)
 8005daa:	6813      	ldr	r3, [r2, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d105      	bne.n	8005dbc <_free_r+0x2c>
 8005db0:	6063      	str	r3, [r4, #4]
 8005db2:	6014      	str	r4, [r2, #0]
 8005db4:	0028      	movs	r0, r5
 8005db6:	f7ff ffe3 	bl	8005d80 <__malloc_unlock>
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	42a3      	cmp	r3, r4
 8005dbe:	d908      	bls.n	8005dd2 <_free_r+0x42>
 8005dc0:	6821      	ldr	r1, [r4, #0]
 8005dc2:	1860      	adds	r0, r4, r1
 8005dc4:	4283      	cmp	r3, r0
 8005dc6:	d1f3      	bne.n	8005db0 <_free_r+0x20>
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	1841      	adds	r1, r0, r1
 8005dce:	6021      	str	r1, [r4, #0]
 8005dd0:	e7ee      	b.n	8005db0 <_free_r+0x20>
 8005dd2:	001a      	movs	r2, r3
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <_free_r+0x4e>
 8005dda:	42a3      	cmp	r3, r4
 8005ddc:	d9f9      	bls.n	8005dd2 <_free_r+0x42>
 8005dde:	6811      	ldr	r1, [r2, #0]
 8005de0:	1850      	adds	r0, r2, r1
 8005de2:	42a0      	cmp	r0, r4
 8005de4:	d10b      	bne.n	8005dfe <_free_r+0x6e>
 8005de6:	6820      	ldr	r0, [r4, #0]
 8005de8:	1809      	adds	r1, r1, r0
 8005dea:	1850      	adds	r0, r2, r1
 8005dec:	6011      	str	r1, [r2, #0]
 8005dee:	4283      	cmp	r3, r0
 8005df0:	d1e0      	bne.n	8005db4 <_free_r+0x24>
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	1841      	adds	r1, r0, r1
 8005df8:	6011      	str	r1, [r2, #0]
 8005dfa:	6053      	str	r3, [r2, #4]
 8005dfc:	e7da      	b.n	8005db4 <_free_r+0x24>
 8005dfe:	42a0      	cmp	r0, r4
 8005e00:	d902      	bls.n	8005e08 <_free_r+0x78>
 8005e02:	230c      	movs	r3, #12
 8005e04:	602b      	str	r3, [r5, #0]
 8005e06:	e7d5      	b.n	8005db4 <_free_r+0x24>
 8005e08:	6821      	ldr	r1, [r4, #0]
 8005e0a:	1860      	adds	r0, r4, r1
 8005e0c:	4283      	cmp	r3, r0
 8005e0e:	d103      	bne.n	8005e18 <_free_r+0x88>
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	1841      	adds	r1, r0, r1
 8005e16:	6021      	str	r1, [r4, #0]
 8005e18:	6063      	str	r3, [r4, #4]
 8005e1a:	6054      	str	r4, [r2, #4]
 8005e1c:	e7ca      	b.n	8005db4 <_free_r+0x24>
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	200011cc 	.word	0x200011cc

08005e24 <__sfputc_r>:
 8005e24:	6893      	ldr	r3, [r2, #8]
 8005e26:	b510      	push	{r4, lr}
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	6093      	str	r3, [r2, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	da04      	bge.n	8005e3a <__sfputc_r+0x16>
 8005e30:	6994      	ldr	r4, [r2, #24]
 8005e32:	42a3      	cmp	r3, r4
 8005e34:	db07      	blt.n	8005e46 <__sfputc_r+0x22>
 8005e36:	290a      	cmp	r1, #10
 8005e38:	d005      	beq.n	8005e46 <__sfputc_r+0x22>
 8005e3a:	6813      	ldr	r3, [r2, #0]
 8005e3c:	1c58      	adds	r0, r3, #1
 8005e3e:	6010      	str	r0, [r2, #0]
 8005e40:	7019      	strb	r1, [r3, #0]
 8005e42:	0008      	movs	r0, r1
 8005e44:	bd10      	pop	{r4, pc}
 8005e46:	f000 fae5 	bl	8006414 <__swbuf_r>
 8005e4a:	0001      	movs	r1, r0
 8005e4c:	e7f9      	b.n	8005e42 <__sfputc_r+0x1e>

08005e4e <__sfputs_r>:
 8005e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e50:	0006      	movs	r6, r0
 8005e52:	000f      	movs	r7, r1
 8005e54:	0014      	movs	r4, r2
 8005e56:	18d5      	adds	r5, r2, r3
 8005e58:	42ac      	cmp	r4, r5
 8005e5a:	d101      	bne.n	8005e60 <__sfputs_r+0x12>
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	e007      	b.n	8005e70 <__sfputs_r+0x22>
 8005e60:	7821      	ldrb	r1, [r4, #0]
 8005e62:	003a      	movs	r2, r7
 8005e64:	0030      	movs	r0, r6
 8005e66:	f7ff ffdd 	bl	8005e24 <__sfputc_r>
 8005e6a:	3401      	adds	r4, #1
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d1f3      	bne.n	8005e58 <__sfputs_r+0xa>
 8005e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e74 <_vfiprintf_r>:
 8005e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e76:	b0a1      	sub	sp, #132	; 0x84
 8005e78:	0006      	movs	r6, r0
 8005e7a:	000c      	movs	r4, r1
 8005e7c:	001f      	movs	r7, r3
 8005e7e:	9203      	str	r2, [sp, #12]
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d004      	beq.n	8005e8e <_vfiprintf_r+0x1a>
 8005e84:	6983      	ldr	r3, [r0, #24]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <_vfiprintf_r+0x1a>
 8005e8a:	f7ff fc0f 	bl	80056ac <__sinit>
 8005e8e:	4b8e      	ldr	r3, [pc, #568]	; (80060c8 <_vfiprintf_r+0x254>)
 8005e90:	429c      	cmp	r4, r3
 8005e92:	d11c      	bne.n	8005ece <_vfiprintf_r+0x5a>
 8005e94:	6874      	ldr	r4, [r6, #4]
 8005e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e98:	07db      	lsls	r3, r3, #31
 8005e9a:	d405      	bmi.n	8005ea8 <_vfiprintf_r+0x34>
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	059b      	lsls	r3, r3, #22
 8005ea0:	d402      	bmi.n	8005ea8 <_vfiprintf_r+0x34>
 8005ea2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ea4:	f7ff fcc7 	bl	8005836 <__retarget_lock_acquire_recursive>
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	071b      	lsls	r3, r3, #28
 8005eac:	d502      	bpl.n	8005eb4 <_vfiprintf_r+0x40>
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d11d      	bne.n	8005ef0 <_vfiprintf_r+0x7c>
 8005eb4:	0021      	movs	r1, r4
 8005eb6:	0030      	movs	r0, r6
 8005eb8:	f000 fb02 	bl	80064c0 <__swsetup_r>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d017      	beq.n	8005ef0 <_vfiprintf_r+0x7c>
 8005ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ec2:	07db      	lsls	r3, r3, #31
 8005ec4:	d50d      	bpl.n	8005ee2 <_vfiprintf_r+0x6e>
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	4240      	negs	r0, r0
 8005eca:	b021      	add	sp, #132	; 0x84
 8005ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ece:	4b7f      	ldr	r3, [pc, #508]	; (80060cc <_vfiprintf_r+0x258>)
 8005ed0:	429c      	cmp	r4, r3
 8005ed2:	d101      	bne.n	8005ed8 <_vfiprintf_r+0x64>
 8005ed4:	68b4      	ldr	r4, [r6, #8]
 8005ed6:	e7de      	b.n	8005e96 <_vfiprintf_r+0x22>
 8005ed8:	4b7d      	ldr	r3, [pc, #500]	; (80060d0 <_vfiprintf_r+0x25c>)
 8005eda:	429c      	cmp	r4, r3
 8005edc:	d1db      	bne.n	8005e96 <_vfiprintf_r+0x22>
 8005ede:	68f4      	ldr	r4, [r6, #12]
 8005ee0:	e7d9      	b.n	8005e96 <_vfiprintf_r+0x22>
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	059b      	lsls	r3, r3, #22
 8005ee6:	d4ee      	bmi.n	8005ec6 <_vfiprintf_r+0x52>
 8005ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eea:	f7ff fca5 	bl	8005838 <__retarget_lock_release_recursive>
 8005eee:	e7ea      	b.n	8005ec6 <_vfiprintf_r+0x52>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	ad08      	add	r5, sp, #32
 8005ef4:	616b      	str	r3, [r5, #20]
 8005ef6:	3320      	adds	r3, #32
 8005ef8:	766b      	strb	r3, [r5, #25]
 8005efa:	3310      	adds	r3, #16
 8005efc:	76ab      	strb	r3, [r5, #26]
 8005efe:	9707      	str	r7, [sp, #28]
 8005f00:	9f03      	ldr	r7, [sp, #12]
 8005f02:	783b      	ldrb	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <_vfiprintf_r+0x98>
 8005f08:	2b25      	cmp	r3, #37	; 0x25
 8005f0a:	d14e      	bne.n	8005faa <_vfiprintf_r+0x136>
 8005f0c:	9b03      	ldr	r3, [sp, #12]
 8005f0e:	1afb      	subs	r3, r7, r3
 8005f10:	9305      	str	r3, [sp, #20]
 8005f12:	9b03      	ldr	r3, [sp, #12]
 8005f14:	429f      	cmp	r7, r3
 8005f16:	d00d      	beq.n	8005f34 <_vfiprintf_r+0xc0>
 8005f18:	9b05      	ldr	r3, [sp, #20]
 8005f1a:	0021      	movs	r1, r4
 8005f1c:	0030      	movs	r0, r6
 8005f1e:	9a03      	ldr	r2, [sp, #12]
 8005f20:	f7ff ff95 	bl	8005e4e <__sfputs_r>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d100      	bne.n	8005f2a <_vfiprintf_r+0xb6>
 8005f28:	e0b5      	b.n	8006096 <_vfiprintf_r+0x222>
 8005f2a:	696a      	ldr	r2, [r5, #20]
 8005f2c:	9b05      	ldr	r3, [sp, #20]
 8005f2e:	4694      	mov	ip, r2
 8005f30:	4463      	add	r3, ip
 8005f32:	616b      	str	r3, [r5, #20]
 8005f34:	783b      	ldrb	r3, [r7, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d100      	bne.n	8005f3c <_vfiprintf_r+0xc8>
 8005f3a:	e0ac      	b.n	8006096 <_vfiprintf_r+0x222>
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	1c7b      	adds	r3, r7, #1
 8005f40:	9303      	str	r3, [sp, #12]
 8005f42:	2300      	movs	r3, #0
 8005f44:	4252      	negs	r2, r2
 8005f46:	606a      	str	r2, [r5, #4]
 8005f48:	a904      	add	r1, sp, #16
 8005f4a:	3254      	adds	r2, #84	; 0x54
 8005f4c:	1852      	adds	r2, r2, r1
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	60eb      	str	r3, [r5, #12]
 8005f52:	60ab      	str	r3, [r5, #8]
 8005f54:	7013      	strb	r3, [r2, #0]
 8005f56:	65ab      	str	r3, [r5, #88]	; 0x58
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	2205      	movs	r2, #5
 8005f5c:	7819      	ldrb	r1, [r3, #0]
 8005f5e:	485d      	ldr	r0, [pc, #372]	; (80060d4 <_vfiprintf_r+0x260>)
 8005f60:	f000 fb92 	bl	8006688 <memchr>
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	1c5f      	adds	r7, r3, #1
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d120      	bne.n	8005fae <_vfiprintf_r+0x13a>
 8005f6c:	682a      	ldr	r2, [r5, #0]
 8005f6e:	06d3      	lsls	r3, r2, #27
 8005f70:	d504      	bpl.n	8005f7c <_vfiprintf_r+0x108>
 8005f72:	2353      	movs	r3, #83	; 0x53
 8005f74:	a904      	add	r1, sp, #16
 8005f76:	185b      	adds	r3, r3, r1
 8005f78:	2120      	movs	r1, #32
 8005f7a:	7019      	strb	r1, [r3, #0]
 8005f7c:	0713      	lsls	r3, r2, #28
 8005f7e:	d504      	bpl.n	8005f8a <_vfiprintf_r+0x116>
 8005f80:	2353      	movs	r3, #83	; 0x53
 8005f82:	a904      	add	r1, sp, #16
 8005f84:	185b      	adds	r3, r3, r1
 8005f86:	212b      	movs	r1, #43	; 0x2b
 8005f88:	7019      	strb	r1, [r3, #0]
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f90:	d016      	beq.n	8005fc0 <_vfiprintf_r+0x14c>
 8005f92:	2100      	movs	r1, #0
 8005f94:	68eb      	ldr	r3, [r5, #12]
 8005f96:	9f03      	ldr	r7, [sp, #12]
 8005f98:	783a      	ldrb	r2, [r7, #0]
 8005f9a:	1c78      	adds	r0, r7, #1
 8005f9c:	3a30      	subs	r2, #48	; 0x30
 8005f9e:	4684      	mov	ip, r0
 8005fa0:	2a09      	cmp	r2, #9
 8005fa2:	d94f      	bls.n	8006044 <_vfiprintf_r+0x1d0>
 8005fa4:	2900      	cmp	r1, #0
 8005fa6:	d111      	bne.n	8005fcc <_vfiprintf_r+0x158>
 8005fa8:	e017      	b.n	8005fda <_vfiprintf_r+0x166>
 8005faa:	3701      	adds	r7, #1
 8005fac:	e7a9      	b.n	8005f02 <_vfiprintf_r+0x8e>
 8005fae:	4b49      	ldr	r3, [pc, #292]	; (80060d4 <_vfiprintf_r+0x260>)
 8005fb0:	682a      	ldr	r2, [r5, #0]
 8005fb2:	1ac0      	subs	r0, r0, r3
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4083      	lsls	r3, r0
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	602b      	str	r3, [r5, #0]
 8005fbc:	9703      	str	r7, [sp, #12]
 8005fbe:	e7cb      	b.n	8005f58 <_vfiprintf_r+0xe4>
 8005fc0:	9b07      	ldr	r3, [sp, #28]
 8005fc2:	1d19      	adds	r1, r3, #4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	9107      	str	r1, [sp, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	db01      	blt.n	8005fd0 <_vfiprintf_r+0x15c>
 8005fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fce:	e004      	b.n	8005fda <_vfiprintf_r+0x166>
 8005fd0:	425b      	negs	r3, r3
 8005fd2:	60eb      	str	r3, [r5, #12]
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	783b      	ldrb	r3, [r7, #0]
 8005fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8005fde:	d10a      	bne.n	8005ff6 <_vfiprintf_r+0x182>
 8005fe0:	787b      	ldrb	r3, [r7, #1]
 8005fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe4:	d137      	bne.n	8006056 <_vfiprintf_r+0x1e2>
 8005fe6:	9b07      	ldr	r3, [sp, #28]
 8005fe8:	3702      	adds	r7, #2
 8005fea:	1d1a      	adds	r2, r3, #4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	9207      	str	r2, [sp, #28]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	db2d      	blt.n	8006050 <_vfiprintf_r+0x1dc>
 8005ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff6:	2203      	movs	r2, #3
 8005ff8:	7839      	ldrb	r1, [r7, #0]
 8005ffa:	4837      	ldr	r0, [pc, #220]	; (80060d8 <_vfiprintf_r+0x264>)
 8005ffc:	f000 fb44 	bl	8006688 <memchr>
 8006000:	2800      	cmp	r0, #0
 8006002:	d007      	beq.n	8006014 <_vfiprintf_r+0x1a0>
 8006004:	4b34      	ldr	r3, [pc, #208]	; (80060d8 <_vfiprintf_r+0x264>)
 8006006:	682a      	ldr	r2, [r5, #0]
 8006008:	1ac0      	subs	r0, r0, r3
 800600a:	2340      	movs	r3, #64	; 0x40
 800600c:	4083      	lsls	r3, r0
 800600e:	4313      	orrs	r3, r2
 8006010:	3701      	adds	r7, #1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	7839      	ldrb	r1, [r7, #0]
 8006016:	1c7b      	adds	r3, r7, #1
 8006018:	2206      	movs	r2, #6
 800601a:	4830      	ldr	r0, [pc, #192]	; (80060dc <_vfiprintf_r+0x268>)
 800601c:	9303      	str	r3, [sp, #12]
 800601e:	7629      	strb	r1, [r5, #24]
 8006020:	f000 fb32 	bl	8006688 <memchr>
 8006024:	2800      	cmp	r0, #0
 8006026:	d045      	beq.n	80060b4 <_vfiprintf_r+0x240>
 8006028:	4b2d      	ldr	r3, [pc, #180]	; (80060e0 <_vfiprintf_r+0x26c>)
 800602a:	2b00      	cmp	r3, #0
 800602c:	d127      	bne.n	800607e <_vfiprintf_r+0x20a>
 800602e:	2207      	movs	r2, #7
 8006030:	9b07      	ldr	r3, [sp, #28]
 8006032:	3307      	adds	r3, #7
 8006034:	4393      	bics	r3, r2
 8006036:	3308      	adds	r3, #8
 8006038:	9307      	str	r3, [sp, #28]
 800603a:	696b      	ldr	r3, [r5, #20]
 800603c:	9a04      	ldr	r2, [sp, #16]
 800603e:	189b      	adds	r3, r3, r2
 8006040:	616b      	str	r3, [r5, #20]
 8006042:	e75d      	b.n	8005f00 <_vfiprintf_r+0x8c>
 8006044:	210a      	movs	r1, #10
 8006046:	434b      	muls	r3, r1
 8006048:	4667      	mov	r7, ip
 800604a:	189b      	adds	r3, r3, r2
 800604c:	3909      	subs	r1, #9
 800604e:	e7a3      	b.n	8005f98 <_vfiprintf_r+0x124>
 8006050:	2301      	movs	r3, #1
 8006052:	425b      	negs	r3, r3
 8006054:	e7ce      	b.n	8005ff4 <_vfiprintf_r+0x180>
 8006056:	2300      	movs	r3, #0
 8006058:	001a      	movs	r2, r3
 800605a:	3701      	adds	r7, #1
 800605c:	606b      	str	r3, [r5, #4]
 800605e:	7839      	ldrb	r1, [r7, #0]
 8006060:	1c78      	adds	r0, r7, #1
 8006062:	3930      	subs	r1, #48	; 0x30
 8006064:	4684      	mov	ip, r0
 8006066:	2909      	cmp	r1, #9
 8006068:	d903      	bls.n	8006072 <_vfiprintf_r+0x1fe>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0c3      	beq.n	8005ff6 <_vfiprintf_r+0x182>
 800606e:	9209      	str	r2, [sp, #36]	; 0x24
 8006070:	e7c1      	b.n	8005ff6 <_vfiprintf_r+0x182>
 8006072:	230a      	movs	r3, #10
 8006074:	435a      	muls	r2, r3
 8006076:	4667      	mov	r7, ip
 8006078:	1852      	adds	r2, r2, r1
 800607a:	3b09      	subs	r3, #9
 800607c:	e7ef      	b.n	800605e <_vfiprintf_r+0x1ea>
 800607e:	ab07      	add	r3, sp, #28
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	0022      	movs	r2, r4
 8006084:	0029      	movs	r1, r5
 8006086:	0030      	movs	r0, r6
 8006088:	4b16      	ldr	r3, [pc, #88]	; (80060e4 <_vfiprintf_r+0x270>)
 800608a:	e000      	b.n	800608e <_vfiprintf_r+0x21a>
 800608c:	bf00      	nop
 800608e:	9004      	str	r0, [sp, #16]
 8006090:	9b04      	ldr	r3, [sp, #16]
 8006092:	3301      	adds	r3, #1
 8006094:	d1d1      	bne.n	800603a <_vfiprintf_r+0x1c6>
 8006096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006098:	07db      	lsls	r3, r3, #31
 800609a:	d405      	bmi.n	80060a8 <_vfiprintf_r+0x234>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	059b      	lsls	r3, r3, #22
 80060a0:	d402      	bmi.n	80060a8 <_vfiprintf_r+0x234>
 80060a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060a4:	f7ff fbc8 	bl	8005838 <__retarget_lock_release_recursive>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	065b      	lsls	r3, r3, #25
 80060ac:	d500      	bpl.n	80060b0 <_vfiprintf_r+0x23c>
 80060ae:	e70a      	b.n	8005ec6 <_vfiprintf_r+0x52>
 80060b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80060b2:	e70a      	b.n	8005eca <_vfiprintf_r+0x56>
 80060b4:	ab07      	add	r3, sp, #28
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	0022      	movs	r2, r4
 80060ba:	0029      	movs	r1, r5
 80060bc:	0030      	movs	r0, r6
 80060be:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <_vfiprintf_r+0x270>)
 80060c0:	f000 f882 	bl	80061c8 <_printf_i>
 80060c4:	e7e3      	b.n	800608e <_vfiprintf_r+0x21a>
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	0800689c 	.word	0x0800689c
 80060cc:	080068bc 	.word	0x080068bc
 80060d0:	0800687c 	.word	0x0800687c
 80060d4:	080068e0 	.word	0x080068e0
 80060d8:	080068e6 	.word	0x080068e6
 80060dc:	080068ea 	.word	0x080068ea
 80060e0:	00000000 	.word	0x00000000
 80060e4:	08005e4f 	.word	0x08005e4f

080060e8 <_printf_common>:
 80060e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ea:	0015      	movs	r5, r2
 80060ec:	9301      	str	r3, [sp, #4]
 80060ee:	688a      	ldr	r2, [r1, #8]
 80060f0:	690b      	ldr	r3, [r1, #16]
 80060f2:	000c      	movs	r4, r1
 80060f4:	9000      	str	r0, [sp, #0]
 80060f6:	4293      	cmp	r3, r2
 80060f8:	da00      	bge.n	80060fc <_printf_common+0x14>
 80060fa:	0013      	movs	r3, r2
 80060fc:	0022      	movs	r2, r4
 80060fe:	602b      	str	r3, [r5, #0]
 8006100:	3243      	adds	r2, #67	; 0x43
 8006102:	7812      	ldrb	r2, [r2, #0]
 8006104:	2a00      	cmp	r2, #0
 8006106:	d001      	beq.n	800610c <_printf_common+0x24>
 8006108:	3301      	adds	r3, #1
 800610a:	602b      	str	r3, [r5, #0]
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	069b      	lsls	r3, r3, #26
 8006110:	d502      	bpl.n	8006118 <_printf_common+0x30>
 8006112:	682b      	ldr	r3, [r5, #0]
 8006114:	3302      	adds	r3, #2
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	6822      	ldr	r2, [r4, #0]
 800611a:	2306      	movs	r3, #6
 800611c:	0017      	movs	r7, r2
 800611e:	401f      	ands	r7, r3
 8006120:	421a      	tst	r2, r3
 8006122:	d027      	beq.n	8006174 <_printf_common+0x8c>
 8006124:	0023      	movs	r3, r4
 8006126:	3343      	adds	r3, #67	; 0x43
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	1e5a      	subs	r2, r3, #1
 800612c:	4193      	sbcs	r3, r2
 800612e:	6822      	ldr	r2, [r4, #0]
 8006130:	0692      	lsls	r2, r2, #26
 8006132:	d430      	bmi.n	8006196 <_printf_common+0xae>
 8006134:	0022      	movs	r2, r4
 8006136:	9901      	ldr	r1, [sp, #4]
 8006138:	9800      	ldr	r0, [sp, #0]
 800613a:	9e08      	ldr	r6, [sp, #32]
 800613c:	3243      	adds	r2, #67	; 0x43
 800613e:	47b0      	blx	r6
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d025      	beq.n	8006190 <_printf_common+0xa8>
 8006144:	2306      	movs	r3, #6
 8006146:	6820      	ldr	r0, [r4, #0]
 8006148:	682a      	ldr	r2, [r5, #0]
 800614a:	68e1      	ldr	r1, [r4, #12]
 800614c:	2500      	movs	r5, #0
 800614e:	4003      	ands	r3, r0
 8006150:	2b04      	cmp	r3, #4
 8006152:	d103      	bne.n	800615c <_printf_common+0x74>
 8006154:	1a8d      	subs	r5, r1, r2
 8006156:	43eb      	mvns	r3, r5
 8006158:	17db      	asrs	r3, r3, #31
 800615a:	401d      	ands	r5, r3
 800615c:	68a3      	ldr	r3, [r4, #8]
 800615e:	6922      	ldr	r2, [r4, #16]
 8006160:	4293      	cmp	r3, r2
 8006162:	dd01      	ble.n	8006168 <_printf_common+0x80>
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	18ed      	adds	r5, r5, r3
 8006168:	2700      	movs	r7, #0
 800616a:	42bd      	cmp	r5, r7
 800616c:	d120      	bne.n	80061b0 <_printf_common+0xc8>
 800616e:	2000      	movs	r0, #0
 8006170:	e010      	b.n	8006194 <_printf_common+0xac>
 8006172:	3701      	adds	r7, #1
 8006174:	68e3      	ldr	r3, [r4, #12]
 8006176:	682a      	ldr	r2, [r5, #0]
 8006178:	1a9b      	subs	r3, r3, r2
 800617a:	42bb      	cmp	r3, r7
 800617c:	ddd2      	ble.n	8006124 <_printf_common+0x3c>
 800617e:	0022      	movs	r2, r4
 8006180:	2301      	movs	r3, #1
 8006182:	9901      	ldr	r1, [sp, #4]
 8006184:	9800      	ldr	r0, [sp, #0]
 8006186:	9e08      	ldr	r6, [sp, #32]
 8006188:	3219      	adds	r2, #25
 800618a:	47b0      	blx	r6
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d1f0      	bne.n	8006172 <_printf_common+0x8a>
 8006190:	2001      	movs	r0, #1
 8006192:	4240      	negs	r0, r0
 8006194:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006196:	2030      	movs	r0, #48	; 0x30
 8006198:	18e1      	adds	r1, r4, r3
 800619a:	3143      	adds	r1, #67	; 0x43
 800619c:	7008      	strb	r0, [r1, #0]
 800619e:	0021      	movs	r1, r4
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	3145      	adds	r1, #69	; 0x45
 80061a4:	7809      	ldrb	r1, [r1, #0]
 80061a6:	18a2      	adds	r2, r4, r2
 80061a8:	3243      	adds	r2, #67	; 0x43
 80061aa:	3302      	adds	r3, #2
 80061ac:	7011      	strb	r1, [r2, #0]
 80061ae:	e7c1      	b.n	8006134 <_printf_common+0x4c>
 80061b0:	0022      	movs	r2, r4
 80061b2:	2301      	movs	r3, #1
 80061b4:	9901      	ldr	r1, [sp, #4]
 80061b6:	9800      	ldr	r0, [sp, #0]
 80061b8:	9e08      	ldr	r6, [sp, #32]
 80061ba:	321a      	adds	r2, #26
 80061bc:	47b0      	blx	r6
 80061be:	1c43      	adds	r3, r0, #1
 80061c0:	d0e6      	beq.n	8006190 <_printf_common+0xa8>
 80061c2:	3701      	adds	r7, #1
 80061c4:	e7d1      	b.n	800616a <_printf_common+0x82>
	...

080061c8 <_printf_i>:
 80061c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ca:	b08b      	sub	sp, #44	; 0x2c
 80061cc:	9206      	str	r2, [sp, #24]
 80061ce:	000a      	movs	r2, r1
 80061d0:	3243      	adds	r2, #67	; 0x43
 80061d2:	9307      	str	r3, [sp, #28]
 80061d4:	9005      	str	r0, [sp, #20]
 80061d6:	9204      	str	r2, [sp, #16]
 80061d8:	7e0a      	ldrb	r2, [r1, #24]
 80061da:	000c      	movs	r4, r1
 80061dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061de:	2a78      	cmp	r2, #120	; 0x78
 80061e0:	d807      	bhi.n	80061f2 <_printf_i+0x2a>
 80061e2:	2a62      	cmp	r2, #98	; 0x62
 80061e4:	d809      	bhi.n	80061fa <_printf_i+0x32>
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	d100      	bne.n	80061ec <_printf_i+0x24>
 80061ea:	e0c1      	b.n	8006370 <_printf_i+0x1a8>
 80061ec:	2a58      	cmp	r2, #88	; 0x58
 80061ee:	d100      	bne.n	80061f2 <_printf_i+0x2a>
 80061f0:	e08c      	b.n	800630c <_printf_i+0x144>
 80061f2:	0026      	movs	r6, r4
 80061f4:	3642      	adds	r6, #66	; 0x42
 80061f6:	7032      	strb	r2, [r6, #0]
 80061f8:	e022      	b.n	8006240 <_printf_i+0x78>
 80061fa:	0010      	movs	r0, r2
 80061fc:	3863      	subs	r0, #99	; 0x63
 80061fe:	2815      	cmp	r0, #21
 8006200:	d8f7      	bhi.n	80061f2 <_printf_i+0x2a>
 8006202:	f7f9 ff81 	bl	8000108 <__gnu_thumb1_case_shi>
 8006206:	0016      	.short	0x0016
 8006208:	fff6001f 	.word	0xfff6001f
 800620c:	fff6fff6 	.word	0xfff6fff6
 8006210:	001ffff6 	.word	0x001ffff6
 8006214:	fff6fff6 	.word	0xfff6fff6
 8006218:	fff6fff6 	.word	0xfff6fff6
 800621c:	003600a8 	.word	0x003600a8
 8006220:	fff6009a 	.word	0xfff6009a
 8006224:	00b9fff6 	.word	0x00b9fff6
 8006228:	0036fff6 	.word	0x0036fff6
 800622c:	fff6fff6 	.word	0xfff6fff6
 8006230:	009e      	.short	0x009e
 8006232:	0026      	movs	r6, r4
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	3642      	adds	r6, #66	; 0x42
 8006238:	1d11      	adds	r1, r2, #4
 800623a:	6019      	str	r1, [r3, #0]
 800623c:	6813      	ldr	r3, [r2, #0]
 800623e:	7033      	strb	r3, [r6, #0]
 8006240:	2301      	movs	r3, #1
 8006242:	e0a7      	b.n	8006394 <_printf_i+0x1cc>
 8006244:	6808      	ldr	r0, [r1, #0]
 8006246:	6819      	ldr	r1, [r3, #0]
 8006248:	1d0a      	adds	r2, r1, #4
 800624a:	0605      	lsls	r5, r0, #24
 800624c:	d50b      	bpl.n	8006266 <_printf_i+0x9e>
 800624e:	680d      	ldr	r5, [r1, #0]
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	2d00      	cmp	r5, #0
 8006254:	da03      	bge.n	800625e <_printf_i+0x96>
 8006256:	232d      	movs	r3, #45	; 0x2d
 8006258:	9a04      	ldr	r2, [sp, #16]
 800625a:	426d      	negs	r5, r5
 800625c:	7013      	strb	r3, [r2, #0]
 800625e:	4b61      	ldr	r3, [pc, #388]	; (80063e4 <_printf_i+0x21c>)
 8006260:	270a      	movs	r7, #10
 8006262:	9303      	str	r3, [sp, #12]
 8006264:	e01b      	b.n	800629e <_printf_i+0xd6>
 8006266:	680d      	ldr	r5, [r1, #0]
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	0641      	lsls	r1, r0, #25
 800626c:	d5f1      	bpl.n	8006252 <_printf_i+0x8a>
 800626e:	b22d      	sxth	r5, r5
 8006270:	e7ef      	b.n	8006252 <_printf_i+0x8a>
 8006272:	680d      	ldr	r5, [r1, #0]
 8006274:	6819      	ldr	r1, [r3, #0]
 8006276:	1d08      	adds	r0, r1, #4
 8006278:	6018      	str	r0, [r3, #0]
 800627a:	062e      	lsls	r6, r5, #24
 800627c:	d501      	bpl.n	8006282 <_printf_i+0xba>
 800627e:	680d      	ldr	r5, [r1, #0]
 8006280:	e003      	b.n	800628a <_printf_i+0xc2>
 8006282:	066d      	lsls	r5, r5, #25
 8006284:	d5fb      	bpl.n	800627e <_printf_i+0xb6>
 8006286:	680d      	ldr	r5, [r1, #0]
 8006288:	b2ad      	uxth	r5, r5
 800628a:	4b56      	ldr	r3, [pc, #344]	; (80063e4 <_printf_i+0x21c>)
 800628c:	2708      	movs	r7, #8
 800628e:	9303      	str	r3, [sp, #12]
 8006290:	2a6f      	cmp	r2, #111	; 0x6f
 8006292:	d000      	beq.n	8006296 <_printf_i+0xce>
 8006294:	3702      	adds	r7, #2
 8006296:	0023      	movs	r3, r4
 8006298:	2200      	movs	r2, #0
 800629a:	3343      	adds	r3, #67	; 0x43
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	6863      	ldr	r3, [r4, #4]
 80062a0:	60a3      	str	r3, [r4, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	db03      	blt.n	80062ae <_printf_i+0xe6>
 80062a6:	2204      	movs	r2, #4
 80062a8:	6821      	ldr	r1, [r4, #0]
 80062aa:	4391      	bics	r1, r2
 80062ac:	6021      	str	r1, [r4, #0]
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	d102      	bne.n	80062b8 <_printf_i+0xf0>
 80062b2:	9e04      	ldr	r6, [sp, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00c      	beq.n	80062d2 <_printf_i+0x10a>
 80062b8:	9e04      	ldr	r6, [sp, #16]
 80062ba:	0028      	movs	r0, r5
 80062bc:	0039      	movs	r1, r7
 80062be:	f7f9 ffb3 	bl	8000228 <__aeabi_uidivmod>
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	3e01      	subs	r6, #1
 80062c6:	5c5b      	ldrb	r3, [r3, r1]
 80062c8:	7033      	strb	r3, [r6, #0]
 80062ca:	002b      	movs	r3, r5
 80062cc:	0005      	movs	r5, r0
 80062ce:	429f      	cmp	r7, r3
 80062d0:	d9f3      	bls.n	80062ba <_printf_i+0xf2>
 80062d2:	2f08      	cmp	r7, #8
 80062d4:	d109      	bne.n	80062ea <_printf_i+0x122>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	07db      	lsls	r3, r3, #31
 80062da:	d506      	bpl.n	80062ea <_printf_i+0x122>
 80062dc:	6863      	ldr	r3, [r4, #4]
 80062de:	6922      	ldr	r2, [r4, #16]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	dc02      	bgt.n	80062ea <_printf_i+0x122>
 80062e4:	2330      	movs	r3, #48	; 0x30
 80062e6:	3e01      	subs	r6, #1
 80062e8:	7033      	strb	r3, [r6, #0]
 80062ea:	9b04      	ldr	r3, [sp, #16]
 80062ec:	1b9b      	subs	r3, r3, r6
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	9b07      	ldr	r3, [sp, #28]
 80062f2:	0021      	movs	r1, r4
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	9805      	ldr	r0, [sp, #20]
 80062f8:	9b06      	ldr	r3, [sp, #24]
 80062fa:	aa09      	add	r2, sp, #36	; 0x24
 80062fc:	f7ff fef4 	bl	80060e8 <_printf_common>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d14c      	bne.n	800639e <_printf_i+0x1d6>
 8006304:	2001      	movs	r0, #1
 8006306:	4240      	negs	r0, r0
 8006308:	b00b      	add	sp, #44	; 0x2c
 800630a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800630c:	3145      	adds	r1, #69	; 0x45
 800630e:	700a      	strb	r2, [r1, #0]
 8006310:	4a34      	ldr	r2, [pc, #208]	; (80063e4 <_printf_i+0x21c>)
 8006312:	9203      	str	r2, [sp, #12]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	6821      	ldr	r1, [r4, #0]
 8006318:	ca20      	ldmia	r2!, {r5}
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	0608      	lsls	r0, r1, #24
 800631e:	d516      	bpl.n	800634e <_printf_i+0x186>
 8006320:	07cb      	lsls	r3, r1, #31
 8006322:	d502      	bpl.n	800632a <_printf_i+0x162>
 8006324:	2320      	movs	r3, #32
 8006326:	4319      	orrs	r1, r3
 8006328:	6021      	str	r1, [r4, #0]
 800632a:	2710      	movs	r7, #16
 800632c:	2d00      	cmp	r5, #0
 800632e:	d1b2      	bne.n	8006296 <_printf_i+0xce>
 8006330:	2320      	movs	r3, #32
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	439a      	bics	r2, r3
 8006336:	6022      	str	r2, [r4, #0]
 8006338:	e7ad      	b.n	8006296 <_printf_i+0xce>
 800633a:	2220      	movs	r2, #32
 800633c:	6809      	ldr	r1, [r1, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	6022      	str	r2, [r4, #0]
 8006342:	0022      	movs	r2, r4
 8006344:	2178      	movs	r1, #120	; 0x78
 8006346:	3245      	adds	r2, #69	; 0x45
 8006348:	7011      	strb	r1, [r2, #0]
 800634a:	4a27      	ldr	r2, [pc, #156]	; (80063e8 <_printf_i+0x220>)
 800634c:	e7e1      	b.n	8006312 <_printf_i+0x14a>
 800634e:	0648      	lsls	r0, r1, #25
 8006350:	d5e6      	bpl.n	8006320 <_printf_i+0x158>
 8006352:	b2ad      	uxth	r5, r5
 8006354:	e7e4      	b.n	8006320 <_printf_i+0x158>
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	680d      	ldr	r5, [r1, #0]
 800635a:	1d10      	adds	r0, r2, #4
 800635c:	6949      	ldr	r1, [r1, #20]
 800635e:	6018      	str	r0, [r3, #0]
 8006360:	6813      	ldr	r3, [r2, #0]
 8006362:	062e      	lsls	r6, r5, #24
 8006364:	d501      	bpl.n	800636a <_printf_i+0x1a2>
 8006366:	6019      	str	r1, [r3, #0]
 8006368:	e002      	b.n	8006370 <_printf_i+0x1a8>
 800636a:	066d      	lsls	r5, r5, #25
 800636c:	d5fb      	bpl.n	8006366 <_printf_i+0x19e>
 800636e:	8019      	strh	r1, [r3, #0]
 8006370:	2300      	movs	r3, #0
 8006372:	9e04      	ldr	r6, [sp, #16]
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	e7bb      	b.n	80062f0 <_printf_i+0x128>
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	1d11      	adds	r1, r2, #4
 800637c:	6019      	str	r1, [r3, #0]
 800637e:	6816      	ldr	r6, [r2, #0]
 8006380:	2100      	movs	r1, #0
 8006382:	0030      	movs	r0, r6
 8006384:	6862      	ldr	r2, [r4, #4]
 8006386:	f000 f97f 	bl	8006688 <memchr>
 800638a:	2800      	cmp	r0, #0
 800638c:	d001      	beq.n	8006392 <_printf_i+0x1ca>
 800638e:	1b80      	subs	r0, r0, r6
 8006390:	6060      	str	r0, [r4, #4]
 8006392:	6863      	ldr	r3, [r4, #4]
 8006394:	6123      	str	r3, [r4, #16]
 8006396:	2300      	movs	r3, #0
 8006398:	9a04      	ldr	r2, [sp, #16]
 800639a:	7013      	strb	r3, [r2, #0]
 800639c:	e7a8      	b.n	80062f0 <_printf_i+0x128>
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	0032      	movs	r2, r6
 80063a2:	9906      	ldr	r1, [sp, #24]
 80063a4:	9805      	ldr	r0, [sp, #20]
 80063a6:	9d07      	ldr	r5, [sp, #28]
 80063a8:	47a8      	blx	r5
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	d0aa      	beq.n	8006304 <_printf_i+0x13c>
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	079b      	lsls	r3, r3, #30
 80063b2:	d415      	bmi.n	80063e0 <_printf_i+0x218>
 80063b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b6:	68e0      	ldr	r0, [r4, #12]
 80063b8:	4298      	cmp	r0, r3
 80063ba:	daa5      	bge.n	8006308 <_printf_i+0x140>
 80063bc:	0018      	movs	r0, r3
 80063be:	e7a3      	b.n	8006308 <_printf_i+0x140>
 80063c0:	0022      	movs	r2, r4
 80063c2:	2301      	movs	r3, #1
 80063c4:	9906      	ldr	r1, [sp, #24]
 80063c6:	9805      	ldr	r0, [sp, #20]
 80063c8:	9e07      	ldr	r6, [sp, #28]
 80063ca:	3219      	adds	r2, #25
 80063cc:	47b0      	blx	r6
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	d098      	beq.n	8006304 <_printf_i+0x13c>
 80063d2:	3501      	adds	r5, #1
 80063d4:	68e3      	ldr	r3, [r4, #12]
 80063d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	42ab      	cmp	r3, r5
 80063dc:	dcf0      	bgt.n	80063c0 <_printf_i+0x1f8>
 80063de:	e7e9      	b.n	80063b4 <_printf_i+0x1ec>
 80063e0:	2500      	movs	r5, #0
 80063e2:	e7f7      	b.n	80063d4 <_printf_i+0x20c>
 80063e4:	080068f1 	.word	0x080068f1
 80063e8:	08006902 	.word	0x08006902

080063ec <_read_r>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	0004      	movs	r4, r0
 80063f0:	0008      	movs	r0, r1
 80063f2:	0011      	movs	r1, r2
 80063f4:	001a      	movs	r2, r3
 80063f6:	2300      	movs	r3, #0
 80063f8:	4d05      	ldr	r5, [pc, #20]	; (8006410 <_read_r+0x24>)
 80063fa:	602b      	str	r3, [r5, #0]
 80063fc:	f7fa fe46 	bl	800108c <_read>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d103      	bne.n	800640c <_read_r+0x20>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d000      	beq.n	800640c <_read_r+0x20>
 800640a:	6023      	str	r3, [r4, #0]
 800640c:	bd70      	pop	{r4, r5, r6, pc}
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	200011d4 	.word	0x200011d4

08006414 <__swbuf_r>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	0005      	movs	r5, r0
 8006418:	000e      	movs	r6, r1
 800641a:	0014      	movs	r4, r2
 800641c:	2800      	cmp	r0, #0
 800641e:	d004      	beq.n	800642a <__swbuf_r+0x16>
 8006420:	6983      	ldr	r3, [r0, #24]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <__swbuf_r+0x16>
 8006426:	f7ff f941 	bl	80056ac <__sinit>
 800642a:	4b22      	ldr	r3, [pc, #136]	; (80064b4 <__swbuf_r+0xa0>)
 800642c:	429c      	cmp	r4, r3
 800642e:	d12e      	bne.n	800648e <__swbuf_r+0x7a>
 8006430:	686c      	ldr	r4, [r5, #4]
 8006432:	69a3      	ldr	r3, [r4, #24]
 8006434:	60a3      	str	r3, [r4, #8]
 8006436:	89a3      	ldrh	r3, [r4, #12]
 8006438:	071b      	lsls	r3, r3, #28
 800643a:	d532      	bpl.n	80064a2 <__swbuf_r+0x8e>
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d02f      	beq.n	80064a2 <__swbuf_r+0x8e>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	6922      	ldr	r2, [r4, #16]
 8006446:	b2f7      	uxtb	r7, r6
 8006448:	1a98      	subs	r0, r3, r2
 800644a:	6963      	ldr	r3, [r4, #20]
 800644c:	b2f6      	uxtb	r6, r6
 800644e:	4283      	cmp	r3, r0
 8006450:	dc05      	bgt.n	800645e <__swbuf_r+0x4a>
 8006452:	0021      	movs	r1, r4
 8006454:	0028      	movs	r0, r5
 8006456:	f7ff fc37 	bl	8005cc8 <_fflush_r>
 800645a:	2800      	cmp	r0, #0
 800645c:	d127      	bne.n	80064ae <__swbuf_r+0x9a>
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	3001      	adds	r0, #1
 8006462:	3b01      	subs	r3, #1
 8006464:	60a3      	str	r3, [r4, #8]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	6022      	str	r2, [r4, #0]
 800646c:	701f      	strb	r7, [r3, #0]
 800646e:	6963      	ldr	r3, [r4, #20]
 8006470:	4283      	cmp	r3, r0
 8006472:	d004      	beq.n	800647e <__swbuf_r+0x6a>
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	07db      	lsls	r3, r3, #31
 8006478:	d507      	bpl.n	800648a <__swbuf_r+0x76>
 800647a:	2e0a      	cmp	r6, #10
 800647c:	d105      	bne.n	800648a <__swbuf_r+0x76>
 800647e:	0021      	movs	r1, r4
 8006480:	0028      	movs	r0, r5
 8006482:	f7ff fc21 	bl	8005cc8 <_fflush_r>
 8006486:	2800      	cmp	r0, #0
 8006488:	d111      	bne.n	80064ae <__swbuf_r+0x9a>
 800648a:	0030      	movs	r0, r6
 800648c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800648e:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <__swbuf_r+0xa4>)
 8006490:	429c      	cmp	r4, r3
 8006492:	d101      	bne.n	8006498 <__swbuf_r+0x84>
 8006494:	68ac      	ldr	r4, [r5, #8]
 8006496:	e7cc      	b.n	8006432 <__swbuf_r+0x1e>
 8006498:	4b08      	ldr	r3, [pc, #32]	; (80064bc <__swbuf_r+0xa8>)
 800649a:	429c      	cmp	r4, r3
 800649c:	d1c9      	bne.n	8006432 <__swbuf_r+0x1e>
 800649e:	68ec      	ldr	r4, [r5, #12]
 80064a0:	e7c7      	b.n	8006432 <__swbuf_r+0x1e>
 80064a2:	0021      	movs	r1, r4
 80064a4:	0028      	movs	r0, r5
 80064a6:	f000 f80b 	bl	80064c0 <__swsetup_r>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d0c9      	beq.n	8006442 <__swbuf_r+0x2e>
 80064ae:	2601      	movs	r6, #1
 80064b0:	4276      	negs	r6, r6
 80064b2:	e7ea      	b.n	800648a <__swbuf_r+0x76>
 80064b4:	0800689c 	.word	0x0800689c
 80064b8:	080068bc 	.word	0x080068bc
 80064bc:	0800687c 	.word	0x0800687c

080064c0 <__swsetup_r>:
 80064c0:	4b37      	ldr	r3, [pc, #220]	; (80065a0 <__swsetup_r+0xe0>)
 80064c2:	b570      	push	{r4, r5, r6, lr}
 80064c4:	681d      	ldr	r5, [r3, #0]
 80064c6:	0006      	movs	r6, r0
 80064c8:	000c      	movs	r4, r1
 80064ca:	2d00      	cmp	r5, #0
 80064cc:	d005      	beq.n	80064da <__swsetup_r+0x1a>
 80064ce:	69ab      	ldr	r3, [r5, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <__swsetup_r+0x1a>
 80064d4:	0028      	movs	r0, r5
 80064d6:	f7ff f8e9 	bl	80056ac <__sinit>
 80064da:	4b32      	ldr	r3, [pc, #200]	; (80065a4 <__swsetup_r+0xe4>)
 80064dc:	429c      	cmp	r4, r3
 80064de:	d10f      	bne.n	8006500 <__swsetup_r+0x40>
 80064e0:	686c      	ldr	r4, [r5, #4]
 80064e2:	230c      	movs	r3, #12
 80064e4:	5ee2      	ldrsh	r2, [r4, r3]
 80064e6:	b293      	uxth	r3, r2
 80064e8:	0711      	lsls	r1, r2, #28
 80064ea:	d42d      	bmi.n	8006548 <__swsetup_r+0x88>
 80064ec:	06d9      	lsls	r1, r3, #27
 80064ee:	d411      	bmi.n	8006514 <__swsetup_r+0x54>
 80064f0:	2309      	movs	r3, #9
 80064f2:	2001      	movs	r0, #1
 80064f4:	6033      	str	r3, [r6, #0]
 80064f6:	3337      	adds	r3, #55	; 0x37
 80064f8:	4313      	orrs	r3, r2
 80064fa:	81a3      	strh	r3, [r4, #12]
 80064fc:	4240      	negs	r0, r0
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	4b29      	ldr	r3, [pc, #164]	; (80065a8 <__swsetup_r+0xe8>)
 8006502:	429c      	cmp	r4, r3
 8006504:	d101      	bne.n	800650a <__swsetup_r+0x4a>
 8006506:	68ac      	ldr	r4, [r5, #8]
 8006508:	e7eb      	b.n	80064e2 <__swsetup_r+0x22>
 800650a:	4b28      	ldr	r3, [pc, #160]	; (80065ac <__swsetup_r+0xec>)
 800650c:	429c      	cmp	r4, r3
 800650e:	d1e8      	bne.n	80064e2 <__swsetup_r+0x22>
 8006510:	68ec      	ldr	r4, [r5, #12]
 8006512:	e7e6      	b.n	80064e2 <__swsetup_r+0x22>
 8006514:	075b      	lsls	r3, r3, #29
 8006516:	d513      	bpl.n	8006540 <__swsetup_r+0x80>
 8006518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800651a:	2900      	cmp	r1, #0
 800651c:	d008      	beq.n	8006530 <__swsetup_r+0x70>
 800651e:	0023      	movs	r3, r4
 8006520:	3344      	adds	r3, #68	; 0x44
 8006522:	4299      	cmp	r1, r3
 8006524:	d002      	beq.n	800652c <__swsetup_r+0x6c>
 8006526:	0030      	movs	r0, r6
 8006528:	f7ff fc32 	bl	8005d90 <_free_r>
 800652c:	2300      	movs	r3, #0
 800652e:	6363      	str	r3, [r4, #52]	; 0x34
 8006530:	2224      	movs	r2, #36	; 0x24
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	4393      	bics	r3, r2
 8006536:	81a3      	strh	r3, [r4, #12]
 8006538:	2300      	movs	r3, #0
 800653a:	6063      	str	r3, [r4, #4]
 800653c:	6923      	ldr	r3, [r4, #16]
 800653e:	6023      	str	r3, [r4, #0]
 8006540:	2308      	movs	r3, #8
 8006542:	89a2      	ldrh	r2, [r4, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	81a3      	strh	r3, [r4, #12]
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10b      	bne.n	8006566 <__swsetup_r+0xa6>
 800654e:	21a0      	movs	r1, #160	; 0xa0
 8006550:	2280      	movs	r2, #128	; 0x80
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	0089      	lsls	r1, r1, #2
 8006556:	0092      	lsls	r2, r2, #2
 8006558:	400b      	ands	r3, r1
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <__swsetup_r+0xa6>
 800655e:	0021      	movs	r1, r4
 8006560:	0030      	movs	r0, r6
 8006562:	f000 f84d 	bl	8006600 <__smakebuf_r>
 8006566:	220c      	movs	r2, #12
 8006568:	5ea3      	ldrsh	r3, [r4, r2]
 800656a:	2001      	movs	r0, #1
 800656c:	001a      	movs	r2, r3
 800656e:	b299      	uxth	r1, r3
 8006570:	4002      	ands	r2, r0
 8006572:	4203      	tst	r3, r0
 8006574:	d00f      	beq.n	8006596 <__swsetup_r+0xd6>
 8006576:	2200      	movs	r2, #0
 8006578:	60a2      	str	r2, [r4, #8]
 800657a:	6962      	ldr	r2, [r4, #20]
 800657c:	4252      	negs	r2, r2
 800657e:	61a2      	str	r2, [r4, #24]
 8006580:	2000      	movs	r0, #0
 8006582:	6922      	ldr	r2, [r4, #16]
 8006584:	4282      	cmp	r2, r0
 8006586:	d1ba      	bne.n	80064fe <__swsetup_r+0x3e>
 8006588:	060a      	lsls	r2, r1, #24
 800658a:	d5b8      	bpl.n	80064fe <__swsetup_r+0x3e>
 800658c:	2240      	movs	r2, #64	; 0x40
 800658e:	4313      	orrs	r3, r2
 8006590:	81a3      	strh	r3, [r4, #12]
 8006592:	3801      	subs	r0, #1
 8006594:	e7b3      	b.n	80064fe <__swsetup_r+0x3e>
 8006596:	0788      	lsls	r0, r1, #30
 8006598:	d400      	bmi.n	800659c <__swsetup_r+0xdc>
 800659a:	6962      	ldr	r2, [r4, #20]
 800659c:	60a2      	str	r2, [r4, #8]
 800659e:	e7ef      	b.n	8006580 <__swsetup_r+0xc0>
 80065a0:	20000020 	.word	0x20000020
 80065a4:	0800689c 	.word	0x0800689c
 80065a8:	080068bc 	.word	0x080068bc
 80065ac:	0800687c 	.word	0x0800687c

080065b0 <__swhatbuf_r>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	000e      	movs	r6, r1
 80065b4:	001d      	movs	r5, r3
 80065b6:	230e      	movs	r3, #14
 80065b8:	5ec9      	ldrsh	r1, [r1, r3]
 80065ba:	0014      	movs	r4, r2
 80065bc:	b096      	sub	sp, #88	; 0x58
 80065be:	2900      	cmp	r1, #0
 80065c0:	da08      	bge.n	80065d4 <__swhatbuf_r+0x24>
 80065c2:	220c      	movs	r2, #12
 80065c4:	5eb3      	ldrsh	r3, [r6, r2]
 80065c6:	2200      	movs	r2, #0
 80065c8:	602a      	str	r2, [r5, #0]
 80065ca:	061b      	lsls	r3, r3, #24
 80065cc:	d411      	bmi.n	80065f2 <__swhatbuf_r+0x42>
 80065ce:	2380      	movs	r3, #128	; 0x80
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	e00f      	b.n	80065f4 <__swhatbuf_r+0x44>
 80065d4:	466a      	mov	r2, sp
 80065d6:	f000 f863 	bl	80066a0 <_fstat_r>
 80065da:	2800      	cmp	r0, #0
 80065dc:	dbf1      	blt.n	80065c2 <__swhatbuf_r+0x12>
 80065de:	23f0      	movs	r3, #240	; 0xf0
 80065e0:	9901      	ldr	r1, [sp, #4]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	4019      	ands	r1, r3
 80065e6:	4b05      	ldr	r3, [pc, #20]	; (80065fc <__swhatbuf_r+0x4c>)
 80065e8:	18c9      	adds	r1, r1, r3
 80065ea:	424b      	negs	r3, r1
 80065ec:	4159      	adcs	r1, r3
 80065ee:	6029      	str	r1, [r5, #0]
 80065f0:	e7ed      	b.n	80065ce <__swhatbuf_r+0x1e>
 80065f2:	2340      	movs	r3, #64	; 0x40
 80065f4:	2000      	movs	r0, #0
 80065f6:	6023      	str	r3, [r4, #0]
 80065f8:	b016      	add	sp, #88	; 0x58
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	ffffe000 	.word	0xffffe000

08006600 <__smakebuf_r>:
 8006600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006602:	2602      	movs	r6, #2
 8006604:	898b      	ldrh	r3, [r1, #12]
 8006606:	0005      	movs	r5, r0
 8006608:	000c      	movs	r4, r1
 800660a:	4233      	tst	r3, r6
 800660c:	d006      	beq.n	800661c <__smakebuf_r+0x1c>
 800660e:	0023      	movs	r3, r4
 8006610:	3347      	adds	r3, #71	; 0x47
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	6123      	str	r3, [r4, #16]
 8006616:	2301      	movs	r3, #1
 8006618:	6163      	str	r3, [r4, #20]
 800661a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800661c:	466a      	mov	r2, sp
 800661e:	ab01      	add	r3, sp, #4
 8006620:	f7ff ffc6 	bl	80065b0 <__swhatbuf_r>
 8006624:	9900      	ldr	r1, [sp, #0]
 8006626:	0007      	movs	r7, r0
 8006628:	0028      	movs	r0, r5
 800662a:	f7ff f939 	bl	80058a0 <_malloc_r>
 800662e:	2800      	cmp	r0, #0
 8006630:	d108      	bne.n	8006644 <__smakebuf_r+0x44>
 8006632:	220c      	movs	r2, #12
 8006634:	5ea3      	ldrsh	r3, [r4, r2]
 8006636:	059a      	lsls	r2, r3, #22
 8006638:	d4ef      	bmi.n	800661a <__smakebuf_r+0x1a>
 800663a:	2203      	movs	r2, #3
 800663c:	4393      	bics	r3, r2
 800663e:	431e      	orrs	r6, r3
 8006640:	81a6      	strh	r6, [r4, #12]
 8006642:	e7e4      	b.n	800660e <__smakebuf_r+0xe>
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <__smakebuf_r+0x84>)
 8006646:	62ab      	str	r3, [r5, #40]	; 0x28
 8006648:	2380      	movs	r3, #128	; 0x80
 800664a:	89a2      	ldrh	r2, [r4, #12]
 800664c:	6020      	str	r0, [r4, #0]
 800664e:	4313      	orrs	r3, r2
 8006650:	81a3      	strh	r3, [r4, #12]
 8006652:	9b00      	ldr	r3, [sp, #0]
 8006654:	6120      	str	r0, [r4, #16]
 8006656:	6163      	str	r3, [r4, #20]
 8006658:	9b01      	ldr	r3, [sp, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00d      	beq.n	800667a <__smakebuf_r+0x7a>
 800665e:	0028      	movs	r0, r5
 8006660:	230e      	movs	r3, #14
 8006662:	5ee1      	ldrsh	r1, [r4, r3]
 8006664:	f000 f82e 	bl	80066c4 <_isatty_r>
 8006668:	2800      	cmp	r0, #0
 800666a:	d006      	beq.n	800667a <__smakebuf_r+0x7a>
 800666c:	2203      	movs	r2, #3
 800666e:	89a3      	ldrh	r3, [r4, #12]
 8006670:	4393      	bics	r3, r2
 8006672:	001a      	movs	r2, r3
 8006674:	2301      	movs	r3, #1
 8006676:	4313      	orrs	r3, r2
 8006678:	81a3      	strh	r3, [r4, #12]
 800667a:	89a0      	ldrh	r0, [r4, #12]
 800667c:	4307      	orrs	r7, r0
 800667e:	81a7      	strh	r7, [r4, #12]
 8006680:	e7cb      	b.n	800661a <__smakebuf_r+0x1a>
 8006682:	46c0      	nop			; (mov r8, r8)
 8006684:	08005631 	.word	0x08005631

08006688 <memchr>:
 8006688:	b2c9      	uxtb	r1, r1
 800668a:	1882      	adds	r2, r0, r2
 800668c:	4290      	cmp	r0, r2
 800668e:	d101      	bne.n	8006694 <memchr+0xc>
 8006690:	2000      	movs	r0, #0
 8006692:	4770      	bx	lr
 8006694:	7803      	ldrb	r3, [r0, #0]
 8006696:	428b      	cmp	r3, r1
 8006698:	d0fb      	beq.n	8006692 <memchr+0xa>
 800669a:	3001      	adds	r0, #1
 800669c:	e7f6      	b.n	800668c <memchr+0x4>
	...

080066a0 <_fstat_r>:
 80066a0:	2300      	movs	r3, #0
 80066a2:	b570      	push	{r4, r5, r6, lr}
 80066a4:	4d06      	ldr	r5, [pc, #24]	; (80066c0 <_fstat_r+0x20>)
 80066a6:	0004      	movs	r4, r0
 80066a8:	0008      	movs	r0, r1
 80066aa:	0011      	movs	r1, r2
 80066ac:	602b      	str	r3, [r5, #0]
 80066ae:	f7fa fd14 	bl	80010da <_fstat>
 80066b2:	1c43      	adds	r3, r0, #1
 80066b4:	d103      	bne.n	80066be <_fstat_r+0x1e>
 80066b6:	682b      	ldr	r3, [r5, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d000      	beq.n	80066be <_fstat_r+0x1e>
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	200011d4 	.word	0x200011d4

080066c4 <_isatty_r>:
 80066c4:	2300      	movs	r3, #0
 80066c6:	b570      	push	{r4, r5, r6, lr}
 80066c8:	4d06      	ldr	r5, [pc, #24]	; (80066e4 <_isatty_r+0x20>)
 80066ca:	0004      	movs	r4, r0
 80066cc:	0008      	movs	r0, r1
 80066ce:	602b      	str	r3, [r5, #0]
 80066d0:	f7fa fd11 	bl	80010f6 <_isatty>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d103      	bne.n	80066e0 <_isatty_r+0x1c>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d000      	beq.n	80066e0 <_isatty_r+0x1c>
 80066de:	6023      	str	r3, [r4, #0]
 80066e0:	bd70      	pop	{r4, r5, r6, pc}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	200011d4 	.word	0x200011d4

080066e8 <_init>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr

080066f4 <_fini>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	46c0      	nop			; (mov r8, r8)
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr
