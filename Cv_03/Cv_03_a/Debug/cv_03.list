
cv_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004e0  080004e0  000104e8  2**0
                  CONTENTS
  4 .ARM          00000000  080004e0  080004e0  000104e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e0  080004e8  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e0  080004e0  000104e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004e4  080004e4  000104e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004e8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004e8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000104e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000413  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000204  00000000  00000000  00010923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000046ee  00000000  00000000  00010bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000009b7  00000000  00000000  000152de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00017e90  00000000  00000000  00015c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002db25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  0002db78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000450 	.word	0x08000450

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000450 	.word	0x08000450

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



int main(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	sct_init();
 8000226:	f000 f81d 	bl	8000264 <sct_init>
	// sct_led(0x7A5C36DE);
	/**********INFINIT LOOP************/
	for (;;) {
		for ( uint32_t j = 0; j < 1000; j=j+111) {
 800022a:	2300      	movs	r3, #0
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	e011      	b.n	8000254 <main+0x34>
			sct_value(j);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	b29b      	uxth	r3, r3
 8000234:	0018      	movs	r0, r3
 8000236:	f000 f86f 	bl	8000318 <sct_value>
			for (volatile uint32_t i = 0; i < 100000; i++) {
 800023a:	2300      	movs	r3, #0
 800023c:	603b      	str	r3, [r7, #0]
 800023e:	e002      	b.n	8000246 <main+0x26>
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	3301      	adds	r3, #1
 8000244:	603b      	str	r3, [r7, #0]
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	4a05      	ldr	r2, [pc, #20]	; (8000260 <main+0x40>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d9f8      	bls.n	8000240 <main+0x20>
		for ( uint32_t j = 0; j < 1000; j=j+111) {
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	336f      	adds	r3, #111	; 0x6f
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	429a      	cmp	r2, r3
 800025c:	d3e8      	bcc.n	8000230 <main+0x10>
 800025e:	e7e4      	b.n	800022a <main+0xa>
 8000260:	0001869f 	.word	0x0001869f

08000264 <sct_init>:
#define sct_nla(x) do { if (x) GPIOB->BSRR = (1 << 5); else GPIOB->BRR = (1 << 5); } while (0);
#define sct_sdi(x) do { if (x) GPIOB->BSRR = (1 << 4); else GPIOB->BRR = (1 << 4); } while (0);
#define sct_clk(x) do { if (x) GPIOB->BSRR = (1 << 3); else GPIOB->BRR = (1 << 3); } while (0);
#define sct_noe(x) do { if (x) GPIOB->BSRR = (1 << 10); else GPIOB->BRR = (1 << 10); } while (0);

void sct_init(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; // enable clock;
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <sct_init+0x50>)
 800026a:	695a      	ldr	r2, [r3, #20]
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <sct_init+0x50>)
 800026e:	2180      	movs	r1, #128	; 0x80
 8000270:	02c9      	lsls	r1, r1, #11
 8000272:	430a      	orrs	r2, r1
 8000274:	615a      	str	r2, [r3, #20]
	GPIOB->MODER |= GPIO_MODER_MODER3_0; // pin PB3 to output;
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <sct_init+0x54>)
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <sct_init+0x54>)
 800027c:	2140      	movs	r1, #64	; 0x40
 800027e:	430a      	orrs	r2, r1
 8000280:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER4_0; // pin PB4 to output;
 8000282:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <sct_init+0x54>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <sct_init+0x54>)
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	430a      	orrs	r2, r1
 800028e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER5_0; // pin PB5 to output;
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <sct_init+0x54>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <sct_init+0x54>)
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	00c9      	lsls	r1, r1, #3
 800029a:	430a      	orrs	r2, r1
 800029c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER10_0; // pin PB6 to output;
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <sct_init+0x54>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <sct_init+0x54>)
 80002a4:	2180      	movs	r1, #128	; 0x80
 80002a6:	0349      	lsls	r1, r1, #13
 80002a8:	430a      	orrs	r2, r1
 80002aa:	601a      	str	r2, [r3, #0]
}
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	40021000 	.word	0x40021000
 80002b8:	48000400 	.word	0x48000400

080002bc <sct_led>:
void sct_led(uint32_t value) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<32; i++){
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	e016      	b.n	80002f8 <sct_led+0x3c>
		sct_sdi(value & 1);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2201      	movs	r2, #1
 80002ce:	4013      	ands	r3, r2
 80002d0:	d003      	beq.n	80002da <sct_led+0x1e>
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <sct_led+0x58>)
 80002d4:	2210      	movs	r2, #16
 80002d6:	619a      	str	r2, [r3, #24]
 80002d8:	e002      	b.n	80002e0 <sct_led+0x24>
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <sct_led+0x58>)
 80002dc:	2210      	movs	r2, #16
 80002de:	629a      	str	r2, [r3, #40]	; 0x28
		sct_clk(1); //clock pulse;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <sct_led+0x58>)
 80002e2:	2208      	movs	r2, #8
 80002e4:	619a      	str	r2, [r3, #24]
		sct_clk(0);
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <sct_led+0x58>)
 80002e8:	2208      	movs	r2, #8
 80002ea:	629a      	str	r2, [r3, #40]	; 0x28
		value>>=1;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	085b      	lsrs	r3, r3, #1
 80002f0:	607b      	str	r3, [r7, #4]
	for (uint32_t i=0; i<32; i++){
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	3301      	adds	r3, #1
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	2b1f      	cmp	r3, #31
 80002fc:	d9e5      	bls.n	80002ca <sct_led+0xe>
	}
	sct_nla(1); //latch bit pulse;
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <sct_led+0x58>)
 8000300:	2220      	movs	r2, #32
 8000302:	619a      	str	r2, [r3, #24]
	sct_nla(0);
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <sct_led+0x58>)
 8000306:	2220      	movs	r2, #32
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b004      	add	sp, #16
 8000310:	bd80      	pop	{r7, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	48000400 	.word	0x48000400

08000318 <sct_value>:
void sct_value(uint16_t value) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	0002      	movs	r2, r0
 8000320:	1dbb      	adds	r3, r7, #6
 8000322:	801a      	strh	r2, [r3, #0]
	0b0100000000000011 << 0,
	0b0111000000001111 << 0,
	0b0110000000001111 << 0,
	},
	};
	uint32_t reg=0;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[0][value / 100 % 10];
 8000328:	1dbb      	adds	r3, r7, #6
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	2164      	movs	r1, #100	; 0x64
 800032e:	0018      	movs	r0, r3
 8000330:	f7ff feea 	bl	8000108 <__udivsi3>
 8000334:	0003      	movs	r3, r0
 8000336:	b29b      	uxth	r3, r3
 8000338:	210a      	movs	r1, #10
 800033a:	0018      	movs	r0, r3
 800033c:	f7ff ff6a 	bl	8000214 <__aeabi_uidivmod>
 8000340:	000b      	movs	r3, r1
 8000342:	b29b      	uxth	r3, r3
 8000344:	001a      	movs	r2, r3
 8000346:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <sct_value+0x98>)
 8000348:	0092      	lsls	r2, r2, #2
 800034a:	58d3      	ldr	r3, [r2, r3]
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	4313      	orrs	r3, r2
 8000350:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[1][value / 10 % 10];
 8000352:	1dbb      	adds	r3, r7, #6
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	210a      	movs	r1, #10
 8000358:	0018      	movs	r0, r3
 800035a:	f7ff fed5 	bl	8000108 <__udivsi3>
 800035e:	0003      	movs	r3, r0
 8000360:	b29b      	uxth	r3, r3
 8000362:	210a      	movs	r1, #10
 8000364:	0018      	movs	r0, r3
 8000366:	f7ff ff55 	bl	8000214 <__aeabi_uidivmod>
 800036a:	000b      	movs	r3, r1
 800036c:	b29b      	uxth	r3, r3
 800036e:	001a      	movs	r2, r3
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <sct_value+0x98>)
 8000372:	320a      	adds	r2, #10
 8000374:	0092      	lsls	r2, r2, #2
 8000376:	58d3      	ldr	r3, [r2, r3]
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	4313      	orrs	r3, r2
 800037c:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[2][value / 1 % 10];
 800037e:	1dbb      	adds	r3, r7, #6
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	210a      	movs	r1, #10
 8000384:	0018      	movs	r0, r3
 8000386:	f7ff ff45 	bl	8000214 <__aeabi_uidivmod>
 800038a:	000b      	movs	r3, r1
 800038c:	b29b      	uxth	r3, r3
 800038e:	001a      	movs	r2, r3
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <sct_value+0x98>)
 8000392:	3214      	adds	r2, #20
 8000394:	0092      	lsls	r2, r2, #2
 8000396:	58d3      	ldr	r3, [r2, r3]
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	4313      	orrs	r3, r2
 800039c:	60fb      	str	r3, [r7, #12]
	sct_led(reg);
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	0018      	movs	r0, r3
 80003a2:	f7ff ff8b 	bl	80002bc <sct_led>

}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b004      	add	sp, #16
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	08000468 	.word	0x08000468

080003b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b8:	e000      	b.n	80003bc <Reset_Handler+0x8>
 80003ba:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003be:	490d      	ldr	r1, [pc, #52]	; (80003f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c0:	4a0d      	ldr	r2, [pc, #52]	; (80003f8 <LoopForever+0xe>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c4:	e002      	b.n	80003cc <LoopCopyDataInit>

080003c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ca:	3304      	adds	r3, #4

080003cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d0:	d3f9      	bcc.n	80003c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d4:	4c0a      	ldr	r4, [pc, #40]	; (8000400 <LoopForever+0x16>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d8:	e001      	b.n	80003de <LoopFillZerobss>

080003da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003dc:	3204      	adds	r2, #4

080003de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e0:	d3fb      	bcc.n	80003da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e2:	f000 f811 	bl	8000408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e6:	f7ff ff1b 	bl	8000220 <main>

080003ea <LoopForever>:

LoopForever:
    b LoopForever
 80003ea:	e7fe      	b.n	80003ea <LoopForever>
  ldr   r0, =_estack
 80003ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f8:	080004e8 	.word	0x080004e8
  ldr r2, =_sbss
 80003fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000400:	2000001c 	.word	0x2000001c

08000404 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC_IRQHandler>
	...

08000408 <__libc_init_array>:
 8000408:	b570      	push	{r4, r5, r6, lr}
 800040a:	2600      	movs	r6, #0
 800040c:	4d0c      	ldr	r5, [pc, #48]	; (8000440 <__libc_init_array+0x38>)
 800040e:	4c0d      	ldr	r4, [pc, #52]	; (8000444 <__libc_init_array+0x3c>)
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	42a6      	cmp	r6, r4
 8000416:	d109      	bne.n	800042c <__libc_init_array+0x24>
 8000418:	2600      	movs	r6, #0
 800041a:	f000 f819 	bl	8000450 <_init>
 800041e:	4d0a      	ldr	r5, [pc, #40]	; (8000448 <__libc_init_array+0x40>)
 8000420:	4c0a      	ldr	r4, [pc, #40]	; (800044c <__libc_init_array+0x44>)
 8000422:	1b64      	subs	r4, r4, r5
 8000424:	10a4      	asrs	r4, r4, #2
 8000426:	42a6      	cmp	r6, r4
 8000428:	d105      	bne.n	8000436 <__libc_init_array+0x2e>
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	00b3      	lsls	r3, r6, #2
 800042e:	58eb      	ldr	r3, [r5, r3]
 8000430:	4798      	blx	r3
 8000432:	3601      	adds	r6, #1
 8000434:	e7ee      	b.n	8000414 <__libc_init_array+0xc>
 8000436:	00b3      	lsls	r3, r6, #2
 8000438:	58eb      	ldr	r3, [r5, r3]
 800043a:	4798      	blx	r3
 800043c:	3601      	adds	r6, #1
 800043e:	e7f2      	b.n	8000426 <__libc_init_array+0x1e>
 8000440:	080004e0 	.word	0x080004e0
 8000444:	080004e0 	.word	0x080004e0
 8000448:	080004e0 	.word	0x080004e0
 800044c:	080004e4 	.word	0x080004e4

08000450 <_init>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr

0800045c <_fini>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr
