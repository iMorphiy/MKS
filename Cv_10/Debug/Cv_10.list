
Cv_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dfc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08003fac  08003fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e8  080040e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040f0  080040f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080040f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000c4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  20000138  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6a7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b7c  00000000  00000000  0002d74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002f2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba8  00000000  00000000  0002ff18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024220  00000000  00000000  00030ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d927  00000000  00000000  00054ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db76e  00000000  00000000  00062607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013dd75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bdc  00000000  00000000  0013ddc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003f94 	.word	0x08003f94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08003f94 	.word	0x08003f94

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	e000      	b.n	80005c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffd1 	bl	8000594 <ITM_SendChar>
	return 0;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
			{ 1, 2, 3, 21 },
			{ 4, 5, 6, 22 },
			{ 7, 8, 9, 23 },
			{ 11, 0, 12, 24 },
	};
	if (key == -1) {
 8000604:	4b4b      	ldr	r3, [pc, #300]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b25b      	sxtb	r3, r3
 800060a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060e:	d142      	bne.n	8000696 <HAL_TIM_PeriodElapsedCallback+0x9a>
		if (HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin) == GPIO_PIN_RESET)
 8000610:	2108      	movs	r1, #8
 8000612:	4849      	ldr	r0, [pc, #292]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000614:	f001 f860 	bl	80016d8 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d108      	bne.n	8000630 <HAL_TIM_PeriodElapsedCallback+0x34>
			key = keyboard[row][0];
 800061e:	4b47      	ldr	r3, [pc, #284]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a47      	ldr	r2, [pc, #284]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	4413      	add	r3, r2
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	b25a      	sxtb	r2, r3
 800062c:	4b41      	ldr	r3, [pc, #260]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800062e:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin) == GPIO_PIN_RESET)
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4841      	ldr	r0, [pc, #260]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000634:	f001 f850 	bl	80016d8 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d109      	bne.n	8000652 <HAL_TIM_PeriodElapsedCallback+0x56>
			key = keyboard[row][1];
 800063e:	4b3f      	ldr	r3, [pc, #252]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a3f      	ldr	r2, [pc, #252]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	4413      	add	r3, r2
 8000648:	3304      	adds	r3, #4
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	b25a      	sxtb	r2, r3
 800064e:	4b39      	ldr	r3, [pc, #228]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000650:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin) == GPIO_PIN_RESET)
 8000652:	2120      	movs	r1, #32
 8000654:	4838      	ldr	r0, [pc, #224]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000656:	f001 f83f 	bl	80016d8 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d109      	bne.n	8000674 <HAL_TIM_PeriodElapsedCallback+0x78>
			key = keyboard[row][2];
 8000660:	4b36      	ldr	r3, [pc, #216]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a36      	ldr	r2, [pc, #216]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000666:	011b      	lsls	r3, r3, #4
 8000668:	4413      	add	r3, r2
 800066a:	3308      	adds	r3, #8
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	b25a      	sxtb	r2, r3
 8000670:	4b30      	ldr	r3, [pc, #192]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000672:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col4_GPIO_Port, Col4_Pin) == GPIO_PIN_RESET)
 8000674:	2110      	movs	r1, #16
 8000676:	4830      	ldr	r0, [pc, #192]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000678:	f001 f82e 	bl	80016d8 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d109      	bne.n	8000696 <HAL_TIM_PeriodElapsedCallback+0x9a>
			key = keyboard[row][3];
 8000682:	4b2e      	ldr	r3, [pc, #184]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a2e      	ldr	r2, [pc, #184]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	4413      	add	r3, r2
 800068c:	330c      	adds	r3, #12
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	b25a      	sxtb	r2, r3
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000694:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2102      	movs	r1, #2
 800069a:	482a      	ldr	r0, [pc, #168]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800069c:	f001 f834 	bl	8001708 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	4828      	ldr	r0, [pc, #160]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006a8:	f001 f82e 	bl	8001708 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	4825      	ldr	r0, [pc, #148]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006b2:	f001 f829 	bl	8001708 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4822      	ldr	r0, [pc, #136]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006be:	f001 f823 	bl	8001708 <HAL_GPIO_WritePin>
	switch (row) {
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d830      	bhi.n	800072c <HAL_TIM_PeriodElapsedCallback+0x130>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080006e1 	.word	0x080006e1
 80006d4:	080006f5 	.word	0x080006f5
 80006d8:	08000707 	.word	0x08000707
 80006dc:	0800071b 	.word	0x0800071b
	case 0:
		row = 1;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ec:	4816      	ldr	r0, [pc, #88]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006ee:	f001 f80b 	bl	8001708 <HAL_GPIO_WritePin>
		break;
 80006f2:	e01b      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x130>
	case 1:
		row = 2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	4812      	ldr	r0, [pc, #72]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000700:	f001 f802 	bl	8001708 <HAL_GPIO_WritePin>
		break;
 8000704:	e012      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x130>
	case 2:
		row = 3;
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000708:	2203      	movs	r2, #3
 800070a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000714:	f000 fff8 	bl	8001708 <HAL_GPIO_WritePin>
		break;
 8000718:	e008      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x130>
	case 3:
		row = 0;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2102      	movs	r1, #2
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000726:	f000 ffef 	bl	8001708 <HAL_GPIO_WritePin>
		break;
 800072a:	bf00      	nop
	}
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000000 	.word	0x20000000
 8000738:	40021000 	.word	0x40021000
 800073c:	2000011c 	.word	0x2000011c
 8000740:	08003ff8 	.word	0x08003ff8
 8000744:	40021800 	.word	0x40021800
 8000748:	40021400 	.word	0x40021400

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 fc6d 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f879 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f000 f959 	bl	8000a10 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800075e:	f000 f92d 	bl	80009bc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000762:	f000 f8dd 	bl	8000920 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000766:	4830      	ldr	r0, [pc, #192]	; (8000828 <main+0xdc>)
 8000768:	f001 fcea 	bl	8002140 <HAL_TIM_Base_Start_IT>
  printf(" Cv_10 online:\n");
 800076c:	482f      	ldr	r0, [pc, #188]	; (800082c <main+0xe0>)
 800076e:	f002 fc93 	bl	8003098 <puts>

  const uint8_t password[] = {7, 9, 3, 2, 12};
 8000772:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <main+0xe4>)
 8000774:	463b      	mov	r3, r7
 8000776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077a:	6018      	str	r0, [r3, #0]
 800077c:	3304      	adds	r3, #4
 800077e:	7019      	strb	r1, [r3, #0]
  uint8_t pos = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		if (key != -1) {
 8000784:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <main+0xe8>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b25b      	sxtb	r3, r3
 800078a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800078e:	d03a      	beq.n	8000806 <main+0xba>
			timeout = HAL_GetTick(); //store time for timeout count
 8000790:	f000 fcb4 	bl	80010fc <HAL_GetTick>
 8000794:	60b8      	str	r0, [r7, #8]
			if (key == password[pos]) {
 8000796:	4b27      	ldr	r3, [pc, #156]	; (8000834 <main+0xe8>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b25b      	sxtb	r3, r3
 800079c:	461a      	mov	r2, r3
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	3310      	adds	r3, #16
 80007a2:	443b      	add	r3, r7
 80007a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d11b      	bne.n	80007e4 <main+0x98>
				pos++;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	3301      	adds	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]
				printf("Pressed: %d > pos: %d\n", key, pos);
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <main+0xe8>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	4619      	mov	r1, r3
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	461a      	mov	r2, r3
 80007be:	481e      	ldr	r0, [pc, #120]	; (8000838 <main+0xec>)
 80007c0:	f002 fbe4 	bl	8002f8c <iprintf>
				HAL_Delay(250); //filter delay
 80007c4:	20fa      	movs	r0, #250	; 0xfa
 80007c6:	f000 fca5 	bl	8001114 <HAL_Delay>
				if (pos > 4) {
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d917      	bls.n	8000800 <main+0xb4>
					HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle led in case of success
 80007d0:	2101      	movs	r1, #1
 80007d2:	481a      	ldr	r0, [pc, #104]	; (800083c <main+0xf0>)
 80007d4:	f000 ffb1 	bl	800173a <HAL_GPIO_TogglePin>
					printf("Toggle LED\n");
 80007d8:	4819      	ldr	r0, [pc, #100]	; (8000840 <main+0xf4>)
 80007da:	f002 fc5d 	bl	8003098 <puts>
					pos = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	e00d      	b.n	8000800 <main+0xb4>
				}

			}
			else {
				printf("FAIL\n");
 80007e4:	4817      	ldr	r0, [pc, #92]	; (8000844 <main+0xf8>)
 80007e6:	f002 fc57 	bl	8003098 <puts>
				pos = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
				printf("Pressed: %d > pos: %d\n", key, pos);
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <main+0xe8>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	4619      	mov	r1, r3
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	461a      	mov	r2, r3
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <main+0xec>)
 80007fc:	f002 fbc6 	bl	8002f8c <iprintf>
			}
		key = -1; // flag for new read
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <main+0xe8>)
 8000802:	22ff      	movs	r2, #255	; 0xff
 8000804:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timeout + 3000) {
 8000806:	f000 fc79 	bl	80010fc <HAL_GetTick>
 800080a:	4602      	mov	r2, r0
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000812:	429a      	cmp	r2, r3
 8000814:	d9b6      	bls.n	8000784 <main+0x38>

			if (pos != 0) {
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <main+0xd6>
				printf("Timeout\n");
 800081c:	480a      	ldr	r0, [pc, #40]	; (8000848 <main+0xfc>)
 800081e:	f002 fc3b 	bl	8003098 <puts>
			}
			pos = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
		if (key != -1) {
 8000826:	e7ad      	b.n	8000784 <main+0x38>
 8000828:	20000090 	.word	0x20000090
 800082c:	08003fac 	.word	0x08003fac
 8000830:	08003ff0 	.word	0x08003ff0
 8000834:	20000000 	.word	0x20000000
 8000838:	08003fbc 	.word	0x08003fbc
 800083c:	40020400 	.word	0x40020400
 8000840:	08003fd4 	.word	0x08003fd4
 8000844:	08003fe0 	.word	0x08003fe0
 8000848:	08003fe8 	.word	0x08003fe8

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b094      	sub	sp, #80	; 0x50
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	2230      	movs	r2, #48	; 0x30
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fb8e 	bl	8002f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <SystemClock_Config+0xcc>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a27      	ldr	r2, [pc, #156]	; (8000918 <SystemClock_Config+0xcc>)
 800087a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
 8000880:	4b25      	ldr	r3, [pc, #148]	; (8000918 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b22      	ldr	r3, [pc, #136]	; (800091c <SystemClock_Config+0xd0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a21      	ldr	r2, [pc, #132]	; (800091c <SystemClock_Config+0xd0>)
 8000896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008bc:	2304      	movs	r3, #4
 80008be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008c0:	23a8      	movs	r3, #168	; 0xa8
 80008c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008c8:	2307      	movs	r3, #7
 80008ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 ff4d 	bl	8001770 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008dc:	f000 f9f6 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2302      	movs	r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2105      	movs	r1, #5
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 f9ae 	bl	8001c60 <HAL_RCC_ClockConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800090a:	f000 f9df 	bl	8000ccc <Error_Handler>
  }
}
 800090e:	bf00      	nop
 8000910:	3750      	adds	r7, #80	; 0x50
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40007000 	.word	0x40007000

08000920 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_TIM3_Init+0x94>)
 800093e:	4a1e      	ldr	r2, [pc, #120]	; (80009b8 <MX_TIM3_Init+0x98>)
 8000940:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_TIM3_Init+0x94>)
 8000944:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000948:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_TIM3_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_TIM3_Init+0x94>)
 8000952:	2263      	movs	r2, #99	; 0x63
 8000954:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_TIM3_Init+0x94>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_TIM3_Init+0x94>)
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000962:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_TIM3_Init+0x94>)
 8000964:	f001 fb9c 	bl	80020a0 <HAL_TIM_Base_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 f9ad 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	4619      	mov	r1, r3
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_TIM3_Init+0x94>)
 8000980:	f001 fd56 	bl	8002430 <HAL_TIM_ConfigClockSource>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 f99f 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_TIM3_Init+0x94>)
 800099c:	f001 ff72 	bl	8002884 <HAL_TIMEx_MasterConfigSynchronization>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009a6:	f000 f991 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000090 	.word	0x20000090
 80009b8:	40000400 	.word	0x40000400

080009bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART3_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009f4:	f001 ffd6 	bl	80029a4 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 f965 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000d8 	.word	0x200000d8
 8000a0c:	40004800 	.word	0x40004800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
 8000a2a:	4ba1      	ldr	r3, [pc, #644]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4aa0      	ldr	r2, [pc, #640]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a30:	f043 0310 	orr.w	r3, r3, #16
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b9e      	ldr	r3, [pc, #632]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0310 	and.w	r3, r3, #16
 8000a3e:	623b      	str	r3, [r7, #32]
 8000a40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
 8000a46:	4b9a      	ldr	r3, [pc, #616]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a99      	ldr	r2, [pc, #612]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b97      	ldr	r3, [pc, #604]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	61fb      	str	r3, [r7, #28]
 8000a5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	4b93      	ldr	r3, [pc, #588]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a92      	ldr	r2, [pc, #584]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a68:	f043 0320 	orr.w	r3, r3, #32
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b90      	ldr	r3, [pc, #576]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0320 	and.w	r3, r3, #32
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	4b8c      	ldr	r3, [pc, #560]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a8b      	ldr	r2, [pc, #556]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b89      	ldr	r3, [pc, #548]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b85      	ldr	r3, [pc, #532]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a84      	ldr	r2, [pc, #528]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b82      	ldr	r3, [pc, #520]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b7e      	ldr	r3, [pc, #504]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a7d      	ldr	r2, [pc, #500]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b7b      	ldr	r3, [pc, #492]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b77      	ldr	r3, [pc, #476]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a76      	ldr	r2, [pc, #472]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b74      	ldr	r3, [pc, #464]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b70      	ldr	r3, [pc, #448]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a6f      	ldr	r2, [pc, #444]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b6d      	ldr	r3, [pc, #436]	; (8000cb0 <MX_GPIO_Init+0x2a0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Row3_Pin|Row4_Pin|Row2_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000b0c:	4869      	ldr	r0, [pc, #420]	; (8000cb4 <MX_GPIO_Init+0x2a4>)
 8000b0e:	f000 fdfb 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b18:	4867      	ldr	r0, [pc, #412]	; (8000cb8 <MX_GPIO_Init+0x2a8>)
 8000b1a:	f000 fdf5 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Row1_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2142      	movs	r1, #66	; 0x42
 8000b22:	4866      	ldr	r0, [pc, #408]	; (8000cbc <MX_GPIO_Init+0x2ac>)
 8000b24:	f000 fdf0 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Col1_Pin Col4_Pin Col3_Pin Col2_Pin */
  GPIO_InitStruct.Pin = Col1_Pin|Col4_Pin|Col3_Pin|Col2_Pin;
 8000b28:	2378      	movs	r3, #120	; 0x78
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4861      	ldr	r0, [pc, #388]	; (8000cc0 <MX_GPIO_Init+0x2b0>)
 8000b3c:	f000 fc20 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	485b      	ldr	r0, [pc, #364]	; (8000cc4 <MX_GPIO_Init+0x2b4>)
 8000b58:	f000 fc12 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row3_Pin Row4_Pin Row2_Pin */
  GPIO_InitStruct.Pin = Row3_Pin|Row4_Pin|Row2_Pin;
 8000b5c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b62:	2311      	movs	r3, #17
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	484f      	ldr	r0, [pc, #316]	; (8000cb4 <MX_GPIO_Init+0x2a4>)
 8000b76:	f000 fc03 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b7a:	2332      	movs	r3, #50	; 0x32
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8a:	230b      	movs	r3, #11
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	484b      	ldr	r0, [pc, #300]	; (8000cc4 <MX_GPIO_Init+0x2b4>)
 8000b96:	f000 fbf3 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b9a:	2386      	movs	r3, #134	; 0x86
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000baa:	230b      	movs	r3, #11
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4844      	ldr	r0, [pc, #272]	; (8000cc8 <MX_GPIO_Init+0x2b8>)
 8000bb6:	f000 fbe3 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bba:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4839      	ldr	r0, [pc, #228]	; (8000cb8 <MX_GPIO_Init+0x2a8>)
 8000bd4:	f000 fbd4 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : Row1_Pin */
  GPIO_InitStruct.Pin = Row1_Pin;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bdc:	2311      	movs	r3, #17
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4833      	ldr	r0, [pc, #204]	; (8000cbc <MX_GPIO_Init+0x2ac>)
 8000bf0:	f000 fbc6 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c06:	230b      	movs	r3, #11
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4829      	ldr	r0, [pc, #164]	; (8000cb8 <MX_GPIO_Init+0x2a8>)
 8000c12:	f000 fbb5 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c16:	2340      	movs	r3, #64	; 0x40
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4823      	ldr	r0, [pc, #140]	; (8000cbc <MX_GPIO_Init+0x2ac>)
 8000c2e:	f000 fba7 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	481d      	ldr	r0, [pc, #116]	; (8000cbc <MX_GPIO_Init+0x2ac>)
 8000c46:	f000 fb9b 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c4a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4818      	ldr	r0, [pc, #96]	; (8000cc8 <MX_GPIO_Init+0x2b8>)
 8000c68:	f000 fb8a 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <MX_GPIO_Init+0x2b8>)
 8000c82:	f000 fb7d 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c98:	230b      	movs	r3, #11
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <MX_GPIO_Init+0x2ac>)
 8000ca4:	f000 fb6c 	bl	8001380 <HAL_GPIO_Init>

}
 8000ca8:	bf00      	nop
 8000caa:	3738      	adds	r7, #56	; 0x38
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40021400 	.word	0x40021400
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40021800 	.word	0x40021800
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	40020000 	.word	0x40020000

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <Error_Handler+0x8>
	...

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_TIM_Base_MspInit+0x48>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d115      	bne.n	8000d66 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_TIM_Base_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <HAL_TIM_Base_MspInit+0x4c>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_TIM_Base_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	201d      	movs	r0, #29
 8000d5c:	f000 fad9 	bl	8001312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d60:	201d      	movs	r0, #29
 8000d62:	f000 faf2 	bl	800134a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40000400 	.word	0x40000400
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_UART_MspInit+0x84>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12c      	bne.n	8000df4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de4:	2307      	movs	r3, #7
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000df0:	f000 fac6 	bl	8001380 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	; 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40004800 	.word	0x40004800
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020c00 	.word	0x40020c00

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f000 f93e 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <TIM3_IRQHandler+0x10>)
 8000e62:	f001 f9dd 	bl	8002220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000090 	.word	0x20000090

08000e70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	e00a      	b.n	8000e98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e82:	f3af 8000 	nop.w
 8000e86:	4601      	mov	r1, r0
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	60ba      	str	r2, [r7, #8]
 8000e8e:	b2ca      	uxtb	r2, r1
 8000e90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	dbf0      	blt.n	8000e82 <_read+0x12>
	}

return len;
 8000ea0:	687b      	ldr	r3, [r7, #4]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e009      	b.n	8000ed0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	60ba      	str	r2, [r7, #8]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fb8c 	bl	80005e2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbf1      	blt.n	8000ebc <_write+0x12>
	}
	return len;
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_close>:

int _close(int file)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	return -1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_isatty>:

int _isatty(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	return 1;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <_sbrk+0x5c>)
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <_sbrk+0x60>)
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <_sbrk+0x64>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <_sbrk+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d207      	bcs.n	8000f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f7c:	f001 ffd4 	bl	8002f28 <__errno>
 8000f80:	4603      	mov	r3, r0
 8000f82:	220c      	movs	r2, #12
 8000f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	e009      	b.n	8000fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <_sbrk+0x64>)
 8000f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20030000 	.word	0x20030000
 8000fac:	00000400 	.word	0x00000400
 8000fb0:	20000120 	.word	0x20000120
 8000fb4:	20000138 	.word	0x20000138

08000fb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <SystemInit+0x20>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <SystemInit+0x20>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001014 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fe2:	490e      	ldr	r1, [pc, #56]	; (800101c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe8:	e002      	b.n	8000ff0 <LoopCopyDataInit>

08000fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fee:	3304      	adds	r3, #4

08000ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff4:	d3f9      	bcc.n	8000fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ff8:	4c0b      	ldr	r4, [pc, #44]	; (8001028 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ffc:	e001      	b.n	8001002 <LoopFillZerobss>

08000ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001000:	3204      	adds	r2, #4

08001002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001004:	d3fb      	bcc.n	8000ffe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001006:	f7ff ffd7 	bl	8000fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100a:	f001 ff93 	bl	8002f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100e:	f7ff fb9d 	bl	800074c <main>
  bx  lr    
 8001012:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001014:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001020:	080040f8 	.word	0x080040f8
  ldr r2, =_sbss
 8001024:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001028:	20000138 	.word	0x20000138

0800102c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC_IRQHandler>
	...

08001030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <HAL_Init+0x40>)
 800103a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <HAL_Init+0x40>)
 8001046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800104a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_Init+0x40>)
 8001052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f94f 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f808 	bl	8001074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001064:	f7ff fe38 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023c00 	.word	0x40023c00

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x54>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x58>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f967 	bl	8001366 <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00e      	b.n	80010c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d80a      	bhi.n	80010be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 f92f 	bl	8001312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_InitTick+0x5c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000004 	.word	0x20000004
 80010cc:	2000000c 	.word	0x2000000c
 80010d0:	20000008 	.word	0x20000008

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2000000c 	.word	0x2000000c
 80010f8:	20000124 	.word	0x20000124

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000124 	.word	0x20000124

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff ffee 	bl	80010fc <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_Delay+0x44>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113a:	bf00      	nop
 800113c:	f7ff ffde 	bl	80010fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000000c 	.word	0x2000000c

0800115c <__NVIC_SetPriorityGrouping>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_GetPriorityGrouping>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4907      	ldr	r1, [pc, #28]	; (80011f8 <__NVIC_EnableIRQ+0x38>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff29 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff3e 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff8e 	bl	8001250 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff31 	bl	80011c0 <__NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffa2 	bl	80012b8 <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	e177      	b.n	800168c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800139c:	2201      	movs	r2, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	f040 8166 	bne.w	8001686 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d005      	beq.n	80013d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d130      	bne.n	8001434 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001408:	2201      	movs	r2, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	f003 0201 	and.w	r2, r3, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b03      	cmp	r3, #3
 800143e:	d017      	beq.n	8001470 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d123      	bne.n	80014c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3208      	adds	r2, #8
 8001484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	220f      	movs	r2, #15
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	08da      	lsrs	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3208      	adds	r2, #8
 80014be:	69b9      	ldr	r1, [r7, #24]
 80014c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0203 	and.w	r2, r3, #3
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80c0 	beq.w	8001686 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <HAL_GPIO_Init+0x324>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a65      	ldr	r2, [pc, #404]	; (80016a4 <HAL_GPIO_Init+0x324>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <HAL_GPIO_Init+0x324>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001522:	4a61      	ldr	r2, [pc, #388]	; (80016a8 <HAL_GPIO_Init+0x328>)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	220f      	movs	r2, #15
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a58      	ldr	r2, [pc, #352]	; (80016ac <HAL_GPIO_Init+0x32c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d037      	beq.n	80015be <HAL_GPIO_Init+0x23e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a57      	ldr	r2, [pc, #348]	; (80016b0 <HAL_GPIO_Init+0x330>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d031      	beq.n	80015ba <HAL_GPIO_Init+0x23a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a56      	ldr	r2, [pc, #344]	; (80016b4 <HAL_GPIO_Init+0x334>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d02b      	beq.n	80015b6 <HAL_GPIO_Init+0x236>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a55      	ldr	r2, [pc, #340]	; (80016b8 <HAL_GPIO_Init+0x338>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d025      	beq.n	80015b2 <HAL_GPIO_Init+0x232>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a54      	ldr	r2, [pc, #336]	; (80016bc <HAL_GPIO_Init+0x33c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01f      	beq.n	80015ae <HAL_GPIO_Init+0x22e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a53      	ldr	r2, [pc, #332]	; (80016c0 <HAL_GPIO_Init+0x340>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0x22a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a52      	ldr	r2, [pc, #328]	; (80016c4 <HAL_GPIO_Init+0x344>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0x226>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a51      	ldr	r2, [pc, #324]	; (80016c8 <HAL_GPIO_Init+0x348>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x222>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a50      	ldr	r2, [pc, #320]	; (80016cc <HAL_GPIO_Init+0x34c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x21e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4f      	ldr	r2, [pc, #316]	; (80016d0 <HAL_GPIO_Init+0x350>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x21a>
 8001596:	2309      	movs	r3, #9
 8001598:	e012      	b.n	80015c0 <HAL_GPIO_Init+0x240>
 800159a:	230a      	movs	r3, #10
 800159c:	e010      	b.n	80015c0 <HAL_GPIO_Init+0x240>
 800159e:	2308      	movs	r3, #8
 80015a0:	e00e      	b.n	80015c0 <HAL_GPIO_Init+0x240>
 80015a2:	2307      	movs	r3, #7
 80015a4:	e00c      	b.n	80015c0 <HAL_GPIO_Init+0x240>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e00a      	b.n	80015c0 <HAL_GPIO_Init+0x240>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x240>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x240>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x240>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x240>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x240>
 80015be:	2300      	movs	r3, #0
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d0:	4935      	ldr	r1, [pc, #212]	; (80016a8 <HAL_GPIO_Init+0x328>)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015de:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <HAL_GPIO_Init+0x354>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001602:	4a34      	ldr	r2, [pc, #208]	; (80016d4 <HAL_GPIO_Init+0x354>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001608:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <HAL_GPIO_Init+0x354>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800162c:	4a29      	ldr	r2, [pc, #164]	; (80016d4 <HAL_GPIO_Init+0x354>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_GPIO_Init+0x354>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001656:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_GPIO_Init+0x354>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_GPIO_Init+0x354>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <HAL_GPIO_Init+0x354>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	f67f ae84 	bls.w	800139c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40013800 	.word	0x40013800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40021400 	.word	0x40021400
 80016c4:	40021800 	.word	0x40021800
 80016c8:	40021c00 	.word	0x40021c00
 80016cc:	40022000 	.word	0x40022000
 80016d0:	40022400 	.word	0x40022400
 80016d4:	40013c00 	.word	0x40013c00

080016d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016f0:	2301      	movs	r3, #1
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	e001      	b.n	80016fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
 8001714:	4613      	mov	r3, r2
 8001716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001718:	787b      	ldrb	r3, [r7, #1]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001724:	e003      	b.n	800172e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	041a      	lsls	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	619a      	str	r2, [r3, #24]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800173a:	b480      	push	{r7}
 800173c:	b085      	sub	sp, #20
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	460b      	mov	r3, r1
 8001744:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800174c:	887a      	ldrh	r2, [r7, #2]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4013      	ands	r3, r2
 8001752:	041a      	lsls	r2, r3, #16
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43d9      	mvns	r1, r3
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	400b      	ands	r3, r1
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	619a      	str	r2, [r3, #24]
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e267      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d075      	beq.n	800187a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800178e:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b04      	cmp	r3, #4
 8001798:	d00c      	beq.n	80017b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179a:	4b85      	ldr	r3, [pc, #532]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d112      	bne.n	80017cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017a6:	4b82      	ldr	r3, [pc, #520]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b2:	d10b      	bne.n	80017cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	4b7e      	ldr	r3, [pc, #504]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d05b      	beq.n	8001878 <HAL_RCC_OscConfig+0x108>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d157      	bne.n	8001878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e242      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d4:	d106      	bne.n	80017e4 <HAL_RCC_OscConfig+0x74>
 80017d6:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a75      	ldr	r2, [pc, #468]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e01d      	b.n	8001820 <HAL_RCC_OscConfig+0xb0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x98>
 80017ee:	4b70      	ldr	r3, [pc, #448]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a6f      	ldr	r2, [pc, #444]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b6d      	ldr	r3, [pc, #436]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6c      	ldr	r2, [pc, #432]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0xb0>
 8001808:	4b69      	ldr	r3, [pc, #420]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a68      	ldr	r2, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800180e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a65      	ldr	r2, [pc, #404]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800181a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d013      	beq.n	8001850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fc68 	bl	80010fc <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fc64 	bl	80010fc <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e207      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b5b      	ldr	r3, [pc, #364]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0xc0>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fc54 	bl	80010fc <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fc50 	bl	80010fc <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1f3      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0xe8>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d063      	beq.n	800194e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001886:	4b4a      	ldr	r3, [pc, #296]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800189a:	2b08      	cmp	r3, #8
 800189c:	d11c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800189e:	4b44      	ldr	r3, [pc, #272]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d116      	bne.n	80018d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x152>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e1c7      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4937      	ldr	r1, [pc, #220]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	e03a      	b.n	800194e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e0:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <HAL_RCC_OscConfig+0x244>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e6:	f7ff fc09 	bl	80010fc <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ee:	f7ff fc05 	bl	80010fc <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e1a8      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4925      	ldr	r1, [pc, #148]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <HAL_RCC_OscConfig+0x244>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fbe8 	bl	80010fc <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff fbe4 	bl	80010fc <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e187      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d036      	beq.n	80019c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d016      	beq.n	8001990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_RCC_OscConfig+0x248>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff fbc8 	bl	80010fc <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff fbc4 	bl	80010fc <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e167      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x200>
 800198e:	e01b      	b.n	80019c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_OscConfig+0x248>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff fbb1 	bl	80010fc <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199c:	e00e      	b.n	80019bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800199e:	f7ff fbad 	bl	80010fc <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d907      	bls.n	80019bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e150      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
 80019b0:	40023800 	.word	0x40023800
 80019b4:	42470000 	.word	0x42470000
 80019b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1ea      	bne.n	800199e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 8097 	beq.w	8001b04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b81      	ldr	r3, [pc, #516]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10f      	bne.n	8001a06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	4b7d      	ldr	r3, [pc, #500]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a7c      	ldr	r2, [pc, #496]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b7a      	ldr	r3, [pc, #488]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a02:	2301      	movs	r3, #1
 8001a04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a06:	4b77      	ldr	r3, [pc, #476]	; (8001be4 <HAL_RCC_OscConfig+0x474>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d118      	bne.n	8001a44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a12:	4b74      	ldr	r3, [pc, #464]	; (8001be4 <HAL_RCC_OscConfig+0x474>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a73      	ldr	r2, [pc, #460]	; (8001be4 <HAL_RCC_OscConfig+0x474>)
 8001a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fb6d 	bl	80010fc <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a26:	f7ff fb69 	bl	80010fc <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e10c      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCC_OscConfig+0x474>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x2ea>
 8001a4c:	4b64      	ldr	r3, [pc, #400]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	4a63      	ldr	r2, [pc, #396]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6713      	str	r3, [r2, #112]	; 0x70
 8001a58:	e01c      	b.n	8001a94 <HAL_RCC_OscConfig+0x324>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x30c>
 8001a62:	4b5f      	ldr	r3, [pc, #380]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	4a5e      	ldr	r2, [pc, #376]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6e:	4b5c      	ldr	r3, [pc, #368]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a72:	4a5b      	ldr	r2, [pc, #364]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0x324>
 8001a7c:	4b58      	ldr	r3, [pc, #352]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	4a57      	ldr	r2, [pc, #348]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	6713      	str	r3, [r2, #112]	; 0x70
 8001a88:	4b55      	ldr	r3, [pc, #340]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	4a54      	ldr	r2, [pc, #336]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	f023 0304 	bic.w	r3, r3, #4
 8001a92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d015      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fb2e 	bl	80010fc <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fb2a 	bl	80010fc <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e0cb      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0ee      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x334>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fb18 	bl	80010fc <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fb14 	bl	80010fc <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e0b5      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae6:	4b3e      	ldr	r3, [pc, #248]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1ee      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d105      	bne.n	8001b04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af8:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	4a38      	ldr	r2, [pc, #224]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80a1 	beq.w	8001c50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b0e:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d05c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d141      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <HAL_RCC_OscConfig+0x478>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff fae8 	bl	80010fc <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff fae4 	bl	80010fc <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e087      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b42:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69da      	ldr	r2, [r3, #28]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	019b      	lsls	r3, r3, #6
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	3b01      	subs	r3, #1
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	061b      	lsls	r3, r3, #24
 8001b72:	491b      	ldr	r1, [pc, #108]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_RCC_OscConfig+0x478>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fabd 	bl	80010fc <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b86:	f7ff fab9 	bl	80010fc <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e05c      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x416>
 8001ba4:	e054      	b.n	8001c50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_RCC_OscConfig+0x478>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff faa6 	bl	80010fc <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff faa2 	bl	80010fc <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e045      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x444>
 8001bd2:	e03d      	b.n	8001c50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e038      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40007000 	.word	0x40007000
 8001be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x4ec>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d028      	beq.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d121      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d11a      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d111      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	3b01      	subs	r3, #1
 8001c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0cc      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d90c      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b65      	ldr	r3, [pc, #404]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b63      	ldr	r3, [pc, #396]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0b8      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	494d      	ldr	r1, [pc, #308]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d044      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d119      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e07f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1e:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e06f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e067      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f023 0203 	bic.w	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4934      	ldr	r1, [pc, #208]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d50:	f7ff f9d4 	bl	80010fc <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d58:	f7ff f9d0 	bl	80010fc <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e04f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 020c 	and.w	r2, r3, #12
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d1eb      	bne.n	8001d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d20c      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e032      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4916      	ldr	r1, [pc, #88]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	490e      	ldr	r1, [pc, #56]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001de6:	f000 f821 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001dea:	4602      	mov	r2, r0
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	490a      	ldr	r1, [pc, #40]	; (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	5ccb      	ldrb	r3, [r1, r3]
 8001dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfe:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f934 	bl	8001074 <HAL_InitTick>

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023c00 	.word	0x40023c00
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	08004038 	.word	0x08004038
 8001e24:	20000004 	.word	0x20000004
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e30:	b094      	sub	sp, #80	; 0x50
 8001e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	647b      	str	r3, [r7, #68]	; 0x44
 8001e38:	2300      	movs	r3, #0
 8001e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e44:	4b79      	ldr	r3, [pc, #484]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d00d      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x40>
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	f200 80e1 	bhi.w	8002018 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x34>
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e5e:	e0db      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e60:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e64:	e0db      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e66:	4b73      	ldr	r3, [pc, #460]	; (8002034 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e6a:	e0d8      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e76:	4b6d      	ldr	r3, [pc, #436]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d063      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e82:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	099b      	lsrs	r3, r3, #6
 8001e88:	2200      	movs	r2, #0
 8001e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
 8001e96:	2300      	movs	r3, #0
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e9e:	4622      	mov	r2, r4
 8001ea0:	462b      	mov	r3, r5
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	0159      	lsls	r1, r3, #5
 8001eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb0:	0150      	lsls	r0, r2, #5
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	1a51      	subs	r1, r2, r1
 8001eba:	6139      	str	r1, [r7, #16]
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ed0:	4659      	mov	r1, fp
 8001ed2:	018b      	lsls	r3, r1, #6
 8001ed4:	4651      	mov	r1, sl
 8001ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eda:	4651      	mov	r1, sl
 8001edc:	018a      	lsls	r2, r1, #6
 8001ede:	4651      	mov	r1, sl
 8001ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ee4:	4659      	mov	r1, fp
 8001ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001efe:	4690      	mov	r8, r2
 8001f00:	4699      	mov	r9, r3
 8001f02:	4623      	mov	r3, r4
 8001f04:	eb18 0303 	adds.w	r3, r8, r3
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	462b      	mov	r3, r5
 8001f0c:	eb49 0303 	adc.w	r3, r9, r3
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f1e:	4629      	mov	r1, r5
 8001f20:	024b      	lsls	r3, r1, #9
 8001f22:	4621      	mov	r1, r4
 8001f24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f28:	4621      	mov	r1, r4
 8001f2a:	024a      	lsls	r2, r1, #9
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f32:	2200      	movs	r2, #0
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f3c:	f7fe f9a8 	bl	8000290 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4613      	mov	r3, r2
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f48:	e058      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4a:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	099b      	lsrs	r3, r3, #6
 8001f50:	2200      	movs	r2, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	4611      	mov	r1, r2
 8001f56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f64:	4642      	mov	r2, r8
 8001f66:	464b      	mov	r3, r9
 8001f68:	f04f 0000 	mov.w	r0, #0
 8001f6c:	f04f 0100 	mov.w	r1, #0
 8001f70:	0159      	lsls	r1, r3, #5
 8001f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f76:	0150      	lsls	r0, r2, #5
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f82:	4649      	mov	r1, r9
 8001f84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001fa0:	eb63 050b 	sbc.w	r5, r3, fp
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	00eb      	lsls	r3, r5, #3
 8001fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fb2:	00e2      	lsls	r2, r4, #3
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	4643      	mov	r3, r8
 8001fba:	18e3      	adds	r3, r4, r3
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	464b      	mov	r3, r9
 8001fc0:	eb45 0303 	adc.w	r3, r5, r3
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	028b      	lsls	r3, r1, #10
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fdc:	4621      	mov	r1, r4
 8001fde:	028a      	lsls	r2, r1, #10
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	61fa      	str	r2, [r7, #28]
 8001fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff0:	f7fe f94e 	bl	8000290 <__aeabi_uldivmod>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	0c1b      	lsrs	r3, r3, #16
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	3301      	adds	r3, #1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800200c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800200e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002016:	e002      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCC_GetSysClockFreq+0x204>)
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800201c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800201e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002020:	4618      	mov	r0, r3
 8002022:	3750      	adds	r7, #80	; 0x50
 8002024:	46bd      	mov	sp, r7
 8002026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	00f42400 	.word	0x00f42400
 8002034:	007a1200 	.word	0x007a1200

08002038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_RCC_GetHCLKFreq+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002054:	f7ff fff0 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0a9b      	lsrs	r3, r3, #10
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4903      	ldr	r1, [pc, #12]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	08004048 	.word	0x08004048

08002078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800207c:	f7ff ffdc 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	0b5b      	lsrs	r3, r3, #13
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4903      	ldr	r1, [pc, #12]	; (800209c <HAL_RCC_GetPCLK2Freq+0x24>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40023800 	.word	0x40023800
 800209c:	08004048 	.word	0x08004048

080020a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e041      	b.n	8002136 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7fe fe2e 	bl	8000d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f000 fa96 	bl	8002610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d001      	beq.n	8002158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e04e      	b.n	80021f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a23      	ldr	r2, [pc, #140]	; (8002204 <HAL_TIM_Base_Start_IT+0xc4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d022      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x80>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002182:	d01d      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x80>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <HAL_TIM_Base_Start_IT+0xc8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d018      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x80>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1e      	ldr	r2, [pc, #120]	; (800220c <HAL_TIM_Base_Start_IT+0xcc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d013      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x80>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <HAL_TIM_Base_Start_IT+0xd0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00e      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x80>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <HAL_TIM_Base_Start_IT+0xd4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d009      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x80>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a19      	ldr	r2, [pc, #100]	; (8002218 <HAL_TIM_Base_Start_IT+0xd8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x80>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a18      	ldr	r2, [pc, #96]	; (800221c <HAL_TIM_Base_Start_IT+0xdc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d111      	bne.n	80021e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d010      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e2:	e007      	b.n	80021f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40010000 	.word	0x40010000
 8002208:	40000400 	.word	0x40000400
 800220c:	40000800 	.word	0x40000800
 8002210:	40000c00 	.word	0x40000c00
 8002214:	40010400 	.word	0x40010400
 8002218:	40014000 	.word	0x40014000
 800221c:	40001800 	.word	0x40001800

08002220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b02      	cmp	r3, #2
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0202 	mvn.w	r2, #2
 800224c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f9b5 	bl	80025d2 <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f9a7 	bl	80025be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f9b8 	bl	80025e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b04      	cmp	r3, #4
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b04      	cmp	r3, #4
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0204 	mvn.w	r2, #4
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f98b 	bl	80025d2 <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f97d 	bl	80025be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f98e 	bl	80025e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0208 	mvn.w	r2, #8
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2204      	movs	r2, #4
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f961 	bl	80025d2 <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f953 	bl	80025be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f964 	bl	80025e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b10      	cmp	r3, #16
 8002330:	d122      	bne.n	8002378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b10      	cmp	r3, #16
 800233e:	d11b      	bne.n	8002378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0210 	mvn.w	r2, #16
 8002348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2208      	movs	r2, #8
 800234e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f937 	bl	80025d2 <HAL_TIM_IC_CaptureCallback>
 8002364:	e005      	b.n	8002372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f929 	bl	80025be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f93a 	bl	80025e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b01      	cmp	r3, #1
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0201 	mvn.w	r2, #1
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe f92c 	bl	80005fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ae:	2b80      	cmp	r3, #128	; 0x80
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023bc:	2b80      	cmp	r3, #128	; 0x80
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fae0 	bl	8002990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023da:	2b40      	cmp	r3, #64	; 0x40
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8ff 	bl	80025fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b20      	cmp	r3, #32
 8002408:	d10e      	bne.n	8002428 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b20      	cmp	r3, #32
 8002416:	d107      	bne.n	8002428 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0220 	mvn.w	r2, #32
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 faaa 	bl	800297c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_TIM_ConfigClockSource+0x1c>
 8002448:	2302      	movs	r3, #2
 800244a:	e0b4      	b.n	80025b6 <HAL_TIM_ConfigClockSource+0x186>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800246a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002484:	d03e      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0xd4>
 8002486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800248a:	f200 8087 	bhi.w	800259c <HAL_TIM_ConfigClockSource+0x16c>
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	f000 8086 	beq.w	80025a2 <HAL_TIM_ConfigClockSource+0x172>
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249a:	d87f      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b70      	cmp	r3, #112	; 0x70
 800249e:	d01a      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0xa6>
 80024a0:	2b70      	cmp	r3, #112	; 0x70
 80024a2:	d87b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b60      	cmp	r3, #96	; 0x60
 80024a6:	d050      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x11a>
 80024a8:	2b60      	cmp	r3, #96	; 0x60
 80024aa:	d877      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024ac:	2b50      	cmp	r3, #80	; 0x50
 80024ae:	d03c      	beq.n	800252a <HAL_TIM_ConfigClockSource+0xfa>
 80024b0:	2b50      	cmp	r3, #80	; 0x50
 80024b2:	d873      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	d058      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x13a>
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d86f      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b30      	cmp	r3, #48	; 0x30
 80024be:	d064      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x15a>
 80024c0:	2b30      	cmp	r3, #48	; 0x30
 80024c2:	d86b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d060      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x15a>
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d867      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05c      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x15a>
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d05a      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x15a>
 80024d4:	e062      	b.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f000 f9ad 	bl	8002844 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	609a      	str	r2, [r3, #8]
      break;
 8002502:	e04f      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f000 f996 	bl	8002844 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002526:	609a      	str	r2, [r3, #8]
      break;
 8002528:	e03c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	461a      	mov	r2, r3
 8002538:	f000 f90a 	bl	8002750 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2150      	movs	r1, #80	; 0x50
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f963 	bl	800280e <TIM_ITRx_SetConfig>
      break;
 8002548:	e02c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	461a      	mov	r2, r3
 8002558:	f000 f929 	bl	80027ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2160      	movs	r1, #96	; 0x60
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f953 	bl	800280e <TIM_ITRx_SetConfig>
      break;
 8002568:	e01c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	461a      	mov	r2, r3
 8002578:	f000 f8ea 	bl	8002750 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f943 	bl	800280e <TIM_ITRx_SetConfig>
      break;
 8002588:	e00c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f000 f93a 	bl	800280e <TIM_ITRx_SetConfig>
      break;
 800259a:	e003      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      break;
 80025a0:	e000      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a40      	ldr	r2, [pc, #256]	; (8002724 <TIM_Base_SetConfig+0x114>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d013      	beq.n	8002650 <TIM_Base_SetConfig+0x40>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262e:	d00f      	beq.n	8002650 <TIM_Base_SetConfig+0x40>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a3d      	ldr	r2, [pc, #244]	; (8002728 <TIM_Base_SetConfig+0x118>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00b      	beq.n	8002650 <TIM_Base_SetConfig+0x40>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a3c      	ldr	r2, [pc, #240]	; (800272c <TIM_Base_SetConfig+0x11c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d007      	beq.n	8002650 <TIM_Base_SetConfig+0x40>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a3b      	ldr	r2, [pc, #236]	; (8002730 <TIM_Base_SetConfig+0x120>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d003      	beq.n	8002650 <TIM_Base_SetConfig+0x40>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <TIM_Base_SetConfig+0x124>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d108      	bne.n	8002662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <TIM_Base_SetConfig+0x114>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d02b      	beq.n	80026c2 <TIM_Base_SetConfig+0xb2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002670:	d027      	beq.n	80026c2 <TIM_Base_SetConfig+0xb2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a2c      	ldr	r2, [pc, #176]	; (8002728 <TIM_Base_SetConfig+0x118>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d023      	beq.n	80026c2 <TIM_Base_SetConfig+0xb2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a2b      	ldr	r2, [pc, #172]	; (800272c <TIM_Base_SetConfig+0x11c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01f      	beq.n	80026c2 <TIM_Base_SetConfig+0xb2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <TIM_Base_SetConfig+0x120>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01b      	beq.n	80026c2 <TIM_Base_SetConfig+0xb2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a29      	ldr	r2, [pc, #164]	; (8002734 <TIM_Base_SetConfig+0x124>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d017      	beq.n	80026c2 <TIM_Base_SetConfig+0xb2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a28      	ldr	r2, [pc, #160]	; (8002738 <TIM_Base_SetConfig+0x128>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <TIM_Base_SetConfig+0xb2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a27      	ldr	r2, [pc, #156]	; (800273c <TIM_Base_SetConfig+0x12c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00f      	beq.n	80026c2 <TIM_Base_SetConfig+0xb2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a26      	ldr	r2, [pc, #152]	; (8002740 <TIM_Base_SetConfig+0x130>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00b      	beq.n	80026c2 <TIM_Base_SetConfig+0xb2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a25      	ldr	r2, [pc, #148]	; (8002744 <TIM_Base_SetConfig+0x134>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d007      	beq.n	80026c2 <TIM_Base_SetConfig+0xb2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a24      	ldr	r2, [pc, #144]	; (8002748 <TIM_Base_SetConfig+0x138>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d003      	beq.n	80026c2 <TIM_Base_SetConfig+0xb2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a23      	ldr	r2, [pc, #140]	; (800274c <TIM_Base_SetConfig+0x13c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d108      	bne.n	80026d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <TIM_Base_SetConfig+0x114>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d003      	beq.n	8002708 <TIM_Base_SetConfig+0xf8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <TIM_Base_SetConfig+0x124>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d103      	bne.n	8002710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	615a      	str	r2, [r3, #20]
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40010000 	.word	0x40010000
 8002728:	40000400 	.word	0x40000400
 800272c:	40000800 	.word	0x40000800
 8002730:	40000c00 	.word	0x40000c00
 8002734:	40010400 	.word	0x40010400
 8002738:	40014000 	.word	0x40014000
 800273c:	40014400 	.word	0x40014400
 8002740:	40014800 	.word	0x40014800
 8002744:	40001800 	.word	0x40001800
 8002748:	40001c00 	.word	0x40001c00
 800274c:	40002000 	.word	0x40002000

08002750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	f023 0201 	bic.w	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800277a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f023 030a 	bic.w	r3, r3, #10
 800278c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	621a      	str	r2, [r3, #32]
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b087      	sub	sp, #28
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f023 0210 	bic.w	r2, r3, #16
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	031b      	lsls	r3, r3, #12
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	621a      	str	r2, [r3, #32]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	f043 0307 	orr.w	r3, r3, #7
 8002830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	609a      	str	r2, [r3, #8]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	021a      	lsls	r2, r3, #8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	431a      	orrs	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4313      	orrs	r3, r2
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	609a      	str	r2, [r3, #8]
}
 8002878:	bf00      	nop
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002898:	2302      	movs	r3, #2
 800289a:	e05a      	b.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a21      	ldr	r2, [pc, #132]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e8:	d01d      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d018      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1a      	ldr	r2, [pc, #104]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00e      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a18      	ldr	r2, [pc, #96]	; (8002970 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a17      	ldr	r2, [pc, #92]	; (8002974 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d004      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a15      	ldr	r2, [pc, #84]	; (8002978 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10c      	bne.n	8002940 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800292c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4313      	orrs	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40010000 	.word	0x40010000
 8002964:	40000400 	.word	0x40000400
 8002968:	40000800 	.word	0x40000800
 800296c:	40000c00 	.word	0x40000c00
 8002970:	40010400 	.word	0x40010400
 8002974:	40014000 	.word	0x40014000
 8002978:	40001800 	.word	0x40001800

0800297c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e03f      	b.n	8002a36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe f9d4 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2224      	movs	r2, #36	; 0x24
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f829 	bl	8002a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a44:	b0c0      	sub	sp, #256	; 0x100
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5c:	68d9      	ldr	r1, [r3, #12]
 8002a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	ea40 0301 	orr.w	r3, r0, r1
 8002a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a98:	f021 010c 	bic.w	r1, r1, #12
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aba:	6999      	ldr	r1, [r3, #24]
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	ea40 0301 	orr.w	r3, r0, r1
 8002ac6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b8f      	ldr	r3, [pc, #572]	; (8002d0c <UART_SetConfig+0x2cc>)
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d005      	beq.n	8002ae0 <UART_SetConfig+0xa0>
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b8d      	ldr	r3, [pc, #564]	; (8002d10 <UART_SetConfig+0x2d0>)
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d104      	bne.n	8002aea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ae0:	f7ff faca 	bl	8002078 <HAL_RCC_GetPCLK2Freq>
 8002ae4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ae8:	e003      	b.n	8002af2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aea:	f7ff fab1 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8002aee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002afc:	f040 810c 	bne.w	8002d18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b04:	2200      	movs	r2, #0
 8002b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b12:	4622      	mov	r2, r4
 8002b14:	462b      	mov	r3, r5
 8002b16:	1891      	adds	r1, r2, r2
 8002b18:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b1a:	415b      	adcs	r3, r3
 8002b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b22:	4621      	mov	r1, r4
 8002b24:	eb12 0801 	adds.w	r8, r2, r1
 8002b28:	4629      	mov	r1, r5
 8002b2a:	eb43 0901 	adc.w	r9, r3, r1
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b42:	4690      	mov	r8, r2
 8002b44:	4699      	mov	r9, r3
 8002b46:	4623      	mov	r3, r4
 8002b48:	eb18 0303 	adds.w	r3, r8, r3
 8002b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b50:	462b      	mov	r3, r5
 8002b52:	eb49 0303 	adc.w	r3, r9, r3
 8002b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b6e:	460b      	mov	r3, r1
 8002b70:	18db      	adds	r3, r3, r3
 8002b72:	653b      	str	r3, [r7, #80]	; 0x50
 8002b74:	4613      	mov	r3, r2
 8002b76:	eb42 0303 	adc.w	r3, r2, r3
 8002b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b84:	f7fd fb84 	bl	8000290 <__aeabi_uldivmod>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <UART_SetConfig+0x2d4>)
 8002b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	011c      	lsls	r4, r3, #4
 8002b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ba0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ba4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ba8:	4642      	mov	r2, r8
 8002baa:	464b      	mov	r3, r9
 8002bac:	1891      	adds	r1, r2, r2
 8002bae:	64b9      	str	r1, [r7, #72]	; 0x48
 8002bb0:	415b      	adcs	r3, r3
 8002bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bb8:	4641      	mov	r1, r8
 8002bba:	eb12 0a01 	adds.w	sl, r2, r1
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	eb43 0b01 	adc.w	fp, r3, r1
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bd8:	4692      	mov	sl, r2
 8002bda:	469b      	mov	fp, r3
 8002bdc:	4643      	mov	r3, r8
 8002bde:	eb1a 0303 	adds.w	r3, sl, r3
 8002be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002be6:	464b      	mov	r3, r9
 8002be8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c04:	460b      	mov	r3, r1
 8002c06:	18db      	adds	r3, r3, r3
 8002c08:	643b      	str	r3, [r7, #64]	; 0x40
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	eb42 0303 	adc.w	r3, r2, r3
 8002c10:	647b      	str	r3, [r7, #68]	; 0x44
 8002c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c1a:	f7fd fb39 	bl	8000290 <__aeabi_uldivmod>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	4b3b      	ldr	r3, [pc, #236]	; (8002d14 <UART_SetConfig+0x2d4>)
 8002c26:	fba3 2301 	umull	r2, r3, r3, r1
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2264      	movs	r2, #100	; 0x64
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	1acb      	subs	r3, r1, r3
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c3a:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <UART_SetConfig+0x2d4>)
 8002c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c48:	441c      	add	r4, r3
 8002c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	1891      	adds	r1, r2, r2
 8002c62:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c64:	415b      	adcs	r3, r3
 8002c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	1851      	adds	r1, r2, r1
 8002c70:	6339      	str	r1, [r7, #48]	; 0x30
 8002c72:	4649      	mov	r1, r9
 8002c74:	414b      	adcs	r3, r1
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c84:	4659      	mov	r1, fp
 8002c86:	00cb      	lsls	r3, r1, #3
 8002c88:	4651      	mov	r1, sl
 8002c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c8e:	4651      	mov	r1, sl
 8002c90:	00ca      	lsls	r2, r1, #3
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	4642      	mov	r2, r8
 8002c9a:	189b      	adds	r3, r3, r2
 8002c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ca0:	464b      	mov	r3, r9
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	eb42 0303 	adc.w	r3, r2, r3
 8002ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	18db      	adds	r3, r3, r3
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	eb42 0303 	adc.w	r3, r2, r3
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cd6:	f7fd fadb 	bl	8000290 <__aeabi_uldivmod>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <UART_SetConfig+0x2d4>)
 8002ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	2164      	movs	r1, #100	; 0x64
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	3332      	adds	r3, #50	; 0x32
 8002cf2:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <UART_SetConfig+0x2d4>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	f003 0207 	and.w	r2, r3, #7
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4422      	add	r2, r4
 8002d06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d08:	e105      	b.n	8002f16 <UART_SetConfig+0x4d6>
 8002d0a:	bf00      	nop
 8002d0c:	40011000 	.word	0x40011000
 8002d10:	40011400 	.word	0x40011400
 8002d14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d2a:	4642      	mov	r2, r8
 8002d2c:	464b      	mov	r3, r9
 8002d2e:	1891      	adds	r1, r2, r2
 8002d30:	6239      	str	r1, [r7, #32]
 8002d32:	415b      	adcs	r3, r3
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
 8002d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	1854      	adds	r4, r2, r1
 8002d3e:	4649      	mov	r1, r9
 8002d40:	eb43 0501 	adc.w	r5, r3, r1
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	00eb      	lsls	r3, r5, #3
 8002d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d52:	00e2      	lsls	r2, r4, #3
 8002d54:	4614      	mov	r4, r2
 8002d56:	461d      	mov	r5, r3
 8002d58:	4643      	mov	r3, r8
 8002d5a:	18e3      	adds	r3, r4, r3
 8002d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d60:	464b      	mov	r3, r9
 8002d62:	eb45 0303 	adc.w	r3, r5, r3
 8002d66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d86:	4629      	mov	r1, r5
 8002d88:	008b      	lsls	r3, r1, #2
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d90:	4621      	mov	r1, r4
 8002d92:	008a      	lsls	r2, r1, #2
 8002d94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d98:	f7fd fa7a 	bl	8000290 <__aeabi_uldivmod>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4b60      	ldr	r3, [pc, #384]	; (8002f24 <UART_SetConfig+0x4e4>)
 8002da2:	fba3 2302 	umull	r2, r3, r3, r2
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	011c      	lsls	r4, r3, #4
 8002daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002db4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002db8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	464b      	mov	r3, r9
 8002dc0:	1891      	adds	r1, r2, r2
 8002dc2:	61b9      	str	r1, [r7, #24]
 8002dc4:	415b      	adcs	r3, r3
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dcc:	4641      	mov	r1, r8
 8002dce:	1851      	adds	r1, r2, r1
 8002dd0:	6139      	str	r1, [r7, #16]
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	414b      	adcs	r3, r1
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002de4:	4659      	mov	r1, fp
 8002de6:	00cb      	lsls	r3, r1, #3
 8002de8:	4651      	mov	r1, sl
 8002dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dee:	4651      	mov	r1, sl
 8002df0:	00ca      	lsls	r2, r1, #3
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	4642      	mov	r2, r8
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e00:	464b      	mov	r3, r9
 8002e02:	460a      	mov	r2, r1
 8002e04:	eb42 0303 	adc.w	r3, r2, r3
 8002e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e24:	4649      	mov	r1, r9
 8002e26:	008b      	lsls	r3, r1, #2
 8002e28:	4641      	mov	r1, r8
 8002e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e2e:	4641      	mov	r1, r8
 8002e30:	008a      	lsls	r2, r1, #2
 8002e32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e36:	f7fd fa2b 	bl	8000290 <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <UART_SetConfig+0x4e4>)
 8002e40:	fba3 1302 	umull	r1, r3, r3, r2
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	2164      	movs	r1, #100	; 0x64
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	3332      	adds	r3, #50	; 0x32
 8002e52:	4a34      	ldr	r2, [pc, #208]	; (8002f24 <UART_SetConfig+0x4e4>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e5e:	441c      	add	r4, r3
 8002e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e64:	2200      	movs	r2, #0
 8002e66:	673b      	str	r3, [r7, #112]	; 0x70
 8002e68:	677a      	str	r2, [r7, #116]	; 0x74
 8002e6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e6e:	4642      	mov	r2, r8
 8002e70:	464b      	mov	r3, r9
 8002e72:	1891      	adds	r1, r2, r2
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	415b      	adcs	r3, r3
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e7e:	4641      	mov	r1, r8
 8002e80:	1851      	adds	r1, r2, r1
 8002e82:	6039      	str	r1, [r7, #0]
 8002e84:	4649      	mov	r1, r9
 8002e86:	414b      	adcs	r3, r1
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e96:	4659      	mov	r1, fp
 8002e98:	00cb      	lsls	r3, r1, #3
 8002e9a:	4651      	mov	r1, sl
 8002e9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ea0:	4651      	mov	r1, sl
 8002ea2:	00ca      	lsls	r2, r1, #3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4642      	mov	r2, r8
 8002eac:	189b      	adds	r3, r3, r2
 8002eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	460a      	mov	r2, r1
 8002eb4:	eb42 0303 	adc.w	r3, r2, r3
 8002eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ec4:	667a      	str	r2, [r7, #100]	; 0x64
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ed2:	4649      	mov	r1, r9
 8002ed4:	008b      	lsls	r3, r1, #2
 8002ed6:	4641      	mov	r1, r8
 8002ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002edc:	4641      	mov	r1, r8
 8002ede:	008a      	lsls	r2, r1, #2
 8002ee0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ee4:	f7fd f9d4 	bl	8000290 <__aeabi_uldivmod>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <UART_SetConfig+0x4e4>)
 8002eee:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2164      	movs	r1, #100	; 0x64
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	3332      	adds	r3, #50	; 0x32
 8002f00:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <UART_SetConfig+0x4e4>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	f003 020f 	and.w	r2, r3, #15
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4422      	add	r2, r4
 8002f14:	609a      	str	r2, [r3, #8]
}
 8002f16:	bf00      	nop
 8002f18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f22:	bf00      	nop
 8002f24:	51eb851f 	.word	0x51eb851f

08002f28 <__errno>:
 8002f28:	4b01      	ldr	r3, [pc, #4]	; (8002f30 <__errno+0x8>)
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000010 	.word	0x20000010

08002f34 <__libc_init_array>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	4d0d      	ldr	r5, [pc, #52]	; (8002f6c <__libc_init_array+0x38>)
 8002f38:	4c0d      	ldr	r4, [pc, #52]	; (8002f70 <__libc_init_array+0x3c>)
 8002f3a:	1b64      	subs	r4, r4, r5
 8002f3c:	10a4      	asrs	r4, r4, #2
 8002f3e:	2600      	movs	r6, #0
 8002f40:	42a6      	cmp	r6, r4
 8002f42:	d109      	bne.n	8002f58 <__libc_init_array+0x24>
 8002f44:	4d0b      	ldr	r5, [pc, #44]	; (8002f74 <__libc_init_array+0x40>)
 8002f46:	4c0c      	ldr	r4, [pc, #48]	; (8002f78 <__libc_init_array+0x44>)
 8002f48:	f001 f824 	bl	8003f94 <_init>
 8002f4c:	1b64      	subs	r4, r4, r5
 8002f4e:	10a4      	asrs	r4, r4, #2
 8002f50:	2600      	movs	r6, #0
 8002f52:	42a6      	cmp	r6, r4
 8002f54:	d105      	bne.n	8002f62 <__libc_init_array+0x2e>
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f5c:	4798      	blx	r3
 8002f5e:	3601      	adds	r6, #1
 8002f60:	e7ee      	b.n	8002f40 <__libc_init_array+0xc>
 8002f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f66:	4798      	blx	r3
 8002f68:	3601      	adds	r6, #1
 8002f6a:	e7f2      	b.n	8002f52 <__libc_init_array+0x1e>
 8002f6c:	080040f0 	.word	0x080040f0
 8002f70:	080040f0 	.word	0x080040f0
 8002f74:	080040f0 	.word	0x080040f0
 8002f78:	080040f4 	.word	0x080040f4

08002f7c <memset>:
 8002f7c:	4402      	add	r2, r0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d100      	bne.n	8002f86 <memset+0xa>
 8002f84:	4770      	bx	lr
 8002f86:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8a:	e7f9      	b.n	8002f80 <memset+0x4>

08002f8c <iprintf>:
 8002f8c:	b40f      	push	{r0, r1, r2, r3}
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <iprintf+0x2c>)
 8002f90:	b513      	push	{r0, r1, r4, lr}
 8002f92:	681c      	ldr	r4, [r3, #0]
 8002f94:	b124      	cbz	r4, 8002fa0 <iprintf+0x14>
 8002f96:	69a3      	ldr	r3, [r4, #24]
 8002f98:	b913      	cbnz	r3, 8002fa0 <iprintf+0x14>
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f000 fa5e 	bl	800345c <__sinit>
 8002fa0:	ab05      	add	r3, sp, #20
 8002fa2:	9a04      	ldr	r2, [sp, #16]
 8002fa4:	68a1      	ldr	r1, [r4, #8]
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f000 fc67 	bl	800387c <_vfiprintf_r>
 8002fae:	b002      	add	sp, #8
 8002fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb4:	b004      	add	sp, #16
 8002fb6:	4770      	bx	lr
 8002fb8:	20000010 	.word	0x20000010

08002fbc <_puts_r>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	460e      	mov	r6, r1
 8002fc0:	4605      	mov	r5, r0
 8002fc2:	b118      	cbz	r0, 8002fcc <_puts_r+0x10>
 8002fc4:	6983      	ldr	r3, [r0, #24]
 8002fc6:	b90b      	cbnz	r3, 8002fcc <_puts_r+0x10>
 8002fc8:	f000 fa48 	bl	800345c <__sinit>
 8002fcc:	69ab      	ldr	r3, [r5, #24]
 8002fce:	68ac      	ldr	r4, [r5, #8]
 8002fd0:	b913      	cbnz	r3, 8002fd8 <_puts_r+0x1c>
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f000 fa42 	bl	800345c <__sinit>
 8002fd8:	4b2c      	ldr	r3, [pc, #176]	; (800308c <_puts_r+0xd0>)
 8002fda:	429c      	cmp	r4, r3
 8002fdc:	d120      	bne.n	8003020 <_puts_r+0x64>
 8002fde:	686c      	ldr	r4, [r5, #4]
 8002fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fe2:	07db      	lsls	r3, r3, #31
 8002fe4:	d405      	bmi.n	8002ff2 <_puts_r+0x36>
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	0598      	lsls	r0, r3, #22
 8002fea:	d402      	bmi.n	8002ff2 <_puts_r+0x36>
 8002fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fee:	f000 fad3 	bl	8003598 <__retarget_lock_acquire_recursive>
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	0719      	lsls	r1, r3, #28
 8002ff6:	d51d      	bpl.n	8003034 <_puts_r+0x78>
 8002ff8:	6923      	ldr	r3, [r4, #16]
 8002ffa:	b1db      	cbz	r3, 8003034 <_puts_r+0x78>
 8002ffc:	3e01      	subs	r6, #1
 8002ffe:	68a3      	ldr	r3, [r4, #8]
 8003000:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003004:	3b01      	subs	r3, #1
 8003006:	60a3      	str	r3, [r4, #8]
 8003008:	bb39      	cbnz	r1, 800305a <_puts_r+0x9e>
 800300a:	2b00      	cmp	r3, #0
 800300c:	da38      	bge.n	8003080 <_puts_r+0xc4>
 800300e:	4622      	mov	r2, r4
 8003010:	210a      	movs	r1, #10
 8003012:	4628      	mov	r0, r5
 8003014:	f000 f848 	bl	80030a8 <__swbuf_r>
 8003018:	3001      	adds	r0, #1
 800301a:	d011      	beq.n	8003040 <_puts_r+0x84>
 800301c:	250a      	movs	r5, #10
 800301e:	e011      	b.n	8003044 <_puts_r+0x88>
 8003020:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <_puts_r+0xd4>)
 8003022:	429c      	cmp	r4, r3
 8003024:	d101      	bne.n	800302a <_puts_r+0x6e>
 8003026:	68ac      	ldr	r4, [r5, #8]
 8003028:	e7da      	b.n	8002fe0 <_puts_r+0x24>
 800302a:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <_puts_r+0xd8>)
 800302c:	429c      	cmp	r4, r3
 800302e:	bf08      	it	eq
 8003030:	68ec      	ldreq	r4, [r5, #12]
 8003032:	e7d5      	b.n	8002fe0 <_puts_r+0x24>
 8003034:	4621      	mov	r1, r4
 8003036:	4628      	mov	r0, r5
 8003038:	f000 f888 	bl	800314c <__swsetup_r>
 800303c:	2800      	cmp	r0, #0
 800303e:	d0dd      	beq.n	8002ffc <_puts_r+0x40>
 8003040:	f04f 35ff 	mov.w	r5, #4294967295
 8003044:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003046:	07da      	lsls	r2, r3, #31
 8003048:	d405      	bmi.n	8003056 <_puts_r+0x9a>
 800304a:	89a3      	ldrh	r3, [r4, #12]
 800304c:	059b      	lsls	r3, r3, #22
 800304e:	d402      	bmi.n	8003056 <_puts_r+0x9a>
 8003050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003052:	f000 faa2 	bl	800359a <__retarget_lock_release_recursive>
 8003056:	4628      	mov	r0, r5
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	2b00      	cmp	r3, #0
 800305c:	da04      	bge.n	8003068 <_puts_r+0xac>
 800305e:	69a2      	ldr	r2, [r4, #24]
 8003060:	429a      	cmp	r2, r3
 8003062:	dc06      	bgt.n	8003072 <_puts_r+0xb6>
 8003064:	290a      	cmp	r1, #10
 8003066:	d004      	beq.n	8003072 <_puts_r+0xb6>
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	6022      	str	r2, [r4, #0]
 800306e:	7019      	strb	r1, [r3, #0]
 8003070:	e7c5      	b.n	8002ffe <_puts_r+0x42>
 8003072:	4622      	mov	r2, r4
 8003074:	4628      	mov	r0, r5
 8003076:	f000 f817 	bl	80030a8 <__swbuf_r>
 800307a:	3001      	adds	r0, #1
 800307c:	d1bf      	bne.n	8002ffe <_puts_r+0x42>
 800307e:	e7df      	b.n	8003040 <_puts_r+0x84>
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	250a      	movs	r5, #10
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	6022      	str	r2, [r4, #0]
 8003088:	701d      	strb	r5, [r3, #0]
 800308a:	e7db      	b.n	8003044 <_puts_r+0x88>
 800308c:	08004074 	.word	0x08004074
 8003090:	08004094 	.word	0x08004094
 8003094:	08004054 	.word	0x08004054

08003098 <puts>:
 8003098:	4b02      	ldr	r3, [pc, #8]	; (80030a4 <puts+0xc>)
 800309a:	4601      	mov	r1, r0
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	f7ff bf8d 	b.w	8002fbc <_puts_r>
 80030a2:	bf00      	nop
 80030a4:	20000010 	.word	0x20000010

080030a8 <__swbuf_r>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	460e      	mov	r6, r1
 80030ac:	4614      	mov	r4, r2
 80030ae:	4605      	mov	r5, r0
 80030b0:	b118      	cbz	r0, 80030ba <__swbuf_r+0x12>
 80030b2:	6983      	ldr	r3, [r0, #24]
 80030b4:	b90b      	cbnz	r3, 80030ba <__swbuf_r+0x12>
 80030b6:	f000 f9d1 	bl	800345c <__sinit>
 80030ba:	4b21      	ldr	r3, [pc, #132]	; (8003140 <__swbuf_r+0x98>)
 80030bc:	429c      	cmp	r4, r3
 80030be:	d12b      	bne.n	8003118 <__swbuf_r+0x70>
 80030c0:	686c      	ldr	r4, [r5, #4]
 80030c2:	69a3      	ldr	r3, [r4, #24]
 80030c4:	60a3      	str	r3, [r4, #8]
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	071a      	lsls	r2, r3, #28
 80030ca:	d52f      	bpl.n	800312c <__swbuf_r+0x84>
 80030cc:	6923      	ldr	r3, [r4, #16]
 80030ce:	b36b      	cbz	r3, 800312c <__swbuf_r+0x84>
 80030d0:	6923      	ldr	r3, [r4, #16]
 80030d2:	6820      	ldr	r0, [r4, #0]
 80030d4:	1ac0      	subs	r0, r0, r3
 80030d6:	6963      	ldr	r3, [r4, #20]
 80030d8:	b2f6      	uxtb	r6, r6
 80030da:	4283      	cmp	r3, r0
 80030dc:	4637      	mov	r7, r6
 80030de:	dc04      	bgt.n	80030ea <__swbuf_r+0x42>
 80030e0:	4621      	mov	r1, r4
 80030e2:	4628      	mov	r0, r5
 80030e4:	f000 f926 	bl	8003334 <_fflush_r>
 80030e8:	bb30      	cbnz	r0, 8003138 <__swbuf_r+0x90>
 80030ea:	68a3      	ldr	r3, [r4, #8]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	60a3      	str	r3, [r4, #8]
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	6022      	str	r2, [r4, #0]
 80030f6:	701e      	strb	r6, [r3, #0]
 80030f8:	6963      	ldr	r3, [r4, #20]
 80030fa:	3001      	adds	r0, #1
 80030fc:	4283      	cmp	r3, r0
 80030fe:	d004      	beq.n	800310a <__swbuf_r+0x62>
 8003100:	89a3      	ldrh	r3, [r4, #12]
 8003102:	07db      	lsls	r3, r3, #31
 8003104:	d506      	bpl.n	8003114 <__swbuf_r+0x6c>
 8003106:	2e0a      	cmp	r6, #10
 8003108:	d104      	bne.n	8003114 <__swbuf_r+0x6c>
 800310a:	4621      	mov	r1, r4
 800310c:	4628      	mov	r0, r5
 800310e:	f000 f911 	bl	8003334 <_fflush_r>
 8003112:	b988      	cbnz	r0, 8003138 <__swbuf_r+0x90>
 8003114:	4638      	mov	r0, r7
 8003116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <__swbuf_r+0x9c>)
 800311a:	429c      	cmp	r4, r3
 800311c:	d101      	bne.n	8003122 <__swbuf_r+0x7a>
 800311e:	68ac      	ldr	r4, [r5, #8]
 8003120:	e7cf      	b.n	80030c2 <__swbuf_r+0x1a>
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <__swbuf_r+0xa0>)
 8003124:	429c      	cmp	r4, r3
 8003126:	bf08      	it	eq
 8003128:	68ec      	ldreq	r4, [r5, #12]
 800312a:	e7ca      	b.n	80030c2 <__swbuf_r+0x1a>
 800312c:	4621      	mov	r1, r4
 800312e:	4628      	mov	r0, r5
 8003130:	f000 f80c 	bl	800314c <__swsetup_r>
 8003134:	2800      	cmp	r0, #0
 8003136:	d0cb      	beq.n	80030d0 <__swbuf_r+0x28>
 8003138:	f04f 37ff 	mov.w	r7, #4294967295
 800313c:	e7ea      	b.n	8003114 <__swbuf_r+0x6c>
 800313e:	bf00      	nop
 8003140:	08004074 	.word	0x08004074
 8003144:	08004094 	.word	0x08004094
 8003148:	08004054 	.word	0x08004054

0800314c <__swsetup_r>:
 800314c:	4b32      	ldr	r3, [pc, #200]	; (8003218 <__swsetup_r+0xcc>)
 800314e:	b570      	push	{r4, r5, r6, lr}
 8003150:	681d      	ldr	r5, [r3, #0]
 8003152:	4606      	mov	r6, r0
 8003154:	460c      	mov	r4, r1
 8003156:	b125      	cbz	r5, 8003162 <__swsetup_r+0x16>
 8003158:	69ab      	ldr	r3, [r5, #24]
 800315a:	b913      	cbnz	r3, 8003162 <__swsetup_r+0x16>
 800315c:	4628      	mov	r0, r5
 800315e:	f000 f97d 	bl	800345c <__sinit>
 8003162:	4b2e      	ldr	r3, [pc, #184]	; (800321c <__swsetup_r+0xd0>)
 8003164:	429c      	cmp	r4, r3
 8003166:	d10f      	bne.n	8003188 <__swsetup_r+0x3c>
 8003168:	686c      	ldr	r4, [r5, #4]
 800316a:	89a3      	ldrh	r3, [r4, #12]
 800316c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003170:	0719      	lsls	r1, r3, #28
 8003172:	d42c      	bmi.n	80031ce <__swsetup_r+0x82>
 8003174:	06dd      	lsls	r5, r3, #27
 8003176:	d411      	bmi.n	800319c <__swsetup_r+0x50>
 8003178:	2309      	movs	r3, #9
 800317a:	6033      	str	r3, [r6, #0]
 800317c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003180:	81a3      	strh	r3, [r4, #12]
 8003182:	f04f 30ff 	mov.w	r0, #4294967295
 8003186:	e03e      	b.n	8003206 <__swsetup_r+0xba>
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <__swsetup_r+0xd4>)
 800318a:	429c      	cmp	r4, r3
 800318c:	d101      	bne.n	8003192 <__swsetup_r+0x46>
 800318e:	68ac      	ldr	r4, [r5, #8]
 8003190:	e7eb      	b.n	800316a <__swsetup_r+0x1e>
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <__swsetup_r+0xd8>)
 8003194:	429c      	cmp	r4, r3
 8003196:	bf08      	it	eq
 8003198:	68ec      	ldreq	r4, [r5, #12]
 800319a:	e7e6      	b.n	800316a <__swsetup_r+0x1e>
 800319c:	0758      	lsls	r0, r3, #29
 800319e:	d512      	bpl.n	80031c6 <__swsetup_r+0x7a>
 80031a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031a2:	b141      	cbz	r1, 80031b6 <__swsetup_r+0x6a>
 80031a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031a8:	4299      	cmp	r1, r3
 80031aa:	d002      	beq.n	80031b2 <__swsetup_r+0x66>
 80031ac:	4630      	mov	r0, r6
 80031ae:	f000 fa5b 	bl	8003668 <_free_r>
 80031b2:	2300      	movs	r3, #0
 80031b4:	6363      	str	r3, [r4, #52]	; 0x34
 80031b6:	89a3      	ldrh	r3, [r4, #12]
 80031b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031bc:	81a3      	strh	r3, [r4, #12]
 80031be:	2300      	movs	r3, #0
 80031c0:	6063      	str	r3, [r4, #4]
 80031c2:	6923      	ldr	r3, [r4, #16]
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	89a3      	ldrh	r3, [r4, #12]
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	81a3      	strh	r3, [r4, #12]
 80031ce:	6923      	ldr	r3, [r4, #16]
 80031d0:	b94b      	cbnz	r3, 80031e6 <__swsetup_r+0x9a>
 80031d2:	89a3      	ldrh	r3, [r4, #12]
 80031d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031dc:	d003      	beq.n	80031e6 <__swsetup_r+0x9a>
 80031de:	4621      	mov	r1, r4
 80031e0:	4630      	mov	r0, r6
 80031e2:	f000 fa01 	bl	80035e8 <__smakebuf_r>
 80031e6:	89a0      	ldrh	r0, [r4, #12]
 80031e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031ec:	f010 0301 	ands.w	r3, r0, #1
 80031f0:	d00a      	beq.n	8003208 <__swsetup_r+0xbc>
 80031f2:	2300      	movs	r3, #0
 80031f4:	60a3      	str	r3, [r4, #8]
 80031f6:	6963      	ldr	r3, [r4, #20]
 80031f8:	425b      	negs	r3, r3
 80031fa:	61a3      	str	r3, [r4, #24]
 80031fc:	6923      	ldr	r3, [r4, #16]
 80031fe:	b943      	cbnz	r3, 8003212 <__swsetup_r+0xc6>
 8003200:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003204:	d1ba      	bne.n	800317c <__swsetup_r+0x30>
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	0781      	lsls	r1, r0, #30
 800320a:	bf58      	it	pl
 800320c:	6963      	ldrpl	r3, [r4, #20]
 800320e:	60a3      	str	r3, [r4, #8]
 8003210:	e7f4      	b.n	80031fc <__swsetup_r+0xb0>
 8003212:	2000      	movs	r0, #0
 8003214:	e7f7      	b.n	8003206 <__swsetup_r+0xba>
 8003216:	bf00      	nop
 8003218:	20000010 	.word	0x20000010
 800321c:	08004074 	.word	0x08004074
 8003220:	08004094 	.word	0x08004094
 8003224:	08004054 	.word	0x08004054

08003228 <__sflush_r>:
 8003228:	898a      	ldrh	r2, [r1, #12]
 800322a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800322e:	4605      	mov	r5, r0
 8003230:	0710      	lsls	r0, r2, #28
 8003232:	460c      	mov	r4, r1
 8003234:	d458      	bmi.n	80032e8 <__sflush_r+0xc0>
 8003236:	684b      	ldr	r3, [r1, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	dc05      	bgt.n	8003248 <__sflush_r+0x20>
 800323c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	dc02      	bgt.n	8003248 <__sflush_r+0x20>
 8003242:	2000      	movs	r0, #0
 8003244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800324a:	2e00      	cmp	r6, #0
 800324c:	d0f9      	beq.n	8003242 <__sflush_r+0x1a>
 800324e:	2300      	movs	r3, #0
 8003250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003254:	682f      	ldr	r7, [r5, #0]
 8003256:	602b      	str	r3, [r5, #0]
 8003258:	d032      	beq.n	80032c0 <__sflush_r+0x98>
 800325a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800325c:	89a3      	ldrh	r3, [r4, #12]
 800325e:	075a      	lsls	r2, r3, #29
 8003260:	d505      	bpl.n	800326e <__sflush_r+0x46>
 8003262:	6863      	ldr	r3, [r4, #4]
 8003264:	1ac0      	subs	r0, r0, r3
 8003266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003268:	b10b      	cbz	r3, 800326e <__sflush_r+0x46>
 800326a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800326c:	1ac0      	subs	r0, r0, r3
 800326e:	2300      	movs	r3, #0
 8003270:	4602      	mov	r2, r0
 8003272:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003274:	6a21      	ldr	r1, [r4, #32]
 8003276:	4628      	mov	r0, r5
 8003278:	47b0      	blx	r6
 800327a:	1c43      	adds	r3, r0, #1
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	d106      	bne.n	800328e <__sflush_r+0x66>
 8003280:	6829      	ldr	r1, [r5, #0]
 8003282:	291d      	cmp	r1, #29
 8003284:	d82c      	bhi.n	80032e0 <__sflush_r+0xb8>
 8003286:	4a2a      	ldr	r2, [pc, #168]	; (8003330 <__sflush_r+0x108>)
 8003288:	40ca      	lsrs	r2, r1
 800328a:	07d6      	lsls	r6, r2, #31
 800328c:	d528      	bpl.n	80032e0 <__sflush_r+0xb8>
 800328e:	2200      	movs	r2, #0
 8003290:	6062      	str	r2, [r4, #4]
 8003292:	04d9      	lsls	r1, r3, #19
 8003294:	6922      	ldr	r2, [r4, #16]
 8003296:	6022      	str	r2, [r4, #0]
 8003298:	d504      	bpl.n	80032a4 <__sflush_r+0x7c>
 800329a:	1c42      	adds	r2, r0, #1
 800329c:	d101      	bne.n	80032a2 <__sflush_r+0x7a>
 800329e:	682b      	ldr	r3, [r5, #0]
 80032a0:	b903      	cbnz	r3, 80032a4 <__sflush_r+0x7c>
 80032a2:	6560      	str	r0, [r4, #84]	; 0x54
 80032a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032a6:	602f      	str	r7, [r5, #0]
 80032a8:	2900      	cmp	r1, #0
 80032aa:	d0ca      	beq.n	8003242 <__sflush_r+0x1a>
 80032ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032b0:	4299      	cmp	r1, r3
 80032b2:	d002      	beq.n	80032ba <__sflush_r+0x92>
 80032b4:	4628      	mov	r0, r5
 80032b6:	f000 f9d7 	bl	8003668 <_free_r>
 80032ba:	2000      	movs	r0, #0
 80032bc:	6360      	str	r0, [r4, #52]	; 0x34
 80032be:	e7c1      	b.n	8003244 <__sflush_r+0x1c>
 80032c0:	6a21      	ldr	r1, [r4, #32]
 80032c2:	2301      	movs	r3, #1
 80032c4:	4628      	mov	r0, r5
 80032c6:	47b0      	blx	r6
 80032c8:	1c41      	adds	r1, r0, #1
 80032ca:	d1c7      	bne.n	800325c <__sflush_r+0x34>
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0c4      	beq.n	800325c <__sflush_r+0x34>
 80032d2:	2b1d      	cmp	r3, #29
 80032d4:	d001      	beq.n	80032da <__sflush_r+0xb2>
 80032d6:	2b16      	cmp	r3, #22
 80032d8:	d101      	bne.n	80032de <__sflush_r+0xb6>
 80032da:	602f      	str	r7, [r5, #0]
 80032dc:	e7b1      	b.n	8003242 <__sflush_r+0x1a>
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e4:	81a3      	strh	r3, [r4, #12]
 80032e6:	e7ad      	b.n	8003244 <__sflush_r+0x1c>
 80032e8:	690f      	ldr	r7, [r1, #16]
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d0a9      	beq.n	8003242 <__sflush_r+0x1a>
 80032ee:	0793      	lsls	r3, r2, #30
 80032f0:	680e      	ldr	r6, [r1, #0]
 80032f2:	bf08      	it	eq
 80032f4:	694b      	ldreq	r3, [r1, #20]
 80032f6:	600f      	str	r7, [r1, #0]
 80032f8:	bf18      	it	ne
 80032fa:	2300      	movne	r3, #0
 80032fc:	eba6 0807 	sub.w	r8, r6, r7
 8003300:	608b      	str	r3, [r1, #8]
 8003302:	f1b8 0f00 	cmp.w	r8, #0
 8003306:	dd9c      	ble.n	8003242 <__sflush_r+0x1a>
 8003308:	6a21      	ldr	r1, [r4, #32]
 800330a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800330c:	4643      	mov	r3, r8
 800330e:	463a      	mov	r2, r7
 8003310:	4628      	mov	r0, r5
 8003312:	47b0      	blx	r6
 8003314:	2800      	cmp	r0, #0
 8003316:	dc06      	bgt.n	8003326 <__sflush_r+0xfe>
 8003318:	89a3      	ldrh	r3, [r4, #12]
 800331a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800331e:	81a3      	strh	r3, [r4, #12]
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	e78e      	b.n	8003244 <__sflush_r+0x1c>
 8003326:	4407      	add	r7, r0
 8003328:	eba8 0800 	sub.w	r8, r8, r0
 800332c:	e7e9      	b.n	8003302 <__sflush_r+0xda>
 800332e:	bf00      	nop
 8003330:	20400001 	.word	0x20400001

08003334 <_fflush_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	690b      	ldr	r3, [r1, #16]
 8003338:	4605      	mov	r5, r0
 800333a:	460c      	mov	r4, r1
 800333c:	b913      	cbnz	r3, 8003344 <_fflush_r+0x10>
 800333e:	2500      	movs	r5, #0
 8003340:	4628      	mov	r0, r5
 8003342:	bd38      	pop	{r3, r4, r5, pc}
 8003344:	b118      	cbz	r0, 800334e <_fflush_r+0x1a>
 8003346:	6983      	ldr	r3, [r0, #24]
 8003348:	b90b      	cbnz	r3, 800334e <_fflush_r+0x1a>
 800334a:	f000 f887 	bl	800345c <__sinit>
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <_fflush_r+0x6c>)
 8003350:	429c      	cmp	r4, r3
 8003352:	d11b      	bne.n	800338c <_fflush_r+0x58>
 8003354:	686c      	ldr	r4, [r5, #4]
 8003356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ef      	beq.n	800333e <_fflush_r+0xa>
 800335e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003360:	07d0      	lsls	r0, r2, #31
 8003362:	d404      	bmi.n	800336e <_fflush_r+0x3a>
 8003364:	0599      	lsls	r1, r3, #22
 8003366:	d402      	bmi.n	800336e <_fflush_r+0x3a>
 8003368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800336a:	f000 f915 	bl	8003598 <__retarget_lock_acquire_recursive>
 800336e:	4628      	mov	r0, r5
 8003370:	4621      	mov	r1, r4
 8003372:	f7ff ff59 	bl	8003228 <__sflush_r>
 8003376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003378:	07da      	lsls	r2, r3, #31
 800337a:	4605      	mov	r5, r0
 800337c:	d4e0      	bmi.n	8003340 <_fflush_r+0xc>
 800337e:	89a3      	ldrh	r3, [r4, #12]
 8003380:	059b      	lsls	r3, r3, #22
 8003382:	d4dd      	bmi.n	8003340 <_fflush_r+0xc>
 8003384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003386:	f000 f908 	bl	800359a <__retarget_lock_release_recursive>
 800338a:	e7d9      	b.n	8003340 <_fflush_r+0xc>
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <_fflush_r+0x70>)
 800338e:	429c      	cmp	r4, r3
 8003390:	d101      	bne.n	8003396 <_fflush_r+0x62>
 8003392:	68ac      	ldr	r4, [r5, #8]
 8003394:	e7df      	b.n	8003356 <_fflush_r+0x22>
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <_fflush_r+0x74>)
 8003398:	429c      	cmp	r4, r3
 800339a:	bf08      	it	eq
 800339c:	68ec      	ldreq	r4, [r5, #12]
 800339e:	e7da      	b.n	8003356 <_fflush_r+0x22>
 80033a0:	08004074 	.word	0x08004074
 80033a4:	08004094 	.word	0x08004094
 80033a8:	08004054 	.word	0x08004054

080033ac <std>:
 80033ac:	2300      	movs	r3, #0
 80033ae:	b510      	push	{r4, lr}
 80033b0:	4604      	mov	r4, r0
 80033b2:	e9c0 3300 	strd	r3, r3, [r0]
 80033b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033ba:	6083      	str	r3, [r0, #8]
 80033bc:	8181      	strh	r1, [r0, #12]
 80033be:	6643      	str	r3, [r0, #100]	; 0x64
 80033c0:	81c2      	strh	r2, [r0, #14]
 80033c2:	6183      	str	r3, [r0, #24]
 80033c4:	4619      	mov	r1, r3
 80033c6:	2208      	movs	r2, #8
 80033c8:	305c      	adds	r0, #92	; 0x5c
 80033ca:	f7ff fdd7 	bl	8002f7c <memset>
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <std+0x38>)
 80033d0:	6263      	str	r3, [r4, #36]	; 0x24
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <std+0x3c>)
 80033d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <std+0x40>)
 80033d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <std+0x44>)
 80033dc:	6224      	str	r4, [r4, #32]
 80033de:	6323      	str	r3, [r4, #48]	; 0x30
 80033e0:	bd10      	pop	{r4, pc}
 80033e2:	bf00      	nop
 80033e4:	08003e25 	.word	0x08003e25
 80033e8:	08003e47 	.word	0x08003e47
 80033ec:	08003e7f 	.word	0x08003e7f
 80033f0:	08003ea3 	.word	0x08003ea3

080033f4 <_cleanup_r>:
 80033f4:	4901      	ldr	r1, [pc, #4]	; (80033fc <_cleanup_r+0x8>)
 80033f6:	f000 b8af 	b.w	8003558 <_fwalk_reent>
 80033fa:	bf00      	nop
 80033fc:	08003335 	.word	0x08003335

08003400 <__sfmoreglue>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	2268      	movs	r2, #104	; 0x68
 8003404:	1e4d      	subs	r5, r1, #1
 8003406:	4355      	muls	r5, r2
 8003408:	460e      	mov	r6, r1
 800340a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800340e:	f000 f997 	bl	8003740 <_malloc_r>
 8003412:	4604      	mov	r4, r0
 8003414:	b140      	cbz	r0, 8003428 <__sfmoreglue+0x28>
 8003416:	2100      	movs	r1, #0
 8003418:	e9c0 1600 	strd	r1, r6, [r0]
 800341c:	300c      	adds	r0, #12
 800341e:	60a0      	str	r0, [r4, #8]
 8003420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003424:	f7ff fdaa 	bl	8002f7c <memset>
 8003428:	4620      	mov	r0, r4
 800342a:	bd70      	pop	{r4, r5, r6, pc}

0800342c <__sfp_lock_acquire>:
 800342c:	4801      	ldr	r0, [pc, #4]	; (8003434 <__sfp_lock_acquire+0x8>)
 800342e:	f000 b8b3 	b.w	8003598 <__retarget_lock_acquire_recursive>
 8003432:	bf00      	nop
 8003434:	20000129 	.word	0x20000129

08003438 <__sfp_lock_release>:
 8003438:	4801      	ldr	r0, [pc, #4]	; (8003440 <__sfp_lock_release+0x8>)
 800343a:	f000 b8ae 	b.w	800359a <__retarget_lock_release_recursive>
 800343e:	bf00      	nop
 8003440:	20000129 	.word	0x20000129

08003444 <__sinit_lock_acquire>:
 8003444:	4801      	ldr	r0, [pc, #4]	; (800344c <__sinit_lock_acquire+0x8>)
 8003446:	f000 b8a7 	b.w	8003598 <__retarget_lock_acquire_recursive>
 800344a:	bf00      	nop
 800344c:	2000012a 	.word	0x2000012a

08003450 <__sinit_lock_release>:
 8003450:	4801      	ldr	r0, [pc, #4]	; (8003458 <__sinit_lock_release+0x8>)
 8003452:	f000 b8a2 	b.w	800359a <__retarget_lock_release_recursive>
 8003456:	bf00      	nop
 8003458:	2000012a 	.word	0x2000012a

0800345c <__sinit>:
 800345c:	b510      	push	{r4, lr}
 800345e:	4604      	mov	r4, r0
 8003460:	f7ff fff0 	bl	8003444 <__sinit_lock_acquire>
 8003464:	69a3      	ldr	r3, [r4, #24]
 8003466:	b11b      	cbz	r3, 8003470 <__sinit+0x14>
 8003468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800346c:	f7ff bff0 	b.w	8003450 <__sinit_lock_release>
 8003470:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003474:	6523      	str	r3, [r4, #80]	; 0x50
 8003476:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <__sinit+0x68>)
 8003478:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <__sinit+0x6c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	62a2      	str	r2, [r4, #40]	; 0x28
 800347e:	42a3      	cmp	r3, r4
 8003480:	bf04      	itt	eq
 8003482:	2301      	moveq	r3, #1
 8003484:	61a3      	streq	r3, [r4, #24]
 8003486:	4620      	mov	r0, r4
 8003488:	f000 f820 	bl	80034cc <__sfp>
 800348c:	6060      	str	r0, [r4, #4]
 800348e:	4620      	mov	r0, r4
 8003490:	f000 f81c 	bl	80034cc <__sfp>
 8003494:	60a0      	str	r0, [r4, #8]
 8003496:	4620      	mov	r0, r4
 8003498:	f000 f818 	bl	80034cc <__sfp>
 800349c:	2200      	movs	r2, #0
 800349e:	60e0      	str	r0, [r4, #12]
 80034a0:	2104      	movs	r1, #4
 80034a2:	6860      	ldr	r0, [r4, #4]
 80034a4:	f7ff ff82 	bl	80033ac <std>
 80034a8:	68a0      	ldr	r0, [r4, #8]
 80034aa:	2201      	movs	r2, #1
 80034ac:	2109      	movs	r1, #9
 80034ae:	f7ff ff7d 	bl	80033ac <std>
 80034b2:	68e0      	ldr	r0, [r4, #12]
 80034b4:	2202      	movs	r2, #2
 80034b6:	2112      	movs	r1, #18
 80034b8:	f7ff ff78 	bl	80033ac <std>
 80034bc:	2301      	movs	r3, #1
 80034be:	61a3      	str	r3, [r4, #24]
 80034c0:	e7d2      	b.n	8003468 <__sinit+0xc>
 80034c2:	bf00      	nop
 80034c4:	08004050 	.word	0x08004050
 80034c8:	080033f5 	.word	0x080033f5

080034cc <__sfp>:
 80034cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ce:	4607      	mov	r7, r0
 80034d0:	f7ff ffac 	bl	800342c <__sfp_lock_acquire>
 80034d4:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <__sfp+0x84>)
 80034d6:	681e      	ldr	r6, [r3, #0]
 80034d8:	69b3      	ldr	r3, [r6, #24]
 80034da:	b913      	cbnz	r3, 80034e2 <__sfp+0x16>
 80034dc:	4630      	mov	r0, r6
 80034de:	f7ff ffbd 	bl	800345c <__sinit>
 80034e2:	3648      	adds	r6, #72	; 0x48
 80034e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	d503      	bpl.n	80034f4 <__sfp+0x28>
 80034ec:	6833      	ldr	r3, [r6, #0]
 80034ee:	b30b      	cbz	r3, 8003534 <__sfp+0x68>
 80034f0:	6836      	ldr	r6, [r6, #0]
 80034f2:	e7f7      	b.n	80034e4 <__sfp+0x18>
 80034f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034f8:	b9d5      	cbnz	r5, 8003530 <__sfp+0x64>
 80034fa:	4b16      	ldr	r3, [pc, #88]	; (8003554 <__sfp+0x88>)
 80034fc:	60e3      	str	r3, [r4, #12]
 80034fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003502:	6665      	str	r5, [r4, #100]	; 0x64
 8003504:	f000 f847 	bl	8003596 <__retarget_lock_init_recursive>
 8003508:	f7ff ff96 	bl	8003438 <__sfp_lock_release>
 800350c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003510:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003514:	6025      	str	r5, [r4, #0]
 8003516:	61a5      	str	r5, [r4, #24]
 8003518:	2208      	movs	r2, #8
 800351a:	4629      	mov	r1, r5
 800351c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003520:	f7ff fd2c 	bl	8002f7c <memset>
 8003524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800352c:	4620      	mov	r0, r4
 800352e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003530:	3468      	adds	r4, #104	; 0x68
 8003532:	e7d9      	b.n	80034e8 <__sfp+0x1c>
 8003534:	2104      	movs	r1, #4
 8003536:	4638      	mov	r0, r7
 8003538:	f7ff ff62 	bl	8003400 <__sfmoreglue>
 800353c:	4604      	mov	r4, r0
 800353e:	6030      	str	r0, [r6, #0]
 8003540:	2800      	cmp	r0, #0
 8003542:	d1d5      	bne.n	80034f0 <__sfp+0x24>
 8003544:	f7ff ff78 	bl	8003438 <__sfp_lock_release>
 8003548:	230c      	movs	r3, #12
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	e7ee      	b.n	800352c <__sfp+0x60>
 800354e:	bf00      	nop
 8003550:	08004050 	.word	0x08004050
 8003554:	ffff0001 	.word	0xffff0001

08003558 <_fwalk_reent>:
 8003558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800355c:	4606      	mov	r6, r0
 800355e:	4688      	mov	r8, r1
 8003560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003564:	2700      	movs	r7, #0
 8003566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800356a:	f1b9 0901 	subs.w	r9, r9, #1
 800356e:	d505      	bpl.n	800357c <_fwalk_reent+0x24>
 8003570:	6824      	ldr	r4, [r4, #0]
 8003572:	2c00      	cmp	r4, #0
 8003574:	d1f7      	bne.n	8003566 <_fwalk_reent+0xe>
 8003576:	4638      	mov	r0, r7
 8003578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800357c:	89ab      	ldrh	r3, [r5, #12]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d907      	bls.n	8003592 <_fwalk_reent+0x3a>
 8003582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003586:	3301      	adds	r3, #1
 8003588:	d003      	beq.n	8003592 <_fwalk_reent+0x3a>
 800358a:	4629      	mov	r1, r5
 800358c:	4630      	mov	r0, r6
 800358e:	47c0      	blx	r8
 8003590:	4307      	orrs	r7, r0
 8003592:	3568      	adds	r5, #104	; 0x68
 8003594:	e7e9      	b.n	800356a <_fwalk_reent+0x12>

08003596 <__retarget_lock_init_recursive>:
 8003596:	4770      	bx	lr

08003598 <__retarget_lock_acquire_recursive>:
 8003598:	4770      	bx	lr

0800359a <__retarget_lock_release_recursive>:
 800359a:	4770      	bx	lr

0800359c <__swhatbuf_r>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	460e      	mov	r6, r1
 80035a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035a4:	2900      	cmp	r1, #0
 80035a6:	b096      	sub	sp, #88	; 0x58
 80035a8:	4614      	mov	r4, r2
 80035aa:	461d      	mov	r5, r3
 80035ac:	da08      	bge.n	80035c0 <__swhatbuf_r+0x24>
 80035ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	602a      	str	r2, [r5, #0]
 80035b6:	061a      	lsls	r2, r3, #24
 80035b8:	d410      	bmi.n	80035dc <__swhatbuf_r+0x40>
 80035ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035be:	e00e      	b.n	80035de <__swhatbuf_r+0x42>
 80035c0:	466a      	mov	r2, sp
 80035c2:	f000 fc95 	bl	8003ef0 <_fstat_r>
 80035c6:	2800      	cmp	r0, #0
 80035c8:	dbf1      	blt.n	80035ae <__swhatbuf_r+0x12>
 80035ca:	9a01      	ldr	r2, [sp, #4]
 80035cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035d4:	425a      	negs	r2, r3
 80035d6:	415a      	adcs	r2, r3
 80035d8:	602a      	str	r2, [r5, #0]
 80035da:	e7ee      	b.n	80035ba <__swhatbuf_r+0x1e>
 80035dc:	2340      	movs	r3, #64	; 0x40
 80035de:	2000      	movs	r0, #0
 80035e0:	6023      	str	r3, [r4, #0]
 80035e2:	b016      	add	sp, #88	; 0x58
 80035e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080035e8 <__smakebuf_r>:
 80035e8:	898b      	ldrh	r3, [r1, #12]
 80035ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035ec:	079d      	lsls	r5, r3, #30
 80035ee:	4606      	mov	r6, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	d507      	bpl.n	8003604 <__smakebuf_r+0x1c>
 80035f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80035f8:	6023      	str	r3, [r4, #0]
 80035fa:	6123      	str	r3, [r4, #16]
 80035fc:	2301      	movs	r3, #1
 80035fe:	6163      	str	r3, [r4, #20]
 8003600:	b002      	add	sp, #8
 8003602:	bd70      	pop	{r4, r5, r6, pc}
 8003604:	ab01      	add	r3, sp, #4
 8003606:	466a      	mov	r2, sp
 8003608:	f7ff ffc8 	bl	800359c <__swhatbuf_r>
 800360c:	9900      	ldr	r1, [sp, #0]
 800360e:	4605      	mov	r5, r0
 8003610:	4630      	mov	r0, r6
 8003612:	f000 f895 	bl	8003740 <_malloc_r>
 8003616:	b948      	cbnz	r0, 800362c <__smakebuf_r+0x44>
 8003618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800361c:	059a      	lsls	r2, r3, #22
 800361e:	d4ef      	bmi.n	8003600 <__smakebuf_r+0x18>
 8003620:	f023 0303 	bic.w	r3, r3, #3
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	81a3      	strh	r3, [r4, #12]
 800362a:	e7e3      	b.n	80035f4 <__smakebuf_r+0xc>
 800362c:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <__smakebuf_r+0x7c>)
 800362e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	6020      	str	r0, [r4, #0]
 8003634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003638:	81a3      	strh	r3, [r4, #12]
 800363a:	9b00      	ldr	r3, [sp, #0]
 800363c:	6163      	str	r3, [r4, #20]
 800363e:	9b01      	ldr	r3, [sp, #4]
 8003640:	6120      	str	r0, [r4, #16]
 8003642:	b15b      	cbz	r3, 800365c <__smakebuf_r+0x74>
 8003644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003648:	4630      	mov	r0, r6
 800364a:	f000 fc63 	bl	8003f14 <_isatty_r>
 800364e:	b128      	cbz	r0, 800365c <__smakebuf_r+0x74>
 8003650:	89a3      	ldrh	r3, [r4, #12]
 8003652:	f023 0303 	bic.w	r3, r3, #3
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	81a3      	strh	r3, [r4, #12]
 800365c:	89a0      	ldrh	r0, [r4, #12]
 800365e:	4305      	orrs	r5, r0
 8003660:	81a5      	strh	r5, [r4, #12]
 8003662:	e7cd      	b.n	8003600 <__smakebuf_r+0x18>
 8003664:	080033f5 	.word	0x080033f5

08003668 <_free_r>:
 8003668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800366a:	2900      	cmp	r1, #0
 800366c:	d044      	beq.n	80036f8 <_free_r+0x90>
 800366e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003672:	9001      	str	r0, [sp, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f1a1 0404 	sub.w	r4, r1, #4
 800367a:	bfb8      	it	lt
 800367c:	18e4      	addlt	r4, r4, r3
 800367e:	f000 fc6b 	bl	8003f58 <__malloc_lock>
 8003682:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <_free_r+0x94>)
 8003684:	9801      	ldr	r0, [sp, #4]
 8003686:	6813      	ldr	r3, [r2, #0]
 8003688:	b933      	cbnz	r3, 8003698 <_free_r+0x30>
 800368a:	6063      	str	r3, [r4, #4]
 800368c:	6014      	str	r4, [r2, #0]
 800368e:	b003      	add	sp, #12
 8003690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003694:	f000 bc66 	b.w	8003f64 <__malloc_unlock>
 8003698:	42a3      	cmp	r3, r4
 800369a:	d908      	bls.n	80036ae <_free_r+0x46>
 800369c:	6825      	ldr	r5, [r4, #0]
 800369e:	1961      	adds	r1, r4, r5
 80036a0:	428b      	cmp	r3, r1
 80036a2:	bf01      	itttt	eq
 80036a4:	6819      	ldreq	r1, [r3, #0]
 80036a6:	685b      	ldreq	r3, [r3, #4]
 80036a8:	1949      	addeq	r1, r1, r5
 80036aa:	6021      	streq	r1, [r4, #0]
 80036ac:	e7ed      	b.n	800368a <_free_r+0x22>
 80036ae:	461a      	mov	r2, r3
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	b10b      	cbz	r3, 80036b8 <_free_r+0x50>
 80036b4:	42a3      	cmp	r3, r4
 80036b6:	d9fa      	bls.n	80036ae <_free_r+0x46>
 80036b8:	6811      	ldr	r1, [r2, #0]
 80036ba:	1855      	adds	r5, r2, r1
 80036bc:	42a5      	cmp	r5, r4
 80036be:	d10b      	bne.n	80036d8 <_free_r+0x70>
 80036c0:	6824      	ldr	r4, [r4, #0]
 80036c2:	4421      	add	r1, r4
 80036c4:	1854      	adds	r4, r2, r1
 80036c6:	42a3      	cmp	r3, r4
 80036c8:	6011      	str	r1, [r2, #0]
 80036ca:	d1e0      	bne.n	800368e <_free_r+0x26>
 80036cc:	681c      	ldr	r4, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	6053      	str	r3, [r2, #4]
 80036d2:	4421      	add	r1, r4
 80036d4:	6011      	str	r1, [r2, #0]
 80036d6:	e7da      	b.n	800368e <_free_r+0x26>
 80036d8:	d902      	bls.n	80036e0 <_free_r+0x78>
 80036da:	230c      	movs	r3, #12
 80036dc:	6003      	str	r3, [r0, #0]
 80036de:	e7d6      	b.n	800368e <_free_r+0x26>
 80036e0:	6825      	ldr	r5, [r4, #0]
 80036e2:	1961      	adds	r1, r4, r5
 80036e4:	428b      	cmp	r3, r1
 80036e6:	bf04      	itt	eq
 80036e8:	6819      	ldreq	r1, [r3, #0]
 80036ea:	685b      	ldreq	r3, [r3, #4]
 80036ec:	6063      	str	r3, [r4, #4]
 80036ee:	bf04      	itt	eq
 80036f0:	1949      	addeq	r1, r1, r5
 80036f2:	6021      	streq	r1, [r4, #0]
 80036f4:	6054      	str	r4, [r2, #4]
 80036f6:	e7ca      	b.n	800368e <_free_r+0x26>
 80036f8:	b003      	add	sp, #12
 80036fa:	bd30      	pop	{r4, r5, pc}
 80036fc:	2000012c 	.word	0x2000012c

08003700 <sbrk_aligned>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	4e0e      	ldr	r6, [pc, #56]	; (800373c <sbrk_aligned+0x3c>)
 8003704:	460c      	mov	r4, r1
 8003706:	6831      	ldr	r1, [r6, #0]
 8003708:	4605      	mov	r5, r0
 800370a:	b911      	cbnz	r1, 8003712 <sbrk_aligned+0x12>
 800370c:	f000 fb7a 	bl	8003e04 <_sbrk_r>
 8003710:	6030      	str	r0, [r6, #0]
 8003712:	4621      	mov	r1, r4
 8003714:	4628      	mov	r0, r5
 8003716:	f000 fb75 	bl	8003e04 <_sbrk_r>
 800371a:	1c43      	adds	r3, r0, #1
 800371c:	d00a      	beq.n	8003734 <sbrk_aligned+0x34>
 800371e:	1cc4      	adds	r4, r0, #3
 8003720:	f024 0403 	bic.w	r4, r4, #3
 8003724:	42a0      	cmp	r0, r4
 8003726:	d007      	beq.n	8003738 <sbrk_aligned+0x38>
 8003728:	1a21      	subs	r1, r4, r0
 800372a:	4628      	mov	r0, r5
 800372c:	f000 fb6a 	bl	8003e04 <_sbrk_r>
 8003730:	3001      	adds	r0, #1
 8003732:	d101      	bne.n	8003738 <sbrk_aligned+0x38>
 8003734:	f04f 34ff 	mov.w	r4, #4294967295
 8003738:	4620      	mov	r0, r4
 800373a:	bd70      	pop	{r4, r5, r6, pc}
 800373c:	20000130 	.word	0x20000130

08003740 <_malloc_r>:
 8003740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003744:	1ccd      	adds	r5, r1, #3
 8003746:	f025 0503 	bic.w	r5, r5, #3
 800374a:	3508      	adds	r5, #8
 800374c:	2d0c      	cmp	r5, #12
 800374e:	bf38      	it	cc
 8003750:	250c      	movcc	r5, #12
 8003752:	2d00      	cmp	r5, #0
 8003754:	4607      	mov	r7, r0
 8003756:	db01      	blt.n	800375c <_malloc_r+0x1c>
 8003758:	42a9      	cmp	r1, r5
 800375a:	d905      	bls.n	8003768 <_malloc_r+0x28>
 800375c:	230c      	movs	r3, #12
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	2600      	movs	r6, #0
 8003762:	4630      	mov	r0, r6
 8003764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003768:	4e2e      	ldr	r6, [pc, #184]	; (8003824 <_malloc_r+0xe4>)
 800376a:	f000 fbf5 	bl	8003f58 <__malloc_lock>
 800376e:	6833      	ldr	r3, [r6, #0]
 8003770:	461c      	mov	r4, r3
 8003772:	bb34      	cbnz	r4, 80037c2 <_malloc_r+0x82>
 8003774:	4629      	mov	r1, r5
 8003776:	4638      	mov	r0, r7
 8003778:	f7ff ffc2 	bl	8003700 <sbrk_aligned>
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	4604      	mov	r4, r0
 8003780:	d14d      	bne.n	800381e <_malloc_r+0xde>
 8003782:	6834      	ldr	r4, [r6, #0]
 8003784:	4626      	mov	r6, r4
 8003786:	2e00      	cmp	r6, #0
 8003788:	d140      	bne.n	800380c <_malloc_r+0xcc>
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	4631      	mov	r1, r6
 800378e:	4638      	mov	r0, r7
 8003790:	eb04 0803 	add.w	r8, r4, r3
 8003794:	f000 fb36 	bl	8003e04 <_sbrk_r>
 8003798:	4580      	cmp	r8, r0
 800379a:	d13a      	bne.n	8003812 <_malloc_r+0xd2>
 800379c:	6821      	ldr	r1, [r4, #0]
 800379e:	3503      	adds	r5, #3
 80037a0:	1a6d      	subs	r5, r5, r1
 80037a2:	f025 0503 	bic.w	r5, r5, #3
 80037a6:	3508      	adds	r5, #8
 80037a8:	2d0c      	cmp	r5, #12
 80037aa:	bf38      	it	cc
 80037ac:	250c      	movcc	r5, #12
 80037ae:	4629      	mov	r1, r5
 80037b0:	4638      	mov	r0, r7
 80037b2:	f7ff ffa5 	bl	8003700 <sbrk_aligned>
 80037b6:	3001      	adds	r0, #1
 80037b8:	d02b      	beq.n	8003812 <_malloc_r+0xd2>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	442b      	add	r3, r5
 80037be:	6023      	str	r3, [r4, #0]
 80037c0:	e00e      	b.n	80037e0 <_malloc_r+0xa0>
 80037c2:	6822      	ldr	r2, [r4, #0]
 80037c4:	1b52      	subs	r2, r2, r5
 80037c6:	d41e      	bmi.n	8003806 <_malloc_r+0xc6>
 80037c8:	2a0b      	cmp	r2, #11
 80037ca:	d916      	bls.n	80037fa <_malloc_r+0xba>
 80037cc:	1961      	adds	r1, r4, r5
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	6025      	str	r5, [r4, #0]
 80037d2:	bf18      	it	ne
 80037d4:	6059      	strne	r1, [r3, #4]
 80037d6:	6863      	ldr	r3, [r4, #4]
 80037d8:	bf08      	it	eq
 80037da:	6031      	streq	r1, [r6, #0]
 80037dc:	5162      	str	r2, [r4, r5]
 80037de:	604b      	str	r3, [r1, #4]
 80037e0:	4638      	mov	r0, r7
 80037e2:	f104 060b 	add.w	r6, r4, #11
 80037e6:	f000 fbbd 	bl	8003f64 <__malloc_unlock>
 80037ea:	f026 0607 	bic.w	r6, r6, #7
 80037ee:	1d23      	adds	r3, r4, #4
 80037f0:	1af2      	subs	r2, r6, r3
 80037f2:	d0b6      	beq.n	8003762 <_malloc_r+0x22>
 80037f4:	1b9b      	subs	r3, r3, r6
 80037f6:	50a3      	str	r3, [r4, r2]
 80037f8:	e7b3      	b.n	8003762 <_malloc_r+0x22>
 80037fa:	6862      	ldr	r2, [r4, #4]
 80037fc:	42a3      	cmp	r3, r4
 80037fe:	bf0c      	ite	eq
 8003800:	6032      	streq	r2, [r6, #0]
 8003802:	605a      	strne	r2, [r3, #4]
 8003804:	e7ec      	b.n	80037e0 <_malloc_r+0xa0>
 8003806:	4623      	mov	r3, r4
 8003808:	6864      	ldr	r4, [r4, #4]
 800380a:	e7b2      	b.n	8003772 <_malloc_r+0x32>
 800380c:	4634      	mov	r4, r6
 800380e:	6876      	ldr	r6, [r6, #4]
 8003810:	e7b9      	b.n	8003786 <_malloc_r+0x46>
 8003812:	230c      	movs	r3, #12
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	4638      	mov	r0, r7
 8003818:	f000 fba4 	bl	8003f64 <__malloc_unlock>
 800381c:	e7a1      	b.n	8003762 <_malloc_r+0x22>
 800381e:	6025      	str	r5, [r4, #0]
 8003820:	e7de      	b.n	80037e0 <_malloc_r+0xa0>
 8003822:	bf00      	nop
 8003824:	2000012c 	.word	0x2000012c

08003828 <__sfputc_r>:
 8003828:	6893      	ldr	r3, [r2, #8]
 800382a:	3b01      	subs	r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	b410      	push	{r4}
 8003830:	6093      	str	r3, [r2, #8]
 8003832:	da08      	bge.n	8003846 <__sfputc_r+0x1e>
 8003834:	6994      	ldr	r4, [r2, #24]
 8003836:	42a3      	cmp	r3, r4
 8003838:	db01      	blt.n	800383e <__sfputc_r+0x16>
 800383a:	290a      	cmp	r1, #10
 800383c:	d103      	bne.n	8003846 <__sfputc_r+0x1e>
 800383e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003842:	f7ff bc31 	b.w	80030a8 <__swbuf_r>
 8003846:	6813      	ldr	r3, [r2, #0]
 8003848:	1c58      	adds	r0, r3, #1
 800384a:	6010      	str	r0, [r2, #0]
 800384c:	7019      	strb	r1, [r3, #0]
 800384e:	4608      	mov	r0, r1
 8003850:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003854:	4770      	bx	lr

08003856 <__sfputs_r>:
 8003856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003858:	4606      	mov	r6, r0
 800385a:	460f      	mov	r7, r1
 800385c:	4614      	mov	r4, r2
 800385e:	18d5      	adds	r5, r2, r3
 8003860:	42ac      	cmp	r4, r5
 8003862:	d101      	bne.n	8003868 <__sfputs_r+0x12>
 8003864:	2000      	movs	r0, #0
 8003866:	e007      	b.n	8003878 <__sfputs_r+0x22>
 8003868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800386c:	463a      	mov	r2, r7
 800386e:	4630      	mov	r0, r6
 8003870:	f7ff ffda 	bl	8003828 <__sfputc_r>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d1f3      	bne.n	8003860 <__sfputs_r+0xa>
 8003878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800387c <_vfiprintf_r>:
 800387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003880:	460d      	mov	r5, r1
 8003882:	b09d      	sub	sp, #116	; 0x74
 8003884:	4614      	mov	r4, r2
 8003886:	4698      	mov	r8, r3
 8003888:	4606      	mov	r6, r0
 800388a:	b118      	cbz	r0, 8003894 <_vfiprintf_r+0x18>
 800388c:	6983      	ldr	r3, [r0, #24]
 800388e:	b90b      	cbnz	r3, 8003894 <_vfiprintf_r+0x18>
 8003890:	f7ff fde4 	bl	800345c <__sinit>
 8003894:	4b89      	ldr	r3, [pc, #548]	; (8003abc <_vfiprintf_r+0x240>)
 8003896:	429d      	cmp	r5, r3
 8003898:	d11b      	bne.n	80038d2 <_vfiprintf_r+0x56>
 800389a:	6875      	ldr	r5, [r6, #4]
 800389c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800389e:	07d9      	lsls	r1, r3, #31
 80038a0:	d405      	bmi.n	80038ae <_vfiprintf_r+0x32>
 80038a2:	89ab      	ldrh	r3, [r5, #12]
 80038a4:	059a      	lsls	r2, r3, #22
 80038a6:	d402      	bmi.n	80038ae <_vfiprintf_r+0x32>
 80038a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038aa:	f7ff fe75 	bl	8003598 <__retarget_lock_acquire_recursive>
 80038ae:	89ab      	ldrh	r3, [r5, #12]
 80038b0:	071b      	lsls	r3, r3, #28
 80038b2:	d501      	bpl.n	80038b8 <_vfiprintf_r+0x3c>
 80038b4:	692b      	ldr	r3, [r5, #16]
 80038b6:	b9eb      	cbnz	r3, 80038f4 <_vfiprintf_r+0x78>
 80038b8:	4629      	mov	r1, r5
 80038ba:	4630      	mov	r0, r6
 80038bc:	f7ff fc46 	bl	800314c <__swsetup_r>
 80038c0:	b1c0      	cbz	r0, 80038f4 <_vfiprintf_r+0x78>
 80038c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038c4:	07dc      	lsls	r4, r3, #31
 80038c6:	d50e      	bpl.n	80038e6 <_vfiprintf_r+0x6a>
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	b01d      	add	sp, #116	; 0x74
 80038ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d2:	4b7b      	ldr	r3, [pc, #492]	; (8003ac0 <_vfiprintf_r+0x244>)
 80038d4:	429d      	cmp	r5, r3
 80038d6:	d101      	bne.n	80038dc <_vfiprintf_r+0x60>
 80038d8:	68b5      	ldr	r5, [r6, #8]
 80038da:	e7df      	b.n	800389c <_vfiprintf_r+0x20>
 80038dc:	4b79      	ldr	r3, [pc, #484]	; (8003ac4 <_vfiprintf_r+0x248>)
 80038de:	429d      	cmp	r5, r3
 80038e0:	bf08      	it	eq
 80038e2:	68f5      	ldreq	r5, [r6, #12]
 80038e4:	e7da      	b.n	800389c <_vfiprintf_r+0x20>
 80038e6:	89ab      	ldrh	r3, [r5, #12]
 80038e8:	0598      	lsls	r0, r3, #22
 80038ea:	d4ed      	bmi.n	80038c8 <_vfiprintf_r+0x4c>
 80038ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038ee:	f7ff fe54 	bl	800359a <__retarget_lock_release_recursive>
 80038f2:	e7e9      	b.n	80038c8 <_vfiprintf_r+0x4c>
 80038f4:	2300      	movs	r3, #0
 80038f6:	9309      	str	r3, [sp, #36]	; 0x24
 80038f8:	2320      	movs	r3, #32
 80038fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003902:	2330      	movs	r3, #48	; 0x30
 8003904:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ac8 <_vfiprintf_r+0x24c>
 8003908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800390c:	f04f 0901 	mov.w	r9, #1
 8003910:	4623      	mov	r3, r4
 8003912:	469a      	mov	sl, r3
 8003914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003918:	b10a      	cbz	r2, 800391e <_vfiprintf_r+0xa2>
 800391a:	2a25      	cmp	r2, #37	; 0x25
 800391c:	d1f9      	bne.n	8003912 <_vfiprintf_r+0x96>
 800391e:	ebba 0b04 	subs.w	fp, sl, r4
 8003922:	d00b      	beq.n	800393c <_vfiprintf_r+0xc0>
 8003924:	465b      	mov	r3, fp
 8003926:	4622      	mov	r2, r4
 8003928:	4629      	mov	r1, r5
 800392a:	4630      	mov	r0, r6
 800392c:	f7ff ff93 	bl	8003856 <__sfputs_r>
 8003930:	3001      	adds	r0, #1
 8003932:	f000 80aa 	beq.w	8003a8a <_vfiprintf_r+0x20e>
 8003936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003938:	445a      	add	r2, fp
 800393a:	9209      	str	r2, [sp, #36]	; 0x24
 800393c:	f89a 3000 	ldrb.w	r3, [sl]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80a2 	beq.w	8003a8a <_vfiprintf_r+0x20e>
 8003946:	2300      	movs	r3, #0
 8003948:	f04f 32ff 	mov.w	r2, #4294967295
 800394c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003950:	f10a 0a01 	add.w	sl, sl, #1
 8003954:	9304      	str	r3, [sp, #16]
 8003956:	9307      	str	r3, [sp, #28]
 8003958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800395c:	931a      	str	r3, [sp, #104]	; 0x68
 800395e:	4654      	mov	r4, sl
 8003960:	2205      	movs	r2, #5
 8003962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003966:	4858      	ldr	r0, [pc, #352]	; (8003ac8 <_vfiprintf_r+0x24c>)
 8003968:	f7fc fc42 	bl	80001f0 <memchr>
 800396c:	9a04      	ldr	r2, [sp, #16]
 800396e:	b9d8      	cbnz	r0, 80039a8 <_vfiprintf_r+0x12c>
 8003970:	06d1      	lsls	r1, r2, #27
 8003972:	bf44      	itt	mi
 8003974:	2320      	movmi	r3, #32
 8003976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800397a:	0713      	lsls	r3, r2, #28
 800397c:	bf44      	itt	mi
 800397e:	232b      	movmi	r3, #43	; 0x2b
 8003980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003984:	f89a 3000 	ldrb.w	r3, [sl]
 8003988:	2b2a      	cmp	r3, #42	; 0x2a
 800398a:	d015      	beq.n	80039b8 <_vfiprintf_r+0x13c>
 800398c:	9a07      	ldr	r2, [sp, #28]
 800398e:	4654      	mov	r4, sl
 8003990:	2000      	movs	r0, #0
 8003992:	f04f 0c0a 	mov.w	ip, #10
 8003996:	4621      	mov	r1, r4
 8003998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800399c:	3b30      	subs	r3, #48	; 0x30
 800399e:	2b09      	cmp	r3, #9
 80039a0:	d94e      	bls.n	8003a40 <_vfiprintf_r+0x1c4>
 80039a2:	b1b0      	cbz	r0, 80039d2 <_vfiprintf_r+0x156>
 80039a4:	9207      	str	r2, [sp, #28]
 80039a6:	e014      	b.n	80039d2 <_vfiprintf_r+0x156>
 80039a8:	eba0 0308 	sub.w	r3, r0, r8
 80039ac:	fa09 f303 	lsl.w	r3, r9, r3
 80039b0:	4313      	orrs	r3, r2
 80039b2:	9304      	str	r3, [sp, #16]
 80039b4:	46a2      	mov	sl, r4
 80039b6:	e7d2      	b.n	800395e <_vfiprintf_r+0xe2>
 80039b8:	9b03      	ldr	r3, [sp, #12]
 80039ba:	1d19      	adds	r1, r3, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	9103      	str	r1, [sp, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bfbb      	ittet	lt
 80039c4:	425b      	neglt	r3, r3
 80039c6:	f042 0202 	orrlt.w	r2, r2, #2
 80039ca:	9307      	strge	r3, [sp, #28]
 80039cc:	9307      	strlt	r3, [sp, #28]
 80039ce:	bfb8      	it	lt
 80039d0:	9204      	strlt	r2, [sp, #16]
 80039d2:	7823      	ldrb	r3, [r4, #0]
 80039d4:	2b2e      	cmp	r3, #46	; 0x2e
 80039d6:	d10c      	bne.n	80039f2 <_vfiprintf_r+0x176>
 80039d8:	7863      	ldrb	r3, [r4, #1]
 80039da:	2b2a      	cmp	r3, #42	; 0x2a
 80039dc:	d135      	bne.n	8003a4a <_vfiprintf_r+0x1ce>
 80039de:	9b03      	ldr	r3, [sp, #12]
 80039e0:	1d1a      	adds	r2, r3, #4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	9203      	str	r2, [sp, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bfb8      	it	lt
 80039ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80039ee:	3402      	adds	r4, #2
 80039f0:	9305      	str	r3, [sp, #20]
 80039f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ad8 <_vfiprintf_r+0x25c>
 80039f6:	7821      	ldrb	r1, [r4, #0]
 80039f8:	2203      	movs	r2, #3
 80039fa:	4650      	mov	r0, sl
 80039fc:	f7fc fbf8 	bl	80001f0 <memchr>
 8003a00:	b140      	cbz	r0, 8003a14 <_vfiprintf_r+0x198>
 8003a02:	2340      	movs	r3, #64	; 0x40
 8003a04:	eba0 000a 	sub.w	r0, r0, sl
 8003a08:	fa03 f000 	lsl.w	r0, r3, r0
 8003a0c:	9b04      	ldr	r3, [sp, #16]
 8003a0e:	4303      	orrs	r3, r0
 8003a10:	3401      	adds	r4, #1
 8003a12:	9304      	str	r3, [sp, #16]
 8003a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a18:	482c      	ldr	r0, [pc, #176]	; (8003acc <_vfiprintf_r+0x250>)
 8003a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a1e:	2206      	movs	r2, #6
 8003a20:	f7fc fbe6 	bl	80001f0 <memchr>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d03f      	beq.n	8003aa8 <_vfiprintf_r+0x22c>
 8003a28:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <_vfiprintf_r+0x254>)
 8003a2a:	bb1b      	cbnz	r3, 8003a74 <_vfiprintf_r+0x1f8>
 8003a2c:	9b03      	ldr	r3, [sp, #12]
 8003a2e:	3307      	adds	r3, #7
 8003a30:	f023 0307 	bic.w	r3, r3, #7
 8003a34:	3308      	adds	r3, #8
 8003a36:	9303      	str	r3, [sp, #12]
 8003a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a3a:	443b      	add	r3, r7
 8003a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a3e:	e767      	b.n	8003910 <_vfiprintf_r+0x94>
 8003a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a44:	460c      	mov	r4, r1
 8003a46:	2001      	movs	r0, #1
 8003a48:	e7a5      	b.n	8003996 <_vfiprintf_r+0x11a>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	3401      	adds	r4, #1
 8003a4e:	9305      	str	r3, [sp, #20]
 8003a50:	4619      	mov	r1, r3
 8003a52:	f04f 0c0a 	mov.w	ip, #10
 8003a56:	4620      	mov	r0, r4
 8003a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a5c:	3a30      	subs	r2, #48	; 0x30
 8003a5e:	2a09      	cmp	r2, #9
 8003a60:	d903      	bls.n	8003a6a <_vfiprintf_r+0x1ee>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0c5      	beq.n	80039f2 <_vfiprintf_r+0x176>
 8003a66:	9105      	str	r1, [sp, #20]
 8003a68:	e7c3      	b.n	80039f2 <_vfiprintf_r+0x176>
 8003a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a6e:	4604      	mov	r4, r0
 8003a70:	2301      	movs	r3, #1
 8003a72:	e7f0      	b.n	8003a56 <_vfiprintf_r+0x1da>
 8003a74:	ab03      	add	r3, sp, #12
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	462a      	mov	r2, r5
 8003a7a:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <_vfiprintf_r+0x258>)
 8003a7c:	a904      	add	r1, sp, #16
 8003a7e:	4630      	mov	r0, r6
 8003a80:	f3af 8000 	nop.w
 8003a84:	4607      	mov	r7, r0
 8003a86:	1c78      	adds	r0, r7, #1
 8003a88:	d1d6      	bne.n	8003a38 <_vfiprintf_r+0x1bc>
 8003a8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a8c:	07d9      	lsls	r1, r3, #31
 8003a8e:	d405      	bmi.n	8003a9c <_vfiprintf_r+0x220>
 8003a90:	89ab      	ldrh	r3, [r5, #12]
 8003a92:	059a      	lsls	r2, r3, #22
 8003a94:	d402      	bmi.n	8003a9c <_vfiprintf_r+0x220>
 8003a96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a98:	f7ff fd7f 	bl	800359a <__retarget_lock_release_recursive>
 8003a9c:	89ab      	ldrh	r3, [r5, #12]
 8003a9e:	065b      	lsls	r3, r3, #25
 8003aa0:	f53f af12 	bmi.w	80038c8 <_vfiprintf_r+0x4c>
 8003aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aa6:	e711      	b.n	80038cc <_vfiprintf_r+0x50>
 8003aa8:	ab03      	add	r3, sp, #12
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	462a      	mov	r2, r5
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <_vfiprintf_r+0x258>)
 8003ab0:	a904      	add	r1, sp, #16
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f000 f880 	bl	8003bb8 <_printf_i>
 8003ab8:	e7e4      	b.n	8003a84 <_vfiprintf_r+0x208>
 8003aba:	bf00      	nop
 8003abc:	08004074 	.word	0x08004074
 8003ac0:	08004094 	.word	0x08004094
 8003ac4:	08004054 	.word	0x08004054
 8003ac8:	080040b4 	.word	0x080040b4
 8003acc:	080040be 	.word	0x080040be
 8003ad0:	00000000 	.word	0x00000000
 8003ad4:	08003857 	.word	0x08003857
 8003ad8:	080040ba 	.word	0x080040ba

08003adc <_printf_common>:
 8003adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae0:	4616      	mov	r6, r2
 8003ae2:	4699      	mov	r9, r3
 8003ae4:	688a      	ldr	r2, [r1, #8]
 8003ae6:	690b      	ldr	r3, [r1, #16]
 8003ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003aec:	4293      	cmp	r3, r2
 8003aee:	bfb8      	it	lt
 8003af0:	4613      	movlt	r3, r2
 8003af2:	6033      	str	r3, [r6, #0]
 8003af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003af8:	4607      	mov	r7, r0
 8003afa:	460c      	mov	r4, r1
 8003afc:	b10a      	cbz	r2, 8003b02 <_printf_common+0x26>
 8003afe:	3301      	adds	r3, #1
 8003b00:	6033      	str	r3, [r6, #0]
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	0699      	lsls	r1, r3, #26
 8003b06:	bf42      	ittt	mi
 8003b08:	6833      	ldrmi	r3, [r6, #0]
 8003b0a:	3302      	addmi	r3, #2
 8003b0c:	6033      	strmi	r3, [r6, #0]
 8003b0e:	6825      	ldr	r5, [r4, #0]
 8003b10:	f015 0506 	ands.w	r5, r5, #6
 8003b14:	d106      	bne.n	8003b24 <_printf_common+0x48>
 8003b16:	f104 0a19 	add.w	sl, r4, #25
 8003b1a:	68e3      	ldr	r3, [r4, #12]
 8003b1c:	6832      	ldr	r2, [r6, #0]
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	42ab      	cmp	r3, r5
 8003b22:	dc26      	bgt.n	8003b72 <_printf_common+0x96>
 8003b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b28:	1e13      	subs	r3, r2, #0
 8003b2a:	6822      	ldr	r2, [r4, #0]
 8003b2c:	bf18      	it	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	0692      	lsls	r2, r2, #26
 8003b32:	d42b      	bmi.n	8003b8c <_printf_common+0xb0>
 8003b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b38:	4649      	mov	r1, r9
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	47c0      	blx	r8
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d01e      	beq.n	8003b80 <_printf_common+0xa4>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	68e5      	ldr	r5, [r4, #12]
 8003b46:	6832      	ldr	r2, [r6, #0]
 8003b48:	f003 0306 	and.w	r3, r3, #6
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	bf08      	it	eq
 8003b50:	1aad      	subeq	r5, r5, r2
 8003b52:	68a3      	ldr	r3, [r4, #8]
 8003b54:	6922      	ldr	r2, [r4, #16]
 8003b56:	bf0c      	ite	eq
 8003b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b5c:	2500      	movne	r5, #0
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	bfc4      	itt	gt
 8003b62:	1a9b      	subgt	r3, r3, r2
 8003b64:	18ed      	addgt	r5, r5, r3
 8003b66:	2600      	movs	r6, #0
 8003b68:	341a      	adds	r4, #26
 8003b6a:	42b5      	cmp	r5, r6
 8003b6c:	d11a      	bne.n	8003ba4 <_printf_common+0xc8>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e008      	b.n	8003b84 <_printf_common+0xa8>
 8003b72:	2301      	movs	r3, #1
 8003b74:	4652      	mov	r2, sl
 8003b76:	4649      	mov	r1, r9
 8003b78:	4638      	mov	r0, r7
 8003b7a:	47c0      	blx	r8
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d103      	bne.n	8003b88 <_printf_common+0xac>
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295
 8003b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b88:	3501      	adds	r5, #1
 8003b8a:	e7c6      	b.n	8003b1a <_printf_common+0x3e>
 8003b8c:	18e1      	adds	r1, r4, r3
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	2030      	movs	r0, #48	; 0x30
 8003b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b96:	4422      	add	r2, r4
 8003b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	e7c7      	b.n	8003b34 <_printf_common+0x58>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	4649      	mov	r1, r9
 8003baa:	4638      	mov	r0, r7
 8003bac:	47c0      	blx	r8
 8003bae:	3001      	adds	r0, #1
 8003bb0:	d0e6      	beq.n	8003b80 <_printf_common+0xa4>
 8003bb2:	3601      	adds	r6, #1
 8003bb4:	e7d9      	b.n	8003b6a <_printf_common+0x8e>
	...

08003bb8 <_printf_i>:
 8003bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbc:	7e0f      	ldrb	r7, [r1, #24]
 8003bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bc0:	2f78      	cmp	r7, #120	; 0x78
 8003bc2:	4691      	mov	r9, r2
 8003bc4:	4680      	mov	r8, r0
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	469a      	mov	sl, r3
 8003bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bce:	d807      	bhi.n	8003be0 <_printf_i+0x28>
 8003bd0:	2f62      	cmp	r7, #98	; 0x62
 8003bd2:	d80a      	bhi.n	8003bea <_printf_i+0x32>
 8003bd4:	2f00      	cmp	r7, #0
 8003bd6:	f000 80d8 	beq.w	8003d8a <_printf_i+0x1d2>
 8003bda:	2f58      	cmp	r7, #88	; 0x58
 8003bdc:	f000 80a3 	beq.w	8003d26 <_printf_i+0x16e>
 8003be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003be8:	e03a      	b.n	8003c60 <_printf_i+0xa8>
 8003bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bee:	2b15      	cmp	r3, #21
 8003bf0:	d8f6      	bhi.n	8003be0 <_printf_i+0x28>
 8003bf2:	a101      	add	r1, pc, #4	; (adr r1, 8003bf8 <_printf_i+0x40>)
 8003bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bf8:	08003c51 	.word	0x08003c51
 8003bfc:	08003c65 	.word	0x08003c65
 8003c00:	08003be1 	.word	0x08003be1
 8003c04:	08003be1 	.word	0x08003be1
 8003c08:	08003be1 	.word	0x08003be1
 8003c0c:	08003be1 	.word	0x08003be1
 8003c10:	08003c65 	.word	0x08003c65
 8003c14:	08003be1 	.word	0x08003be1
 8003c18:	08003be1 	.word	0x08003be1
 8003c1c:	08003be1 	.word	0x08003be1
 8003c20:	08003be1 	.word	0x08003be1
 8003c24:	08003d71 	.word	0x08003d71
 8003c28:	08003c95 	.word	0x08003c95
 8003c2c:	08003d53 	.word	0x08003d53
 8003c30:	08003be1 	.word	0x08003be1
 8003c34:	08003be1 	.word	0x08003be1
 8003c38:	08003d93 	.word	0x08003d93
 8003c3c:	08003be1 	.word	0x08003be1
 8003c40:	08003c95 	.word	0x08003c95
 8003c44:	08003be1 	.word	0x08003be1
 8003c48:	08003be1 	.word	0x08003be1
 8003c4c:	08003d5b 	.word	0x08003d5b
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	1d1a      	adds	r2, r3, #4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	602a      	str	r2, [r5, #0]
 8003c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0a3      	b.n	8003dac <_printf_i+0x1f4>
 8003c64:	6820      	ldr	r0, [r4, #0]
 8003c66:	6829      	ldr	r1, [r5, #0]
 8003c68:	0606      	lsls	r6, r0, #24
 8003c6a:	f101 0304 	add.w	r3, r1, #4
 8003c6e:	d50a      	bpl.n	8003c86 <_printf_i+0xce>
 8003c70:	680e      	ldr	r6, [r1, #0]
 8003c72:	602b      	str	r3, [r5, #0]
 8003c74:	2e00      	cmp	r6, #0
 8003c76:	da03      	bge.n	8003c80 <_printf_i+0xc8>
 8003c78:	232d      	movs	r3, #45	; 0x2d
 8003c7a:	4276      	negs	r6, r6
 8003c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c80:	485e      	ldr	r0, [pc, #376]	; (8003dfc <_printf_i+0x244>)
 8003c82:	230a      	movs	r3, #10
 8003c84:	e019      	b.n	8003cba <_printf_i+0x102>
 8003c86:	680e      	ldr	r6, [r1, #0]
 8003c88:	602b      	str	r3, [r5, #0]
 8003c8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c8e:	bf18      	it	ne
 8003c90:	b236      	sxthne	r6, r6
 8003c92:	e7ef      	b.n	8003c74 <_printf_i+0xbc>
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	1d19      	adds	r1, r3, #4
 8003c9a:	6029      	str	r1, [r5, #0]
 8003c9c:	0601      	lsls	r1, r0, #24
 8003c9e:	d501      	bpl.n	8003ca4 <_printf_i+0xec>
 8003ca0:	681e      	ldr	r6, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <_printf_i+0xf2>
 8003ca4:	0646      	lsls	r6, r0, #25
 8003ca6:	d5fb      	bpl.n	8003ca0 <_printf_i+0xe8>
 8003ca8:	881e      	ldrh	r6, [r3, #0]
 8003caa:	4854      	ldr	r0, [pc, #336]	; (8003dfc <_printf_i+0x244>)
 8003cac:	2f6f      	cmp	r7, #111	; 0x6f
 8003cae:	bf0c      	ite	eq
 8003cb0:	2308      	moveq	r3, #8
 8003cb2:	230a      	movne	r3, #10
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cba:	6865      	ldr	r5, [r4, #4]
 8003cbc:	60a5      	str	r5, [r4, #8]
 8003cbe:	2d00      	cmp	r5, #0
 8003cc0:	bfa2      	ittt	ge
 8003cc2:	6821      	ldrge	r1, [r4, #0]
 8003cc4:	f021 0104 	bicge.w	r1, r1, #4
 8003cc8:	6021      	strge	r1, [r4, #0]
 8003cca:	b90e      	cbnz	r6, 8003cd0 <_printf_i+0x118>
 8003ccc:	2d00      	cmp	r5, #0
 8003cce:	d04d      	beq.n	8003d6c <_printf_i+0x1b4>
 8003cd0:	4615      	mov	r5, r2
 8003cd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cd6:	fb03 6711 	mls	r7, r3, r1, r6
 8003cda:	5dc7      	ldrb	r7, [r0, r7]
 8003cdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ce0:	4637      	mov	r7, r6
 8003ce2:	42bb      	cmp	r3, r7
 8003ce4:	460e      	mov	r6, r1
 8003ce6:	d9f4      	bls.n	8003cd2 <_printf_i+0x11a>
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d10b      	bne.n	8003d04 <_printf_i+0x14c>
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	07de      	lsls	r6, r3, #31
 8003cf0:	d508      	bpl.n	8003d04 <_printf_i+0x14c>
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	6861      	ldr	r1, [r4, #4]
 8003cf6:	4299      	cmp	r1, r3
 8003cf8:	bfde      	ittt	le
 8003cfa:	2330      	movle	r3, #48	; 0x30
 8003cfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d04:	1b52      	subs	r2, r2, r5
 8003d06:	6122      	str	r2, [r4, #16]
 8003d08:	f8cd a000 	str.w	sl, [sp]
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	aa03      	add	r2, sp, #12
 8003d10:	4621      	mov	r1, r4
 8003d12:	4640      	mov	r0, r8
 8003d14:	f7ff fee2 	bl	8003adc <_printf_common>
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d14c      	bne.n	8003db6 <_printf_i+0x1fe>
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	b004      	add	sp, #16
 8003d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d26:	4835      	ldr	r0, [pc, #212]	; (8003dfc <_printf_i+0x244>)
 8003d28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d2c:	6829      	ldr	r1, [r5, #0]
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d34:	6029      	str	r1, [r5, #0]
 8003d36:	061d      	lsls	r5, r3, #24
 8003d38:	d514      	bpl.n	8003d64 <_printf_i+0x1ac>
 8003d3a:	07df      	lsls	r7, r3, #31
 8003d3c:	bf44      	itt	mi
 8003d3e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d42:	6023      	strmi	r3, [r4, #0]
 8003d44:	b91e      	cbnz	r6, 8003d4e <_printf_i+0x196>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	f023 0320 	bic.w	r3, r3, #32
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	2310      	movs	r3, #16
 8003d50:	e7b0      	b.n	8003cb4 <_printf_i+0xfc>
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	f043 0320 	orr.w	r3, r3, #32
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	2378      	movs	r3, #120	; 0x78
 8003d5c:	4828      	ldr	r0, [pc, #160]	; (8003e00 <_printf_i+0x248>)
 8003d5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d62:	e7e3      	b.n	8003d2c <_printf_i+0x174>
 8003d64:	0659      	lsls	r1, r3, #25
 8003d66:	bf48      	it	mi
 8003d68:	b2b6      	uxthmi	r6, r6
 8003d6a:	e7e6      	b.n	8003d3a <_printf_i+0x182>
 8003d6c:	4615      	mov	r5, r2
 8003d6e:	e7bb      	b.n	8003ce8 <_printf_i+0x130>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	6826      	ldr	r6, [r4, #0]
 8003d74:	6961      	ldr	r1, [r4, #20]
 8003d76:	1d18      	adds	r0, r3, #4
 8003d78:	6028      	str	r0, [r5, #0]
 8003d7a:	0635      	lsls	r5, r6, #24
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	d501      	bpl.n	8003d84 <_printf_i+0x1cc>
 8003d80:	6019      	str	r1, [r3, #0]
 8003d82:	e002      	b.n	8003d8a <_printf_i+0x1d2>
 8003d84:	0670      	lsls	r0, r6, #25
 8003d86:	d5fb      	bpl.n	8003d80 <_printf_i+0x1c8>
 8003d88:	8019      	strh	r1, [r3, #0]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	6123      	str	r3, [r4, #16]
 8003d8e:	4615      	mov	r5, r2
 8003d90:	e7ba      	b.n	8003d08 <_printf_i+0x150>
 8003d92:	682b      	ldr	r3, [r5, #0]
 8003d94:	1d1a      	adds	r2, r3, #4
 8003d96:	602a      	str	r2, [r5, #0]
 8003d98:	681d      	ldr	r5, [r3, #0]
 8003d9a:	6862      	ldr	r2, [r4, #4]
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f7fc fa26 	bl	80001f0 <memchr>
 8003da4:	b108      	cbz	r0, 8003daa <_printf_i+0x1f2>
 8003da6:	1b40      	subs	r0, r0, r5
 8003da8:	6060      	str	r0, [r4, #4]
 8003daa:	6863      	ldr	r3, [r4, #4]
 8003dac:	6123      	str	r3, [r4, #16]
 8003dae:	2300      	movs	r3, #0
 8003db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db4:	e7a8      	b.n	8003d08 <_printf_i+0x150>
 8003db6:	6923      	ldr	r3, [r4, #16]
 8003db8:	462a      	mov	r2, r5
 8003dba:	4649      	mov	r1, r9
 8003dbc:	4640      	mov	r0, r8
 8003dbe:	47d0      	blx	sl
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d0ab      	beq.n	8003d1c <_printf_i+0x164>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	079b      	lsls	r3, r3, #30
 8003dc8:	d413      	bmi.n	8003df2 <_printf_i+0x23a>
 8003dca:	68e0      	ldr	r0, [r4, #12]
 8003dcc:	9b03      	ldr	r3, [sp, #12]
 8003dce:	4298      	cmp	r0, r3
 8003dd0:	bfb8      	it	lt
 8003dd2:	4618      	movlt	r0, r3
 8003dd4:	e7a4      	b.n	8003d20 <_printf_i+0x168>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	4632      	mov	r2, r6
 8003dda:	4649      	mov	r1, r9
 8003ddc:	4640      	mov	r0, r8
 8003dde:	47d0      	blx	sl
 8003de0:	3001      	adds	r0, #1
 8003de2:	d09b      	beq.n	8003d1c <_printf_i+0x164>
 8003de4:	3501      	adds	r5, #1
 8003de6:	68e3      	ldr	r3, [r4, #12]
 8003de8:	9903      	ldr	r1, [sp, #12]
 8003dea:	1a5b      	subs	r3, r3, r1
 8003dec:	42ab      	cmp	r3, r5
 8003dee:	dcf2      	bgt.n	8003dd6 <_printf_i+0x21e>
 8003df0:	e7eb      	b.n	8003dca <_printf_i+0x212>
 8003df2:	2500      	movs	r5, #0
 8003df4:	f104 0619 	add.w	r6, r4, #25
 8003df8:	e7f5      	b.n	8003de6 <_printf_i+0x22e>
 8003dfa:	bf00      	nop
 8003dfc:	080040c5 	.word	0x080040c5
 8003e00:	080040d6 	.word	0x080040d6

08003e04 <_sbrk_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d06      	ldr	r5, [pc, #24]	; (8003e20 <_sbrk_r+0x1c>)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fd f89c 	bl	8000f4c <_sbrk>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_sbrk_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_sbrk_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	20000134 	.word	0x20000134

08003e24 <__sread>:
 8003e24:	b510      	push	{r4, lr}
 8003e26:	460c      	mov	r4, r1
 8003e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2c:	f000 f8a0 	bl	8003f70 <_read_r>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	bfab      	itete	ge
 8003e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e36:	89a3      	ldrhlt	r3, [r4, #12]
 8003e38:	181b      	addge	r3, r3, r0
 8003e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e3e:	bfac      	ite	ge
 8003e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e42:	81a3      	strhlt	r3, [r4, #12]
 8003e44:	bd10      	pop	{r4, pc}

08003e46 <__swrite>:
 8003e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4a:	461f      	mov	r7, r3
 8003e4c:	898b      	ldrh	r3, [r1, #12]
 8003e4e:	05db      	lsls	r3, r3, #23
 8003e50:	4605      	mov	r5, r0
 8003e52:	460c      	mov	r4, r1
 8003e54:	4616      	mov	r6, r2
 8003e56:	d505      	bpl.n	8003e64 <__swrite+0x1e>
 8003e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f000 f868 	bl	8003f34 <_lseek_r>
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e6e:	81a3      	strh	r3, [r4, #12]
 8003e70:	4632      	mov	r2, r6
 8003e72:	463b      	mov	r3, r7
 8003e74:	4628      	mov	r0, r5
 8003e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7a:	f000 b817 	b.w	8003eac <_write_r>

08003e7e <__sseek>:
 8003e7e:	b510      	push	{r4, lr}
 8003e80:	460c      	mov	r4, r1
 8003e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e86:	f000 f855 	bl	8003f34 <_lseek_r>
 8003e8a:	1c43      	adds	r3, r0, #1
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	bf15      	itete	ne
 8003e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e9a:	81a3      	strheq	r3, [r4, #12]
 8003e9c:	bf18      	it	ne
 8003e9e:	81a3      	strhne	r3, [r4, #12]
 8003ea0:	bd10      	pop	{r4, pc}

08003ea2 <__sclose>:
 8003ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ea6:	f000 b813 	b.w	8003ed0 <_close_r>
	...

08003eac <_write_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	4d07      	ldr	r5, [pc, #28]	; (8003ecc <_write_r+0x20>)
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	4608      	mov	r0, r1
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	602a      	str	r2, [r5, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f7fc fff5 	bl	8000eaa <_write>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <_write_r+0x1e>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	b103      	cbz	r3, 8003eca <_write_r+0x1e>
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	20000134 	.word	0x20000134

08003ed0 <_close_r>:
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	4d06      	ldr	r5, [pc, #24]	; (8003eec <_close_r+0x1c>)
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	4608      	mov	r0, r1
 8003eda:	602b      	str	r3, [r5, #0]
 8003edc:	f7fd f801 	bl	8000ee2 <_close>
 8003ee0:	1c43      	adds	r3, r0, #1
 8003ee2:	d102      	bne.n	8003eea <_close_r+0x1a>
 8003ee4:	682b      	ldr	r3, [r5, #0]
 8003ee6:	b103      	cbz	r3, 8003eea <_close_r+0x1a>
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	bd38      	pop	{r3, r4, r5, pc}
 8003eec:	20000134 	.word	0x20000134

08003ef0 <_fstat_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4d07      	ldr	r5, [pc, #28]	; (8003f10 <_fstat_r+0x20>)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4608      	mov	r0, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	602b      	str	r3, [r5, #0]
 8003efe:	f7fc fffc 	bl	8000efa <_fstat>
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d102      	bne.n	8003f0c <_fstat_r+0x1c>
 8003f06:	682b      	ldr	r3, [r5, #0]
 8003f08:	b103      	cbz	r3, 8003f0c <_fstat_r+0x1c>
 8003f0a:	6023      	str	r3, [r4, #0]
 8003f0c:	bd38      	pop	{r3, r4, r5, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000134 	.word	0x20000134

08003f14 <_isatty_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4d06      	ldr	r5, [pc, #24]	; (8003f30 <_isatty_r+0x1c>)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	f7fc fffb 	bl	8000f1a <_isatty>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_isatty_r+0x1a>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_isatty_r+0x1a>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	20000134 	.word	0x20000134

08003f34 <_lseek_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4d07      	ldr	r5, [pc, #28]	; (8003f54 <_lseek_r+0x20>)
 8003f38:	4604      	mov	r4, r0
 8003f3a:	4608      	mov	r0, r1
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	602a      	str	r2, [r5, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f7fc fff4 	bl	8000f30 <_lseek>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_lseek_r+0x1e>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_lseek_r+0x1e>
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	20000134 	.word	0x20000134

08003f58 <__malloc_lock>:
 8003f58:	4801      	ldr	r0, [pc, #4]	; (8003f60 <__malloc_lock+0x8>)
 8003f5a:	f7ff bb1d 	b.w	8003598 <__retarget_lock_acquire_recursive>
 8003f5e:	bf00      	nop
 8003f60:	20000128 	.word	0x20000128

08003f64 <__malloc_unlock>:
 8003f64:	4801      	ldr	r0, [pc, #4]	; (8003f6c <__malloc_unlock+0x8>)
 8003f66:	f7ff bb18 	b.w	800359a <__retarget_lock_release_recursive>
 8003f6a:	bf00      	nop
 8003f6c:	20000128 	.word	0x20000128

08003f70 <_read_r>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	4d07      	ldr	r5, [pc, #28]	; (8003f90 <_read_r+0x20>)
 8003f74:	4604      	mov	r4, r0
 8003f76:	4608      	mov	r0, r1
 8003f78:	4611      	mov	r1, r2
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	602a      	str	r2, [r5, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f7fc ff76 	bl	8000e70 <_read>
 8003f84:	1c43      	adds	r3, r0, #1
 8003f86:	d102      	bne.n	8003f8e <_read_r+0x1e>
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	b103      	cbz	r3, 8003f8e <_read_r+0x1e>
 8003f8c:	6023      	str	r3, [r4, #0]
 8003f8e:	bd38      	pop	{r3, r4, r5, pc}
 8003f90:	20000134 	.word	0x20000134

08003f94 <_init>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr

08003fa0 <_fini>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	bf00      	nop
 8003fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa6:	bc08      	pop	{r3}
 8003fa8:	469e      	mov	lr, r3
 8003faa:	4770      	bx	lr
